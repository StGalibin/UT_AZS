
Процедура ЗагрузитьДанные() Экспорт
	
	Отказ = Ложь;
	СобытияДляЖурналаРегистрации = Новый Структура();
	
	НайденныеФайлы = НайтиФайлы (Константы.Топаз_ПутьКПапкеЗагрузки.Получить(),
		Константы.Топаз_ШаблонИмениЗагружаемыхФайлов.Получить() + "*.xml",
		Истина);
	
	Если НайденныеФайлы.Количество() <> 0 Тогда
		
		ТаблицаДанныхЗагрузки = СформироватьСтруктуруТаблицыДанныхЗагрузки ();
		КэшДанных             = СформироватьКэшДанных();
		
		Для каждого Файл Из НайденныеФайлы Цикл
			
			ОбработатьФайл (Файл, ТаблицаДанныхЗагрузки, КэшДанных);
			
		КонецЦикла;
		
		УстановитьИдентификаторыОпераций (ТаблицаДанныхЗагрузки);
		
	КонецЕсли;
	МассивУспешноОбработанныхФайлов = Новый Массив;
	
	ОбработатьДанныеЗагрузки(ТаблицаДанныхЗагрузки, МассивУспешноОбработанныхФайлов);
	
	Если Константы.Топаз_АрхивироватьЗагруженныеФайлы.Получить() И МассивУспешноОбработанныхФайлов.Количество() > 0 Тогда
		
		//ЗаархивироватьФайлы(МассивУспешноОбработанныхФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаархивироватьФайлы(МассивУспешноОбработанныхФайлов, УдалитьпослеАрхивации = Истина)
	
	ИмяАрхива = "Архив_" + ТекущаяДатаВремяСтрокой();
	
	Архив = Новый ЗаписьZIPФайла(Константы.Топаз_ПутьКАрхивнойПапке.Получить() + "\" + ИмяАрхива + ".zip");
	
	Для каждого Файл Из МассивУспешноОбработанныхФайлов Цикл
		
		Архив.Добавить(Файл, РежимСохраненияПутейZIP.СохранятьОтносительныеПути);
		
	КонецЦикла;
	
	Архив.Записать();
	
	Если УдалитьпослеАрхивации Тогда
		
		Для каждого Файл Из МассивУспешноОбработанныхФайлов Цикл
			
			УдалитьФайлы(Файл);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаархивироватьФайлы()

Функция ТекущаяДатаВремяСтрокой()
	
	ДатаСтрокой = СтрЗаменить(Строка(ТекущаяДатаСеанса()), ":", "");
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ".", "");
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, " ", "_");
	
	Возврат ДатаСтрокой;
	
КонецФункции //  ТекущаяДатаВремяСтрокой()

Процедура УстановитьИдентификаторыОпераций(ТаблицаДанныхЗагрузки)
	
	Для каждого СтрокаДанных Из ТаблицаДанныхЗагрузки Цикл
		
		СтрокаШаблон          = СтрокаДанных.ВидОперации.ШаблонИдентификатораОперацииТопаз;
		ИдентификаторОперации = "";
		
		Если ЗначениеЗаполнено(СтрокаШаблон) Тогда
			
			МассивДанныхШаблона = ПолучитьМассивДанныхШаблона (СтрокаШаблон);
			
			Для каждого ИмяКолонки Из МассивДанныхШаблона Цикл
				
				Если Не ТаблицаДанныхЗагрузки.Колонки.Найти (СокрЛП(ИмяКолонки)) = Неопределено Тогда
					
					ИдентификаторОперации = ИдентификаторОперации + СтрокаДанных[СокрЛП(ИмяКолонки)];
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаДанных.ИдентификаторОперации = УбратьНечисловыеДанные (ИдентификаторОперации);
		
	КонецЦикла;
	
КонецПроцедуры

Функция УбратьНечисловыеДанные(ИдентификаторОперации)
	
	МассивНечисловыхДанных = Новый Массив();
	
	МассивНечисловыхДанных.Добавить(".");
	МассивНечисловыхДанных.Добавить(":");
	МассивНечисловыхДанных.Добавить("/");
	МассивНечисловыхДанных.Добавить(" ");
	
	Для каждого Элемент Из МассивНечисловыхДанных Цикл
		
		ИдентификаторОперации = СтрЗаменить(ИдентификаторОперации, Элемент, "");
		
	КонецЦикла;
	
	Возврат ИдентификаторОперации;
	
КонецФункции

Функция ПолучитьМассивДанныхШаблона(СтрокаШаблон)
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаШаблон, "+");
	
КонецФункции // ПолучитьСтруктуруШаблона()

Функция СформироватьСтруктуруТаблицыДанныхЗагрузки()
	
	ТаблицаДанныхЗагрузки = Новый ТаблицаЗначений();
	
	ТаблицаДанныхЗагрузки.Колонки.Добавить("ИмяФайла",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	255)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Организация", Новый ОписаниеТипов ("СправочникСсылка.Организации"));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Склад", Новый ОписаниеТипов ("СправочникСсылка.Склады"));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("КодСклада",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	5)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Ответственный", Новый ОписаниеТипов ("СправочникСсылка.Пользователи"));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("КассаККМ", Новый ОписаниеТипов ("СправочникСсылка.КассыККМ"));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Касса", Новый ОписаниеТипов ("СправочникСсылка.Кассы"));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("НомерСмены",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	5)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("НачалоСмены",
										   Новый ОписаниеТипов (
										   	"Дата",
											   ,
											   ,
											   ,
											   Новый КвалификаторыДаты(
											   	ЧастиДаты.ДатаВремя)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("ОкончаниеСмены",
										   Новый ОписаниеТипов (
										   	"Дата",
											   ,
											   ,
											   ,
											   Новый КвалификаторыДаты(
											   	ЧастиДаты.ДатаВремя)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("ИдентификаторОперации",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	50)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("НомерРезервуара",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	2)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("НомерРукава",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	2)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Дата",
										   Новый ОписаниеТипов (
										   	"Дата",
											   ,
											   ,
											   ,
											   Новый КвалификаторыДаты(
											   	ЧастиДаты.ДатаВремя)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов ("СправочникСсылка.Номенклатура"));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("КодНоменклатуры",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	5)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("ФормаОплаты", Новый ОписаниеТипов ("ПеречислениеСсылка.ФормыОплаты"));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("ВариантОформленияТовародвижения",
										   Новый ОписаниеТипов (
										   	"ПеречислениеСсылка.Топаз_ВариантыОформленияТовародвижения"));
	
	ТаблицаДанныхЗагрузки.Колонки.Добавить("ВидОплаты", Новый ОписаниеТипов ("СправочникСсылка.Топаз_ВидыОплат"));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("КодВидаОплаты",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	5)));
	
	ТаблицаДанныхЗагрузки.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов ("СправочникСсылка.Топаз_ВидыОпераций"));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Приоритет",
										   Новый ОписаниеТипов (
										   	"Число",
											   ,
											   ,
											   Новый КвалификаторыЧисла(
											   	2,
												   0,
												   ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("НомерКассовогоДокумента",
										   Новый ОписаниеТипов (
										   	"Число",
											   ,
											   ,
											   Новый КвалификаторыЧисла(
											   	5,
												   0,
												   ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Контрагент", Новый ОписаниеТипов ("СправочникСсылка.Контрагенты"));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("КодКонтрагента",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	5)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("ИННКонтрагента",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	12)));
	
	ТаблицаДанныхЗагрузки.Колонки.Добавить("ТопливнаяКарта",
										   Новый ОписаниеТипов (
										   	"СправочникСсылка.Топаз_ТопливныеКарты"));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("КодТипаКассовогоДокумента",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	5)));
	
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Количество",
										   Новый ОписаниеТипов (
										   	"Число",
											   ,
											   ,
											   Новый КвалификаторыЧисла(
											   	10,
												   2,
												   ДопустимыйЗнак.Любой)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("ФактическаяЦена",
										   Новый ОписаниеТипов (
										   	"Число",
											   ,
											   ,
											   Новый КвалификаторыЧисла(
											   	10,
												   2,
												   ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Сумма",
										   Новый ОписаниеТипов (
										   	"Число",
											   ,
											   ,
											   Новый КвалификаторыЧисла(
											   	10,
												   2,
												   ДопустимыйЗнак.Любой)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Цена",
										   Новый ОписаниеТипов (
										   	"Число",
											   ,
											   ,
											   Новый КвалификаторыЧисла(
											   	10,
												   2,
												   ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанныхЗагрузки.Колонки.Добавить("Комментарий",
										   Новый ОписаниеТипов (
										   	"Строка",
											   ,
											   ,
											   ,
											   Новый КвалификаторыСтроки(
											   	150)));
	
	Возврат ТаблицаДанныхЗагрузки;
	
КонецФункции // СформироватьСтруктуруТаблицыДанныхЗагрузки()

#Область КэшДанных

Функция СформироватьКэшДанных()
	
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(Константы.Топаз_СвойствоКод.Получить());
	КэшДанных = Новый Структура();
	КэшДанных.Вставить("Склады", ПолучитьТаблицуКодов("Склады", МассивСвойств));
	КэшДанных.Вставить("Номенклатура", ПолучитьТаблицуКодов("Номенклатура", МассивСвойств));
	МассивСвойств.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Склад"));
	КэшДанных.Вставить("Пользователи", ПолучитьТаблицуКодовПользователей(МассивСвойств));
	КэшДанных.Вставить("КассыККМ", ПолучитьТаблицуКассККМ());
	КэшДанных.Вставить("ВидыОперацийТопаз", ПолучитьВидыОперацийТопаз());
	КэшДанных.Вставить("ВидыОплатТопаз", ПолучитьВидыОплатТопаз());
	
	Возврат КэшДанных;
	
КонецФункции // СформироватьКэшДанных()

Функция ПолучитьВидыОперацийТопаз()
	
	Запрос       = Новый Запрос;
	Запрос.Текст =
				   "ВЫБРАТЬ
				   	|	Топаз_ВидыОпераций.Наименование КАК Наименование,
					   |	Топаз_ВидыОпераций.ИмяВидаОперацииТопаз КАК ИмяВидаОперацииТопаз,
					   |	Топаз_ВидыОпераций.ШаблонИдентификатораОперацииТопаз КАК ШаблонИдентификатораОперацииТопаз,
					   |	Топаз_ВидыОпераций.Ссылка КАК Ссылка,
					   |	Топаз_ВидыОпераций.Приоритет КАК Приоритет
					   |ИЗ
					   |	Справочник.Топаз_ВидыОпераций КАК Топаз_ВидыОпераций";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьВидыОперацийТопаз()

Функция ПолучитьВидыОплатТопаз()
	
	Запрос       = Новый Запрос;
	Запрос.Текст =
				   "ВЫБРАТЬ
				   	|	Топаз_ВидыОплат.Наименование КАК Наименование,
					   |	Топаз_ВидыОплат.ФормаОплаты КАК ФормаОплаты,
					   |	Топаз_ВидыОплат.ВариантОформленияТовародвижения КАК ВариантОформленияТовародвижения,
					   |	Топаз_ВидыОплат.Ссылка КАК Ссылка,
					   |	Топаз_ВидыОплат.Код_Топаз КАК Код,
					   |	Топаз_ВидыОплат.ОплатаПоТопливнымКартам КАК ОплатаПоТопливнымКартам
					   |ИЗ
					   |	Справочник.Топаз_ВидыОплат КАК Топаз_ВидыОплат";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьВидыОперацийТопаз()

Функция ПолучитьТаблицуКассККМ()
	
	Запрос       = Новый Запрос;
	Запрос.Текст =
				   "ВЫБРАТЬ
				   	|	КассыККМДополнительныеРеквизиты.Ссылка КАК Ссылка,
					   |	КассыККМДополнительныеРеквизиты.Ссылка.Склад КАК Склад,
					   |	КассыККМДополнительныеРеквизиты.Значение КАК Касса,
					   |	КассыККМДополнительныеРеквизиты.Ссылка.Владелец КАК Организация
					   |ИЗ
					   |	Справочник.КассыККМ.ДополнительныеРеквизиты КАК КассыККМДополнительныеРеквизиты
					   |ГДЕ
					   |	КассыККМДополнительныеРеквизиты.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Свойство",
							  ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
							  	"Касса"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуКассККМ()

Функция ПолучитьТаблицуКодов(СправочникИмя, МассивСвойств)
	
	Запрос       = Новый Запрос;
	Запрос.Текст =
				   "ВЫБРАТЬ
				   	|	СправочникДополнительныеРеквизиты.Ссылка КАК Ссылка,
					   |	СправочникДополнительныеРеквизиты.Значение КАК Код
					   |ИЗ
					   |	Справочник." + СправочникИмя + ".ДополнительныеРеквизиты КАК СправочникДополнительныеРеквизиты
					   |ГДЕ
					   |	СправочникДополнительныеРеквизиты.Свойство В(&Свойства)";
	
	Запрос.УстановитьПараметр("Свойства", МассивСвойств);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуКодов()

Функция ПолучитьТаблицуКодовПользователей(МассивСвойств)
	
	ТЗПользователи = СформироватьСтруктуруТаблицыДанныхПользователей();
	
	Запрос       = Новый Запрос;
	Запрос.Текст =
				   "ВЫБРАТЬ
				   	|	ПользователиДополнительныеРеквизиты.Ссылка,
					   |	ПользователиДополнительныеРеквизиты.Свойство.Заголовок КАК ИмяСвойства,
					   |	ПользователиДополнительныеРеквизиты.Значение КАК Значение
					   |ИЗ
					   |	Справочник.Пользователи.ДополнительныеРеквизиты КАК ПользователиДополнительныеРеквизиты
					   |ГДЕ
					   |	ПользователиДополнительныеРеквизиты.Свойство В(&Свойства)
					   |ИТОГИ ПО
					   |	Ссылка";
	
	Запрос.УстановитьПараметр("Свойства", МассивСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПользователь = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПользователь.Следующий() Цикл
		
		НоваяСтрока        = ТЗПользователи.Добавить();
		НоваяСтрока.Ссылка = ВыборкаПользователь.Ссылка;
		
		ВыборкаДетальныеЗаписи = ВыборкаПользователь.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрока[ВыборкаДетальныеЗаписи.ИмяСвойства] = ВыборкаДетальныеЗаписи.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТЗПользователи;
	
КонецФункции

Функция СформироватьСтруктуруТаблицыДанныхПользователей()
	
	ТЗПользователи = Новый ТаблицаЗначений();
	
	ТЗПользователи.Колонки.Добавить("Ссылка", Новый ОписаниеТипов ("СправочникСсылка.Пользователи"));
	ТЗПользователи.Колонки.Добавить("Склад", Новый ОписаниеТипов ("СправочникСсылка.Склады"));
	ТЗПользователи.Колонки.Добавить("Код", Новый ОписаниеТипов ("Строка", , , , Новый КвалификаторыСтроки(50)));
	
	Возврат ТЗПользователи;
	
КонецФункции // СформироватьСтруктуруТаблицыДанныхПользователей()

#КонецОбласти

#Область ОбработкаФайлов

Процедура ОбработатьФайл (Файл, ТаблицаДанныхЗагрузки, КэшДанных)
	
	Читатель = Новый ЧтениеXML();
	Читатель.ОткрытьФайл(Файл.ПолноеИмя);
	СтруктураОбщихДанных = Новый Структура();
	
	Пока Читатель.Прочитать() Цикл
		
		Если (Читатель.Имя = "DataPaket") И (Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			СтруктураОбщихДанных.Вставить("КодСклада", Читатель.ПолучитьАтрибут("AZSCode"));
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Код", СтруктураОбщихДанных.КодСклада);
			СтруктураОбщихДанных.Вставить("Склад",
										  ПреобразоватьДанные (
										  	КэшДанных.Склады,
											  ПараметрыОтбора));
			ПараметрыОтбора.Очистить();
			ПараметрыОтбора.Вставить("Склад", СтруктураОбщихДанных.Склад);
			СтруктураОбщихДанных.Вставить("КассаККМ",
										  ПреобразоватьДанные (
										  	КэшДанных.КассыККМ,
											  ПараметрыОтбора));
			СтруктураОбщихДанных.Вставить("Касса",
										  ПреобразоватьДанные (
										  	КэшДанных.КассыККМ,
											  ПараметрыОтбора,
											  "Касса"));
			СтруктураОбщихДанных.Вставить("Организация",
										  ПреобразоватьДанные (
										  	КэшДанных.КассыККМ,
											  ПараметрыОтбора,
											  "Организация"))
                                              КонецЕсли;
		
		Если (Читатель.Имя = "Session") И (Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			
			СтруктураОбщихДанных.Вставить("НомерСмены", Читатель.ПолучитьАтрибут("SessionNum"));
			СтруктураОбщихДанных.Вставить("НачалоСмены", ДатаВремяИзСтроки(Читатель.ПолучитьАтрибут("StartDateTime")));
			СтруктураОбщихДанных.Вставить("ОкончаниеСмены", ДатаВремяИзСтроки(Читатель.ПолучитьАтрибут("EndDateTime")));
			ПараметрыОтбора.Очистить();
			ПараметрыОтбора.Вставить("Склад", СтруктураОбщихДанных.Склад);
			ПараметрыОтбора.Вставить("Код", Читатель.ПолучитьАтрибут("UserName"));
			СтруктураОбщихДанных.Вставить("Ответственный",
										  ПреобразоватьДанные(
										  	КэшДанных.Пользователи,
											  ПараметрыОтбора));
			
		КонецЕсли;
		
		Если Читатель.Имя = "OutcomeByRetail" И Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Не ЭтоПродажаПоТопливнымКартам (КэшДанных,
												 Читатель.ПолучитьАтрибут(
												 	"PaymentModeExtCode"),
												 Читатель.ПолучитьАтрибут(
												 	"PaymentModeName")) Тогда
				
				Строка = ЗаполнитьДанныеСтрокиПоУмолчанию(КэшДанных,
														  Файл.ПолноеИмя,
														  СтруктураОбщихДанных,
														  ТаблицаДанныхЗагрузки,
														  Читатель.Имя);
				
				Если Читатель.ПолучитьАтрибут("PaymentModeName") = "Тех. прокачка"
					Или Читатель.ПолучитьАтрибут("PaymentModeName") = "Переливы" Тогда
					
					ПараметрыОтбора = Новый Структура();
	
					ПараметрыОтбора.Вставить("ИмяВидаОперацииТопаз", "СкладскиеОперации");
	
					Строка.ВидОперации = ПреобразоватьДанные(КэшДанных.ВидыОперацийТопаз,
										   ПараметрыОтбора);

					ДобавитьДанныеСкладскихОпераций(Читатель, КэшДанных, Строка);
					
				Иначе
					
					ДобавитьДанныеПродаж(Читатель, КэшДанных, Строка);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Читатель.Имя = "IncomeByDischarge" И Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Строка = ЗаполнитьДанныеСтрокиПоУмолчанию(КэшДанных,
													  Файл.ПолноеИмя,
													  СтруктураОбщихДанных,
													  ТаблицаДанныхЗагрузки,
													  Читатель.Имя);
			Строка.ВариантОформленияТовародвижения = Перечисления.Топаз_ВариантыОформленияТовародвижения.ПриобретениеТоваровУслуг;
			
			ДобавитьДанныеПоступлений(Читатель, КэшДанных, Строка);
			
		КонецЕсли;
		
		Если Читатель.Имя = "Cash"
			И Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента
			и Не Читатель.ПолучитьАтрибут("DocTypeID") = "6" Тогда
			
			Строка = ЗаполнитьДанныеСтрокиПоУмолчанию(КэшДанных,
													  Файл.ПолноеИмя,
													  СтруктураОбщихДанных,
													  ТаблицаДанныхЗагрузки,
													  Читатель.Имя);
			
			ДобавитьДанныеКассовыхОпераций(Читатель, КэшДанных, Строка, ТаблицаДанныхЗагрузки);
			
		КонецЕсли;
		
		Если Читатель.Имя = "OutcomeByOffice" И Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента и
			ЭтоПродажаПоТопливнымКартам (КэшДанных,
										 Читатель.ПолучитьАтрибут(
										 	"PaymentModeExtCode"),
										 Читатель.ПолучитьАтрибут(
										 	"PaymentModeName"))Тогда
			
			Строка = ЗаполнитьДанныеСтрокиПоУмолчанию(КэшДанных,
													  Файл.ПолноеИмя,
													  СтруктураОбщихДанных,
													  ТаблицаДанныхЗагрузки,
													  Читатель.Имя);
			
			ДобавитьДанныеПродажПоТопливнымКартам(Читатель, КэшДанных, Строка);
			
		КонецЕсли;
		
		Если Читатель.Имя = "TechReturn" И Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Строка = ЗаполнитьДанныеСтрокиПоУмолчанию(КэшДанных,
													  Файл.ПолноеИмя,
													  СтруктураОбщихДанных,
													  ТаблицаДанныхЗагрузки,
													  "СкладскиеОперации");
			
			ДобавитьДанныеСкладскихОпераций(Читатель, КэшДанных, Строка, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Читатель.Закрыть();
	
КонецПроцедуры

Функция ЗаполнитьДанныеСтрокиПоУмолчанию(КэшДанных,
										 ПолноеИмяФайла,
										 СтруктураОбщихДанных,
										 ТаблицаДанныхЗагрузки,
										 ИмяВидаОперации)
										 	
	ПараметрыОтбора = Новый Структура();
	
	ПараметрыОтбора.Вставить("ИмяВидаОперацииТопаз", ИмяВидаОперации);
	ВидОперацииТопаз = ПреобразоватьДанные(КэшДанных.ВидыОперацийТопаз,
										   ПараметрыОтбора);
	Строка = ТаблицаДанныхЗагрузки.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, СтруктураОбщихДанных);
	Строка.ВидОперации = ВидОперацииТопаз;
	Строка.ИмяФайла    = ПолноеИмяФайла;
	Строка.Приоритет   = ВидОперацииТопаз.Приоритет;
	
	Возврат Строка;
	
КонецФункции

Функция ПреобразоватьДанные(Кэш, ПараметрыОтбора, ИмяРеквизита = "Ссылка")
	
	МассивСтрок = Кэш.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивСтрок.Количество() = 1 Тогда
		
		Возврат МассивСтрок[0][ИмяРеквизита];
		
	Иначе
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецФункции // ПреобразоватьДанные()

Процедура ДобавитьДанныеКассовыхОпераций (Читатель, КэшДанных, Строка, ТаблицаДанныхЗагрузки)
	
	ПараметрыОтбора = Новый Структура();
	
	Строка.Дата        = ПолучитьДатуДокумента(Строка.НачалоСмены, Строка.ОкончаниеСмены);
	Строка.Комментарий = Читатель.ПолучитьАтрибут("Remark");
	
	Строка.КодТипаКассовогоДокумента       = Читатель.ПолучитьАтрибут("DocTypeID");
	Строка.Сумма = Число (Читатель.ПолучитьАтрибут("Amount"));
	Строка.ВариантОформленияТовародвижения = ? (Строка.Сумма < 0,
												Перечисления.Топаз_ВариантыОформленияТовародвижения.ПриходныйКассовыйОрдер,
												Перечисления.Топаз_ВариантыОформленияТовародвижения.РасходныйКассовыйОрдер);
	Строка.НомерКассовогоДокумента = ПолучитьНомерКассовогоДокумента(Строка, ТаблицаДанныхЗагрузки) ;
	
КонецПроцедуры

Функция ПолучитьНомерКассовогоДокумента(Строка, ТаблицаДанныхЗагрузки)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаДанныхЗагрузки.ИмяФайла КАК ИмяФайла,
		|	ТаблицаДанныхЗагрузки.Склад КАК Склад,
		|	ТаблицаДанныхЗагрузки.НомерСмены КАК НомерСмены,
		|	ТаблицаДанныхЗагрузки.ОкончаниеСмены КАК ОкончаниеСмены,
		|	ТаблицаДанныхЗагрузки.НомерКассовогоДокумента КАК НомерКассовогоДокумента
		|ПОМЕСТИТЬ ТаблицаДанныхЗагрузки
		|ИЗ
		|	&ТаблицаДанныхЗагрузки КАК ТаблицаДанныхЗагрузки";
	
	Запрос.УстановитьПараметр("ТаблицаДанныхЗагрузки", ТаблицаДанныхЗагрузки);
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДанныхЗагрузки.НомерКассовогоДокумента) КАК НомерКассовогоДокумента
		|ИЗ
		|	ТаблицаДанныхЗагрузки КАК ТаблицаДанныхЗагрузки
		|ГДЕ
		|	ТаблицаДанныхЗагрузки.ИмяФайла = &ИмяФайла
		|	И ТаблицаДанныхЗагрузки.Склад = &Склад
		|	И ТаблицаДанныхЗагрузки.НомерСмены = &НомерСмены
		|	И ТаблицаДанныхЗагрузки.ОкончаниеСмены = &ОкончаниеСмены";
	
	Запрос.УстановитьПараметр("ИмяФайла", Строка.ИмяФайла);
	Запрос.УстановитьПараметр("Склад", Строка.Склад);
	Запрос.УстановитьПараметр("НомерСмены", Строка.НомерСмены);
	Запрос.УстановитьПараметр("ОкончаниеСмены", Строка.ОкончаниеСмены);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗАпроса.Пустой() Тогда
		Возврат 1;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.НомерКассовогоДокумента + 1;
	КонецЕсли;
	
КонецФункции // ПолучитьНомерКассовогоДокумента(Строка, ТаблицаДанныхЗагрузки)()

Процедура ДобавитьДанныеПоступлений (Читатель, КэшДанных, Строка)
	
	ПараметрыОтбора = Новый Структура();
	
	Строка.Дата = ? (Читатель.ПолучитьАтрибут("DateTime") = "",
		ПолучитьДатуДокумента(
			Строка.НачалоСмены,
			Строка.ОкончаниеСмены),
		Читатель.ПолучитьАтрибут(
			"DateTime"));
	Строка.КодКонтрагента = Читатель.ПолучитьАтрибут("PartnerExtCode");
	Строка.ИННКонтрагента = СокрЛП(Читатель.ПолучитьАтрибут("PartnerINN"));
	
	Строка.Контрагент = ПолучитьКонтрагента (Строка.КодКонтрагента, Строка.ИННКонтрагента);
	
	Строка.КодНоменклатуры = Читатель.ПолучитьАтрибут("FuelExtCode");
	ПараметрыОтбора.Очистить();
	ПараметрыОтбора.Вставить("Код", Строка.КодНоменклатуры);
	Строка.Номенклатура = ПреобразоватьДанные(КэшДанных.Номенклатура,
											  ПараметрыОтбора);
	
	Строка.Количество      = Число (Читатель.ПолучитьАтрибут("Volume"));
	Строка.НомерРезервуара = Читатель.ПолучитьАтрибут("TankNum");
	Строка.Цена            = Число (Читатель.ПолучитьАтрибут("Price"));
	Строка.Сумма           = Строка.Количество*Строка.Цена;
	
КонецПроцедуры

Процедура ДобавитьДанныеСкладскихОпераций(Читатель, КэшДанных, Строка, ЭтоВозврат = Ложь)
	
	ПараметрыОтбора = Новый Структура();
	
	Строка.Дата = ПолучитьДатуДокумента(Строка.НачалоСмены, Строка.ОкончаниеСмены);
	
	Строка.КодНоменклатуры = Читатель.ПолучитьАтрибут("FuelExtCode");
	
	ПараметрыОтбора.Вставить("Код", Строка.КодНоменклатуры);
	
	Строка.Номенклатура = ПреобразоватьДанные(КэшДанных.Номенклатура,
											  ПараметрыОтбора);
	
	ПараметрыОтбора.Очистить();
	
	Строка.КодВидаОплаты = Читатель.ПолучитьАтрибут("PaymentModeExtCode");
	Если ЭтоВозврат Тогда
	Строка.КодВидаОплаты = "7";
	КонецЕсли;
	Если ЗначениеЗаполнено(Строка.КодВидаОплаты) Тогда
		
		ПараметрыОтбора.Вставить("Код", Строка.КодВидаОплаты);
	Иначе
		
		ПараметрыОтбора.Вставить("Наименование", Читатель.ПолучитьАтрибут("PaymentModeName"));
		
	КонецЕсли;
	
	Строка.ВидОплаты = ПреобразоватьДанные(КэшДанных.ВидыОплатТопаз,
										   ПараметрыОтбора)
                                           ;
	Строка.ФормаОплаты = Строка.ВидОплаты.ФормаОплаты;
	
	Строка.Количество = Число (Читатель.ПолучитьАтрибут("Volume"));
	
	Строка.Количество = ? (ЭтоВозврат, -Строка.Количество, Строка.Количество);
	
	Строка.ВариантОформленияТовародвижения = Перечисления.Топаз_ВариантыОформленияТовародвижения.СкладскаяОперация;
	
	Строка.НомерРезервуара = Читатель.ПолучитьАтрибут("TankNum");

	Если не ЭтоВозврат Тогда
	Строка.Сумма           = Число (Читатель.ПолучитьАтрибут("Amount"));
	Строка.Цена            = Число (Читатель.ПолучитьАтрибут("OrigPrice"));
	Строка.ФактическаяЦена = ? (Строка.Количество = 0, 0, Строка.Сумма/Строка.Количество);
	 КонецЕсли;
КонецПроцедуры

Процедура ДобавитьДанныеПродаж(Читатель, КэшДанных, Строка)
	
	ПараметрыОтбора = Новый Структура();
	
	Строка.Дата = ПолучитьДатуДокумента(Строка.НачалоСмены, Строка.ОкончаниеСмены);;
	
	Строка.КодКонтрагента = Читатель.ПолучитьАтрибут("PartnerExtCode");
	Строка.ИННКонтрагента = СокрЛП(Читатель.ПолучитьАтрибут("PartnerINN"));
	Строка.Контрагент     = ? (Строка.КодКонтрагента = ""
		И СокрЛП(Читатель.ПолучитьАтрибут("PartnerName")) = "<Не выбран>", Справочники.Контрагенты.РозничныйПокупатель,
			ПолучитьКонтрагента (Строка.КодКонтрагента, Строка.ИННКонтрагента));
	Строка.КодНоменклатуры = Читатель.ПолучитьАтрибут("FuelExtCode");
	ПараметрыОтбора.Очистить();
	ПараметрыОтбора.Вставить("Код", Строка.КодНоменклатуры);
	Строка.Номенклатура = ПреобразоватьДанные(КэшДанных.Номенклатура,
											  ПараметрыОтбора);
	
	Строка.КодВидаОплаты = Читатель.ПолучитьАтрибут("PaymentModeExtCode");
	
	ПараметрыОтбора.Очистить();
	Если ЗначениеЗаполнено(Строка.КодВидаОплаты) Тогда
		ПараметрыОтбора.Вставить("Код", Строка.КодВидаОплаты);
	Иначе
		ПараметрыОтбора.Вставить("Наименование", Читатель.ПолучитьАтрибут("PaymentModeName"));
	КонецЕсли;
	Строка.ВидОплаты = ПреобразоватьДанные(КэшДанных.ВидыОплатТопаз,
										   ПараметрыОтбора);
	Строка.ФормаОплаты = Строка.ВидОплаты.ФормаОплаты;
	Строка.Количество  = Число (Читатель.ПолучитьАтрибут("Volume"));
	
	Строка.ВариантОформленияТовародвижения = Строка.ВидОплаты.ВариантОформленияТовародвижения;
	
	Строка.Сумма           = Число (Читатель.ПолучитьАтрибут("Amount"));
	Строка.Цена            = Число (Читатель.ПолучитьАтрибут("OrigPrice"));
	Строка.НомерРезервуара = Читатель.ПолучитьАтрибут("TankNum");
	Строка.НомерРукава     = Читатель.ПолучитьАтрибут("HoseName");
	Строка.ФактическаяЦена = ? (Строка.Количество = 0, 0, Строка.Сумма/Строка.Количество);
	
КонецПроцедуры

Процедура ДобавитьДанныеПродажПоТопливнымКартам(Читатель, КэшДанных, Строка)
	
	ПараметрыОтбора = Новый Структура();
	
	Строка.Дата = ПолучитьДатуДокумента(Строка.НачалоСмены, Строка.ОкончаниеСмены);;
	
	Строка.КодНоменклатуры = Читатель.ПолучитьАтрибут("FuelExtCode");
	
	ПараметрыОтбора.Вставить("Код", Строка.КодНоменклатуры);
	
	Строка.Номенклатура = ПреобразоватьДанные(КэшДанных.Номенклатура,
											  ПараметрыОтбора);
	
	Строка.КодВидаОплаты = Читатель.ПолучитьАтрибут("PaymentModeExtCode");
	
	ПараметрыОтбора.Очистить();
	ПараметрыОтбора.Вставить("Код", Строка.КодВидаОплаты);
	
	Строка.ВидОплаты = ПреобразоватьДанные(КэшДанных.ВидыОплатТопаз,
										   ПараметрыОтбора);
	
	Строка.ФормаОплаты     = Строка.ВидОплаты.ФормаОплаты;
	Строка.ВариантОформленияТовародвижения = Строка.ВидОплаты.ВариантОформленияТовародвижения;
	Строка.Количество      = Число (Читатель.ПолучитьАтрибут("Volume"));
	Строка.Сумма           = Число (Читатель.ПолучитьАтрибут("Amount"));
	Строка.Цена            = Число (Читатель.ПолучитьАтрибут("OrigPrice"));
	Строка.НомерРезервуара = Читатель.ПолучитьАтрибут("TankNum");
	Строка.НомерРукава     = Читатель.ПолучитьАтрибут("HoseName");
	Строка.ФактическаяЦена = ? (Строка.Количество = 0, 0, Строка.Сумма/Строка.Количество);
	
	Пока Читатель.Прочитать() Цикл
		
		Если Читатель.Имя = "PartnerINN" И Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Читатель.Прочитать();
			Строка.ИННКонтрагента = (Читатель.Значение);
			Строка.Контрагент     = ПолучитьКонтрагента (Строка.КодКонтрагента, Строка.ИННКонтрагента);
		ИначеЕсли Читатель.Имя = "CardCode" И Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Читатель.Прочитать();
			Строка.ТопливнаяКарта = ПолучитьДанныеТопливнойКарты (Читатель.Значение);
		ИначеЕсли Читатель.Имя = "OutcomeByOffice" И Читатель.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеТопливнойКарты(НомерКарты)
	
	Запрос       = Новый Запрос;
	Запрос.Текст =
				   "ВЫБРАТЬ
				   	|	Топаз_ТопливныеКарты.Ссылка КАК Ссылка
					   |ИЗ
					   |	Справочник.Топаз_ТопливныеКарты КАК Топаз_ТопливныеКарты
					   |ГДЕ
					   |	Топаз_ТопливныеКарты.Наименование = &НомерКарты";
	
	Запрос.УстановитьПараметр("НомерКарты", НомерКарты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Справочники.Топаз_ТопливныеКарты.НайтиПоНаименованию("Неизвестно");
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеТопливнойКарты()

Функция ПолучитьКонтрагента(КодКонтрагента, ИННКонтрагента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Свойство", Константы.Топаз_СвойствоКод.Получить());
	Запрос.УстановитьПараметр("КодКонтрагента", КодКонтрагента);
	Запрос.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
	
	Если ЗначениеЗаполнено(КодКонтрагента) Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
				|	СправочникДополнительныеРеквизиты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты.ДополнительныеРеквизиты КАК СправочникДополнительныеРеквизиты
				|ГДЕ
				|	СправочникДополнительныеРеквизиты.Свойство = &Свойство
				|	И СправочникДополнительныеРеквизиты.Значение = &КодКонтрагента";
		
	ИначеЕсли ЗначениеЗаполнено(ИННКонтрагента) Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИННКонтрагента";
		
	Иначе
		
		Возврат Справочники.Контрагенты.НайтиПоНаименованию("Неизвестный партнер");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Справочники.Контрагенты.НайтиПоНаименованию("Неизвестный партнер");
	КонецЕсли;
	
КонецФункции // ПолучитьКонтрагента(КодКонтрагента, ИННКонтрагента)

Функция ПолучитьДатуДокумента(НачалоСмены, КонецСмены)
	
	Возврат ?(КонецСмены = Дата(1, 1, 1), НачалоСмены, КонецСмены);
	
КонецФункции

Функция ДатаВремяИзСтроки(ДатаВремяСтрока)
	
	ДатаВремя = Дата(1, 1, 1);
	
	Если Не ЗначениеЗаполнено(ДатаВремяСтрока) Тогда
		
		Возврат ДатаВремя;
		
	КонецЕсли;
	
	ДатаСтрока  = Лев (ДатаВремяСтрока, 10);
	ВремяСтрока = ? (СтрДлина(ДатаВремяСтрока) = 19
		Или СтрДлина(ДатаВремяСтрока) = 18, СокрЛП(Прав(ДатаВремяСтрока, 8)), "0:00:00");
	
	Попытка
		
		ДатаВремя = Дата(ДатаСтрока + " " + ВремяСтрока);
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка преобразования даты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , ,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ДатаВремя;
	
КонецФункции

Функция ЭтоПродажаПоТопливнымКартам(КэшДанных, КодВидаОплаты, НаименованиеВидаОПлаты)
	
	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(КодВидаОплаты) Тогда
		ПараметрыОтбора.Вставить("Код", КодВидаОплаты);
	Иначе
		ПараметрыОтбора.Вставить("Наименование", НаименованиеВидаОПлаты);
	КонецЕсли;
	
	Возврат ПреобразоватьДанные(КэшДанных.ВидыОплатТопаз,
								ПараметрыОтбора, "ОплатаПоТопливнымКартам");
	
КонецФункции // ЭтоПродажаПоТопливнымКартам()

#КонецОбласти

#Область ОбработкаЗагруженныхДанных

Процедура ДобавитьИдентификаторОперации(ДокументОбъект, ИдентификаторОперации)
	
	ИдентификаторСтрока          = ДокументОбъект.ДополнительныеРеквизиты.Добавить();
	ИдентификаторСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор операции");
	ИдентификаторСтрока.Значение = ИдентификаторОперации;
	
КонецПроцедуры

Процедура ОбработатьДанныеЗагрузки(ТаблицаДанныхЗагрузки, МассивУспешноОбработанныхФайлов)
	
	РежимЗаписи = ? (Константы.Топаз_ПроводитьДокументыПриЗагрузке.Получить(),
		РежимЗаписиДокумента.Проведение,
		РежимЗаписиДокумента.Запись);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаДанныхЗагрузки.ИмяФайла КАК ИмяФайла,
		|	ТаблицаДанныхЗагрузки.Организация КАК Организация,
		|	ТаблицаДанныхЗагрузки.Склад КАК Склад,
		|	ТаблицаДанныхЗагрузки.КодСклада КАК КодСклада,
		|	ТаблицаДанныхЗагрузки.Ответственный КАК Ответственный,
		|	ТаблицаДанныхЗагрузки.КассаККМ КАК КассаККМ,
		|	ТаблицаДанныхЗагрузки.Касса КАК Касса,
		|	ТаблицаДанныхЗагрузки.НомерСмены КАК НомерСмены,
		|	ТаблицаДанныхЗагрузки.НачалоСмены КАК НачалоСмены,
		|	ТаблицаДанныхЗагрузки.ОкончаниеСмены КАК ОкончаниеСмены,
		|	ТаблицаДанныхЗагрузки.ИдентификаторОперации КАК ИдентификаторОперации,
		|	ТаблицаДанныхЗагрузки.НомерРезервуара КАК НомерРезервуара,
		|	ТаблицаДанныхЗагрузки.НомерРукава КАК НомерРукава,
		|	ТаблицаДанныхЗагрузки.Дата КАК Дата,
		|	ТаблицаДанныхЗагрузки.Номенклатура КАК Номенклатура,
		|	ТаблицаДанныхЗагрузки.КодНоменклатуры КАК КодНоменклатуры,
		|	ТаблицаДанныхЗагрузки.ФормаОплаты КАК ФормаОплаты,
		|	ТаблицаДанныхЗагрузки.ВариантОформленияТовародвижения КАК ВариантОформленияТовародвижения,
		|	ТаблицаДанныхЗагрузки.ВидОплаты КАК ВидОплаты,
		|	ТаблицаДанныхЗагрузки.КодВидаОплаты КАК КодВидаОплаты,
		|	ТаблицаДанныхЗагрузки.ВидОперации КАК ВидОперации,
		|	ТаблицаДанныхЗагрузки.Приоритет КАК Приоритет,
		|	ТаблицаДанныхЗагрузки.Контрагент КАК Контрагент,
		|	ТаблицаДанныхЗагрузки.КодКонтрагента КАК КодКонтрагента,
		|	ТаблицаДанныхЗагрузки.ИННКонтрагента КАК ИННКонтрагента,
		|	ТаблицаДанныхЗагрузки.ТопливнаяКарта КАК ТопливнаяКарта,
		|	ТаблицаДанныхЗагрузки.КодТипаКассовогоДокумента КАК КодТипаКассовогоДокумента,
		|	ТаблицаДанныхЗагрузки.Количество КАК Количество,
		|	ТаблицаДанныхЗагрузки.Цена КАК Цена,
		|	ТаблицаДанныхЗагрузки.ФактическаяЦена КАК ФактическаяЦена,
		|	ТаблицаДанныхЗагрузки.Сумма КАК Сумма,
		|	ТаблицаДанныхЗагрузки.Комментарий КАК Комментарий
		|ПОМЕСТИТЬ ТаблицаДанныхЗагрузки
		|ИЗ
		|	&ТаблицаДанныхЗагрузки КАК ТаблицаДанныхЗагрузки";
	
	Запрос.УстановитьПараметр("ТаблицаДанныхЗагрузки", ТаблицаДанныхЗагрузки);
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанныхЗагрузки.ИмяФайла КАК ИмяФайла,
	               |	ТаблицаДанныхЗагрузки.Организация КАК Организация,
	               |	ТаблицаДанныхЗагрузки.Склад КАК Склад,
	               |	ТаблицаДанныхЗагрузки.КодСклада КАК КодСклада,
	               |	ТаблицаДанныхЗагрузки.Ответственный КАК Ответственный,
	               |	ТаблицаДанныхЗагрузки.КассаККМ КАК КассаККМ,
	               |	ТаблицаДанныхЗагрузки.Касса КАК Касса,
	               |	ТаблицаДанныхЗагрузки.НомерСмены КАК НомерСмены,
	               |	ТаблицаДанныхЗагрузки.НачалоСмены КАК НачалоСмены,
	               |	ТаблицаДанныхЗагрузки.ОкончаниеСмены КАК ОкончаниеСмены,
	               |	ТаблицаДанныхЗагрузки.ИдентификаторОперации КАК ИдентификаторОперации,
	               |	ТаблицаДанныхЗагрузки.НомерРезервуара КАК НомерРезервуара,
	               |	ТаблицаДанныхЗагрузки.НомерРукава КАК НомерРукава,
	               |	ТаблицаДанныхЗагрузки.Дата КАК Дата,
	               |	ТаблицаДанныхЗагрузки.Номенклатура КАК Номенклатура,
	               |	ТаблицаДанныхЗагрузки.КодНоменклатуры КАК КодНоменклатуры,
	               |	ТаблицаДанныхЗагрузки.ФормаОплаты КАК ФормаОплаты,
	               |	ТаблицаДанныхЗагрузки.ВариантОформленияТовародвижения КАК ВариантОформленияТовародвижения,
	               |	ТаблицаДанныхЗагрузки.ВидОплаты КАК ВидОплаты,
	               |	ТаблицаДанныхЗагрузки.КодВидаОплаты КАК КодВидаОплаты,
	               |	ТаблицаДанныхЗагрузки.ВидОперации КАК ВидОперации,
	               |	ТаблицаДанныхЗагрузки.Приоритет КАК Приоритет,
	               |	ТаблицаДанныхЗагрузки.Контрагент КАК Контрагент,
	               |	ТаблицаДанныхЗагрузки.КодКонтрагента КАК КодКонтрагента,
	               |	ТаблицаДанныхЗагрузки.ИННКонтрагента КАК ИННКонтрагента,
	               |	ТаблицаДанныхЗагрузки.ТопливнаяКарта КАК ТопливнаяКарта,
	               |	ТаблицаДанныхЗагрузки.КодТипаКассовогоДокумента КАК КодТипаКассовогоДокумента,
	               |	ТаблицаДанныхЗагрузки.Количество КАК Количество,
	               |	ТаблицаДанныхЗагрузки.Цена КАК Цена,
	               |	ТаблицаДанныхЗагрузки.ФактическаяЦена КАК ФактическаяЦена,
	               |	ТаблицаДанныхЗагрузки.Сумма КАК Сумма,
	               |	ТаблицаДанныхЗагрузки.Комментарий КАК Комментарий
	               |ПОМЕСТИТЬ ТЗ
	               |ИЗ
	               |	ТаблицаДанныхЗагрузки КАК ТаблицаДанныхЗагрузки
	               |ГДЕ
	               |	ТаблицаДанныхЗагрузки.ВариантОформленияТовародвижения <> &СкладскиеОперации
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаДанныхЗагрузки.ИмяФайла,
	               |	ТаблицаДанныхЗагрузки.Организация,
	               |	ТаблицаДанныхЗагрузки.Склад,
	               |	ТаблицаДанныхЗагрузки.КодСклада,
	               |	ТаблицаДанныхЗагрузки.Ответственный,
	               |	ТаблицаДанныхЗагрузки.КассаККМ,
	               |	ТаблицаДанныхЗагрузки.Касса,
	               |	ТаблицаДанныхЗагрузки.НомерСмены,
	               |	ТаблицаДанныхЗагрузки.НачалоСмены,
	               |	ТаблицаДанныхЗагрузки.ОкончаниеСмены,
	               |	ТаблицаДанныхЗагрузки.ИдентификаторОперации,
	               |	ТаблицаДанныхЗагрузки.НомерРезервуара,
	               |	ТаблицаДанныхЗагрузки.НомерРукава,
	               |	ТаблицаДанныхЗагрузки.Дата,
	               |	ТаблицаДанныхЗагрузки.Номенклатура,
	               |	ТаблицаДанныхЗагрузки.КодНоменклатуры,
	               |	ТаблицаДанныхЗагрузки.ФормаОплаты,
	               |	ТаблицаДанныхЗагрузки.ВариантОформленияТовародвижения,
	               |	ТаблицаДанныхЗагрузки.ВидОплаты,
	               |	ТаблицаДанныхЗагрузки.КодВидаОплаты,
	               |	ТаблицаДанныхЗагрузки.ВидОперации,
	               |	МАКСИМУМ(ТаблицаДанныхЗагрузки.Приоритет),
	               |	ТаблицаДанныхЗагрузки.Контрагент,
	               |	ТаблицаДанныхЗагрузки.КодКонтрагента,
	               |	ТаблицаДанныхЗагрузки.ИННКонтрагента,
	               |	ТаблицаДанныхЗагрузки.ТопливнаяКарта,
	               |	ТаблицаДанныхЗагрузки.КодТипаКассовогоДокумента,
	               |	СУММА(ТаблицаДанныхЗагрузки.Количество),
	               |	МАКСИМУМ(ТаблицаДанныхЗагрузки.Цена),
	               |	МАКСИМУМ(ТаблицаДанныхЗагрузки.ФактическаяЦена),
	               |	МАКСИМУМ(ТаблицаДанныхЗагрузки.Сумма),
	               |	МАКСИМУМ(ТаблицаДанныхЗагрузки.Комментарий)
	               |ИЗ
	               |	ТаблицаДанныхЗагрузки КАК ТаблицаДанныхЗагрузки
	               |ГДЕ
	               |	ТаблицаДанныхЗагрузки.ВариантОформленияТовародвижения = &СкладскиеОперации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаДанныхЗагрузки.Склад,
	               |	ТаблицаДанныхЗагрузки.КодСклада,
	               |	ТаблицаДанныхЗагрузки.Ответственный,
	               |	ТаблицаДанныхЗагрузки.ИмяФайла,
	               |	ТаблицаДанныхЗагрузки.КассаККМ,
	               |	ТаблицаДанныхЗагрузки.Касса,
	               |	ТаблицаДанныхЗагрузки.НачалоСмены,
	               |	ТаблицаДанныхЗагрузки.ИдентификаторОперации,
	               |	ТаблицаДанныхЗагрузки.ОкончаниеСмены,
	               |	ТаблицаДанныхЗагрузки.НомерСмены,
	               |	ТаблицаДанныхЗагрузки.НомерРезервуара,
	               |	ТаблицаДанныхЗагрузки.Организация,
	               |	ТаблицаДанныхЗагрузки.НомерРукава,
	               |	ТаблицаДанныхЗагрузки.КодНоменклатуры,
	               |	ТаблицаДанныхЗагрузки.Дата,
	               |	ТаблицаДанныхЗагрузки.ФормаОплаты,
	               |	ТаблицаДанныхЗагрузки.ВидОперации,
	               |	ТаблицаДанныхЗагрузки.КодТипаКассовогоДокумента,
	               |	ТаблицаДанныхЗагрузки.ТопливнаяКарта,
	               |	ТаблицаДанныхЗагрузки.ВариантОформленияТовародвижения,
	               |	ТаблицаДанныхЗагрузки.Контрагент,
	               |	ТаблицаДанныхЗагрузки.ИННКонтрагента,
	               |	ТаблицаДанныхЗагрузки.ВидОплаты,
	               |	ТаблицаДанныхЗагрузки.КодВидаОплаты,
	               |	ТаблицаДанныхЗагрузки.КодКонтрагента,
	               |	ТаблицаДанныхЗагрузки.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ.ИмяФайла КАК ИмяФайла,
	               |	ТЗ.Организация КАК Организация,
	               |	ТЗ.Склад КАК Склад,
	               |	ТЗ.КодСклада КАК КодСклада,
	               |	ТЗ.Ответственный КАК Ответственный,
	               |	ТЗ.КассаККМ КАК КассаККМ,
	               |	ТЗ.Касса КАК Касса,
	               |	ТЗ.НомерСмены КАК НомерСмены,
	               |	ТЗ.НачалоСмены КАК НачалоСмены,
	               |	ТЗ.ОкончаниеСмены КАК ОкончаниеСмены,
	               |	ТЗ.ИдентификаторОперации КАК ИдентификаторОперации,
	               |	ТЗ.НомерРезервуара КАК НомерРезервуара,
	               |	ТЗ.НомерРукава КАК НомерРукава,
	               |	ТЗ.Дата КАК Дата,
	               |	ТЗ.Номенклатура КАК Номенклатура,
	               |	ТЗ.КодНоменклатуры КАК КодНоменклатуры,
	               |	ТЗ.ФормаОплаты КАК ФормаОплаты,
	               |	ТЗ.ВариантОформленияТовародвижения КАК ВариантОформленияТовародвижения,
	               |	ТЗ.ВидОплаты КАК ВидОплаты,
	               |	ТЗ.КодВидаОплаты КАК КодВидаОплаты,
	               |	ТЗ.ВидОперации КАК ВидОперации,
	               |	ТЗ.Приоритет КАК Приоритет,
	               |	ТЗ.Контрагент КАК Контрагент,
	               |	ТЗ.КодКонтрагента КАК КодКонтрагента,
	               |	ТЗ.ИННКонтрагента КАК ИННКонтрагента,
	               |	ТЗ.ТопливнаяКарта КАК ТопливнаяКарта,
	               |	ТЗ.КодТипаКассовогоДокумента КАК КодТипаКассовогоДокумента,
	               |	ТЗ.Количество КАК Количество,
	               |	ТЗ.Цена КАК Цена,
	               |	ТЗ.ФактическаяЦена КАК ФактическаяЦена,
	               |	ТЗ.Сумма КАК Сумма,
	               |	ТЗ.Комментарий КАК Комментарий
	               |ИЗ
	               |	ТЗ КАК ТЗ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет
	               |ИТОГИ
	               |	СУММА(Количество)
	               |ПО
	               |	ИмяФайла,
	               |	Организация,
	               |	Склад,
	               |	Приоритет,
	               |	ВариантОформленияТовародвижения,
	               |	Контрагент,
	               |	ИдентификаторОперации";
	
	 Запрос.УстановитьПараметр("СкладскиеОперации", Перечисления.Топаз_ВариантыОформленияТовародвижения.СкладскаяОперация);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаФайл = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаФайл.Следующий() Цикл
		
		ЕстьОшибки = Ложь;
		
		ВыборкаОрганизация = ВыборкаФайл.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОрганизация.Следующий() Цикл
			
			ВыборкаСклад = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаСклад.Следующий() Цикл
				
				ВыборкаПриоритет = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПриоритет.Следующий() Цикл
					
					ВыборкаВариантОформленияТовародвижения = ВыборкаПриоритет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаВариантОформленияТовародвижения.Следующий() Цикл
						
						ВыборкаКонтрагент = ВыборкаВариантОформленияТовародвижения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаКонтрагент.Следующий() Цикл
							
							ВыборкаИдентификаторОперации = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							Пока ВыборкаИдентификаторОперации.Следующий() Цикл
								
								Если ВыборкаИдентификаторОперации.Количество <> 0 Тогда
									
								ВыборкаДетальныеЗаписи = ВыборкаИдентификаторОперации.Выбрать();
								ВидДокумента           = ВыборкаИдентификаторОперации.ВариантОформленияТовародвижения;
								Если ВыборкаДетальныеЗаписи.Количество() <> 0 Тогда
									ОбработатьДокумент (ВидДокумента,
														РежимЗаписи,
														ВыборкаИдентификаторОперации.ИдентификаторОперации,
														ВыборкаДетальныеЗаписи,
														ЕстьОшибки);
													КонецЕсли;
								КонецЕсли;

							КонецЦикла;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ЕстьОшибки Тогда
			МассивУспешноОбработанныхФайлов.Добавить (ВыборкаФайл.ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДокумент (ВидДокумента, РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки)
	   		
	Если ВидДокумента = Перечисления.Топаз_ВариантыОформленияТовародвижения.ОтчетОРозничныхПродажах Тогда
		
		СоздатьОтчетОРозничныхПродажах (РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.Топаз_ВариантыОформленияТовародвижения.РеализацияТоваровУслуг Тогда
		
		СоздатьРеализациюТоваровУслуг (РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.Топаз_ВариантыОформленияТовародвижения.СкладскаяОперация Тогда
		
		СоздатьДокументСкладскойОперации (РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.Топаз_ВариантыОформленияТовародвижения.ПриобретениеТоваровУслуг Тогда
		
		СоздатьПриобретениеТоваровУслуг (РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.Топаз_ВариантыОформленияТовародвижения.ПриходныйКассовыйОрдер Тогда
		
		СоздатьВыбытиеДС (РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДокумент (ИдентификаторОперации, ВидДокумента)
	
	Запрос       = Новый Запрос;
	Запрос.Текст =
				   "ВЫБРАТЬ
				   	|	ДокументДополнительныеРеквизиты.Ссылка КАК Ссылка
					   |ИЗ
					   |	Документ." + ВидДокумента + ".ДополнительныеРеквизиты КАК ДокументДополнительныеРеквизиты
					   |ГДЕ
					   |	ДокументДополнительныеРеквизиты.Свойство = &Свойство
					   |	И (ДокументДополнительныеРеквизиты.Значение = &Значение
					   |			ИЛИ ДокументДополнительныеРеквизиты.ТекстоваяСтрока ПОДОБНО &Значение)";
	
	Запрос.УстановитьПараметр("Значение", ИдентификаторОперации);
	Запрос.УстановитьПараметр("Свойство",
							  ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
							  	"Идентификатор операции"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ДокументОбъект      = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		Для каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
			
			ДокументОбъект[ТабличнаяЧасть.Имя].Очистить();
			
		КонецЦикла;
		
		Возврат ДокументОбъект;
	Иначе
		Возврат Документы[ВидДокумента].СоздатьДокумент();
		
	КонецЕсли;
	
КонецФункции // ПолучитьДокумент (ИдентификаторОперации, "РеализацияТоваровУслуг")()

#Область СозданиеДокументовПродажи

Процедура СоздатьОтчетОРозничныхПродажах(РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки)
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	ДокументОбъект = ПолучитьДокумент (ИдентификаторОперации, "ОтчетОРозничныхПродажах");
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаДетальныеЗаписи);
	
	ДокументОбъект.Заполнить(новый Структура("КассаККМ", ВыборкаДетальныеЗаписи.КассаККМ));
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ВыборкаДетальныеЗаписи);
		Строка.СтавкаНДС          = ВыборкаДетальныеЗаписи.Номенклатура.СтавкаНДС;
		Строка.КоличествоУпаковок = ВыборкаДетальныеЗаписи.Количество;
		Строка.Количество         = Строка.КоличествоУпаковок;
		Строка.Продавец           = ВыборкаДетальныеЗаписи.Ответственный;
		Строка.СуммаРучнойСкидки  = Строка.КоличествоУпаковок*Строка.Цена - Строка.Сумма;
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ (Строка,
																					 Новый Структура (
																					 	"ПересчитатьПроцентРучнойСкидки"),
																					 Неопределено);
		
		ТекПроцентНДС   = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Строка.СтавкаНДС);
		Строка.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма,
																		 ТекПроцентНДС,
																		 ДокументОбъект.ЦенаВключаетНДС);
		
		Если ВыборкаДетальныеЗаписи.ВидОплаты.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			
			СтрокаБезнал       = ДокументОбъект.ОплатаПлатежнымиКартами.Добавить();
			СтрокаБезнал.ЭквайринговыйТерминал = ПолучитьЭквайринговыйТерминалПоКассе (ВыборкаДетальныеЗаписи.Касса);
			СтрокаБезнал.НомерПлатежнойКарты   = "0000 0000 0000 0000 00";
			СтрокаБезнал.Сумма = ВыборкаДетальныеЗаписи.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьИдентификаторОперации(ДокументОбъект, ИдентификаторОперации);
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьЭквайринговыйТерминалПоКассе (Касса)
	
	Запрос       = Новый Запрос;
	Запрос.Текст =
				   "ВЫБРАТЬ
				   	|	КассыДополнительныеРеквизиты.Значение КАК Значение
					   |ИЗ
					   |	Справочник.Кассы.ДополнительныеРеквизиты КАК КассыДополнительныеРеквизиты
					   |ГДЕ
					   |	КассыДополнительныеРеквизиты.Свойство = &Свойство
					   |	И КассыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Свойство",
							  ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
							  	"Эквайринговый терминал"));
	Запрос.УстановитьПараметр("Ссылка", Касса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Значение;
	Иначе
		Возврат Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура СоздатьРеализациюТоваровУслуг(РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки)
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	ДокументОбъект = ПолучитьДокумент (ИдентификаторОперации, "РеализацияТоваровУслуг");
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаДетальныеЗаписи);
	
	ДокументОбъект.Заполнить(новый Структура());
	
	ДокументОбъект.Менеджер = ВыборкаДетальныеЗаписи.Ответственный;
	ДокументОбъект.Партнер  = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(ДокументОбъект.Контрагент);
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ВыборкаДетальныеЗаписи);
		Строка.СтавкаНДС          = ВыборкаДетальныеЗаписи.Номенклатура.СтавкаНДС;
		Строка.КоличествоУпаковок = ВыборкаДетальныеЗаписи.Количество;
		Строка.Количество         = Строка.КоличествоУпаковок;
		Строка.СуммаСНДС          = ВыборкаДетальныеЗаписи.Сумма;
		Строка.Сумма = Строка.СуммаСНДС;
		Строка.Склад = ВыборкаДетальныеЗаписи.Склад;
		Строка.СуммаРучнойСкидки  = Строка.КоличествоУпаковок*Строка.Цена - Строка.Сумма;
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ (Строка,
																					 Новый Структура (
																					 	"ПересчитатьПроцентРучнойСкидки"),
																					 Неопределено);
		
		ТекПроцентНДС   = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Строка.СтавкаНДС);
		Строка.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Строка.СуммаСНДС,
																		 ТекПроцентНДС,
																		 ДокументОбъект.ЦенаВключаетНДС);
		
	КонецЦикла;
	
	ДобавитьИдентификаторОперации(ДокументОбъект, ИдентификаторОперации);
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументовПоступления

Процедура СоздатьПриобретениеТоваровУслуг(РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки)
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	ДокументОбъект = ПолучитьДокумент (ИдентификаторОперации, "ПриобретениеТоваровУслуг");
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаДетальныеЗаписи);
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	
	ДокументОбъект.Партнер            = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(ДокументОбъект.Контрагент);
	ДокументОбъект.ЦенаВключаетНДС    = Истина;
	ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
	ДокументОбъект.ЗаполнитьУсловияЗакупокПоУмолчанию();
	
	ДокументОбъект.Менеджер             = ВыборкаДетальныеЗаписи.Ответственный;
	ДокументОбъект.Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(ДокументОбъект.Валюта);
	ДокументОбъект.ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(ДокументОбъект.ВалютаВзаиморасчетов);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация          = ДокументОбъект.Организация;
	СтруктураПараметров.БанковскийСчет       = ДокументОбъект.БанковскийСчетОрганизации;
	ДокументОбъект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ДокументОбъект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
		ДокументОбъект.Контрагент,
		,
		ДокументОбъект.БанковскийСчетКонтрагента);
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ДокументОбъект);
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаПлатежа) Тогда
		ДокументОбъект.ДатаПлатежа = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТекущаяДеятельность = Справочники.Организации.ЗакупкаПодДеятельность(ДокументОбъект.Организация,
																		 ДокументОбъект.Склад,
																		 ДокументОбъект.Дата);
	Если Не ЗначениеЗаполнено(ДокументОбъект.ЗакупкаПодДеятельность)
		ИЛИ ДокументОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию
		ИЛИ ТекущаяДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию Тогда
		ДокументОбъект.ЗакупкаПодДеятельность = ТекущаяДеятельность;
	КонецЕсли;
	
	СтруктураОтветственного = ЗакупкиСервер.ПолучитьОтветственногоПоСкладу(ДокументОбъект.Склад, ДокументОбъект.Менеджер);
	Если СтруктураОтветственного <> Неопределено Тогда
		ДокументОбъект.Принял          = СтруктураОтветственного.Ответственный;
		ДокументОбъект.ПринялДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТовары = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаДетальныеЗаписи);
		
		СтрокаТовары.СтавкаНДС          = СтрокаТовары.Номенклатура.СтавкаНДС;
		СтавкаНДСЧислом    = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТовары.СтавкаНДС);
		СтрокаТовары.КоличествоУпаковок = ВыборкаДетальныеЗаписи.Количество;
		СтрокаТовары.Количество         = СтрокаТовары.КоличествоУпаковок;
		СтрокаТовары.СуммаСНДС          = ВыборкаДетальныеЗаписи.Сумма;
		СтрокаТовары.Сумма = СтрокаТовары.СуммаСНДС;
		
		СтрокаТовары.Цена = СтрокаТовары.Сумма/СтрокаТовары.КоличествоУпаковок;
		
		СтрокаТовары.СуммаНДС  = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТовары.Сумма, СтавкаНДСЧислом, Истина);
		СтрокаТовары.СуммаСНДС = СтрокаТовары.Сумма;
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Ложь);
		
	КонецЦикла;
	
	ДобавитьИдентификаторОперации(ДокументОбъект, ИдентификаторОперации);
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеСкладскихДокументов

Процедура СоздатьДокументСкладскойОперации(РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки)
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	ИмяОперации = ? (ВыборкаДетальныеЗаписи.Количество > 0, "Списание", "Оприходование");
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Если ИмяОперации = "Списание" Тогда
		
		СоздатьСписаниеНедостачТоваров(РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки);
	Иначе
		
		СоздатьОприходованиеИзлишковТоваров(РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСписаниеНедостачТоваров(РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки)
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	ДокументОбъект = ПолучитьДокумент (ИдентификаторОперации, "СписаниеНедостачТоваров");
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаДетальныеЗаписи);
	ДокументОбъект.СтатьяРасходов = ВыборкаДетальныеЗаписи.ВидОплаты.СтатьяРасходов;
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТовары = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
	ДобавитьИдентификаторОперации(ДокументОбъект, ИдентификаторОперации);
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОприходованиеИзлишковТоваров(РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки)
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	ДокументОбъект = ПолучитьДокумент (ИдентификаторОперации, "ОприходованиеИзлишковТоваров");
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаДетальныеЗаписи);
	ДокументОбъект.СтатьяДоходов = ВыборкаДетальныеЗаписи.ВидОплаты.СтатьяДоходов;
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТовары = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаДетальныеЗаписи);
		СтрокаТовары.Количество = Макс(ВыборкаДетальныеЗаписи.Количество, -ВыборкаДетальныеЗаписи.Количество);
		СтрокаТовары.Сумма      = СтрокаТовары.Количество*СтрокаТовары.Цена;
	КонецЦикла;
	
	ДобавитьИдентификаторОперации(ДокументОбъект, ИдентификаторОперации);
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеКассовыхДокументов

Процедура СоздатьВыбытиеДС (РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ЕстьОшибки)
	
	ВыборкаДетальныеЗаписи.Следующий();
	ДокументОбъект = ПолучитьДокумент (ИдентификаторОперации, "ВыемкаДенежныхСредствИзКассыККМ");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаДетальныеЗаписи);
	ДокументОбъект.Валюта         = ВыборкаДетальныеЗаписи.КассаККМ.ВалютаДенежныхСредств;
	ДокументОбъект.СуммаДокумента = Макс (ВыборкаДетальныеЗаписи.Сумма, -ВыборкаДетальныеЗаписи.Сумма);
	ДокументОбъект.Кассир         = ВыборкаДетальныеЗаписи.Ответственный;
	ДокументОбъект.Дата           = ВыборкаДетальныеЗаписи.Дата + 1;
	
	ДобавитьИдентификаторОперации(ДокументОбъект, ИдентификаторОперации);
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписи);
		СоздатьПриходДСВКассуАЗС(РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ДокументОбъект.Ссылка);
		СоздатьПередачуДСВОсновнуюКассу (РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи);
	Исключение
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

Функция СоздатьПередачуДСВОсновнуюКассу (РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи)
	
	ДокументОбъект = ПолучитьДокумент (ИдентификаторОперации, "РасходныйКассовыйОрдер");
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаДетальныеЗаписи);
	ДокументОбъект.СуммаДокумента        = Макс (ВыборкаДетальныеЗаписи.Сумма, -ВыборкаДетальныеЗаписи.Сумма);
	ДокументОбъект.Кассир = ВыборкаДетальныеЗаписи.Ответственный;
	ДокументОбъект.Валюта = ВыборкаДетальныеЗаписи.КассаККМ.ВалютаДенежныхСредств;
	ДокументОбъект.КассаПолучатель       = Константы.Топаз_ОсновнаяКасса.Получить();
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу;
	ДокументОбъект.Дата   = ВыборкаДетальныеЗаписи.Дата + 3;
	ДобавитьИдентификаторОперации(ДокументОбъект, ИдентификаторОперации);
	
	ДокументОбъект.Записать(РежимЗаписи);
	
КонецФункции

Функция СоздатьПриходДСВКассуАЗС(РежимЗаписи, ИдентификаторОперации, ВыборкаДетальныеЗаписи, ДокументВыемка)
	
	ДокументОбъект = ПолучитьДокумент (ИдентификаторОперации, "ПриходныйКассовыйОрдер");
	
	ДокументОбъект.Заполнить(ДокументВыемка);
	ДокументОбъект.Дата   = ВыборкаДетальныеЗаписи.Дата + 2;
	ДокументОбъект.Касса  = ВыборкаДетальныеЗаписи.Касса;
	ДокументОбъект.Кассир = ДокументВыемка.Кассир;
	
	ДобавитьИдентификаторОперации(ДокументОбъект, ИдентификаторОперации);
	
	ДокументОбъект.Записать(РежимЗаписи);
	
КонецФункции

#КонецОбласти

#КонецОбласти
