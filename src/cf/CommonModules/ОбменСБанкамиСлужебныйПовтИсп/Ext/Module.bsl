////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиСлужебныйПовтИсп: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет массив актуальными видами электронных документов.
//
// Возвращаемое значение:
//  Массив - виды актуальных ЭД.
//
Функция АктуальныеВидыЭД() Экспорт
	
	МассивЭД = Новый Массив;
	ОбменСБанкамиПереопределяемый.ПолучитьАктуальныеВидыЭД(МассивЭД);
	
	МассивЭД.Добавить(Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд);
	МассивЭД.Добавить(Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД);
	МассивЭД.Добавить(Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД);
	МассивЭД.Добавить(Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);

	МассивВозврата = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЭД);
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает текст программы с указанием версии, используемой для обмена с банком.
//
// Параметры:
//  КоличествоСимволов - Число - ограничение на количество символов по версии программы, по умолчанию 100.
//
// Возвращаемое значение:
//  Строка - текст программы с указанием версии.
//
Функция ВерсияПрограммыКлиентаДляБанка(КоличествоСимволов = 100) Экспорт
	
	ВерсияПрограммы = СтрШаблон(НСтр("ru = '1С - БЭД: %1; %2: %3'"),
		ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки(),
		Метаданные.Имя,
		Метаданные.Версия);

	Если КоличествоСимволов > 0 Тогда
		ВерсияПрограммы = Лев(ВерсияПрограммы, КоличествоСимволов);
	КонецЕсли;
	
	Возврат СокрЛП(ВерсияПрограммы);
	
КонецФункции

// Возвращает пустую ссылку на справочник.
//
// Параметры:
//  ИмяСправочника - Строка - название справочника.
//
// Возвращаемое значение:
//  Ссылка - пустая ссылка на справочник.
//
Функция ПустаяСсылкаСправочника(ИмяСправочника) Экспорт
	
	Результат = Неопределено;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(ИмяСправочника);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		Результат = Справочники[ИмяПрикладногоСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает данные внешней обработки.
// 
// Параметры:
//    ИмяМодуля - Строка - название модуля, данные которого нужно вернуть;
//
// Возвращаемое значение:
//    Структура - данные внешней обработки:
//      * Версия - строка - версия обработки;
//      * Наименование - Строка - представление внешней обработки;
//      * ДвоичныеДанныеМодуля - ДвоичныеДанные - двоичные данные внешней обработки.
//
Функция ДанныеВнешнейОбработки(ИмяМодуля) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВнешнихМодулей = Константы.ВнешниеФайлыОбменСБанками.Получить().Получить();
	Если ДанныеВнешнихМодулей = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ДанныеВнешнихМодулей.Свойство("ВнешниеОбработки") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеМодуля = ДанныеВнешнихМодулей.ВнешниеОбработки.Получить(ИмяМодуля);
	
	Возврат ДанныеМодуля;
	
КонецФункции

// Возвращает данные по банкам, поддерживающих прямой обмен.
//
// Возвращаемое значение:
//   ТабличныйДокумент - содержит данные по банкам.
//
Функция СписокБанков() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользуетсяТестовыйРежим = Ложь;
	ОбменСБанкамиПереопределяемый.ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим);
	
	Если ИспользуетсяТестовыйРежим Тогда
		Макет = Справочники.НастройкиОбменСБанками.ПолучитьМакет("СписокБанковВТестовомРежиме");
	Иначе
		ДанныеВнешнихФайлов = Константы.ОбщиеФайлыОбменСБанками.Получить().Получить();
		Если ДанныеВнешнихФайлов = Неопределено ИЛИ НЕ ДанныеВнешнихФайлов.Свойство("СписокБанков")
				ИЛИ ДанныеВнешнихФайлов.СписокБанков = Неопределено Тогда  // список еще не подкачивался из интернета
			Макет = Справочники.НастройкиОбменСБанками.ПолучитьМакет("СписокБанков");
		Иначе
			Попытка
				ВремФайл = ПолучитьИмяВременногоФайла("mxl");
				ДанныеВнешнихФайлов.СписокБанков.Записать(ВремФайл);
				Макет = Новый ТабличныйДокумент;
				Макет.Прочитать(ВремФайл);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
			Исключение
				// Если не удалось прочитать файл, то берем список из конфигурации
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВидОперации = НСтр("ru = 'Чтение списка банков сервиса 1С:ДиректБанк из скачанного файла.'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, , "ОбменСБанками");
				Макет = Справочники.НастройкиОбменСБанками.ПолучитьМакет("СписокБанков");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Возврат Макет;
	
КонецФункции

// Получение фабрики XDTO в соответствии с версией схемы асинхронного обмена.
//
// Параметры:
//  ВерсияФормата - Строка - версия схемы.
// 
// Возвращаемое значение:
//  ФабрикаXDTO - фабрика, созданная на основании схемы.
//
Функция ФабрикаAsyncXDTO(ВерсияФормата) Экспорт
	
	ВерсииСхемАсинхронногоОбмена = ВерсииСхемАсинхронногоОбмена();
	ТекущаяСхема = ВерсииСхемАсинхронногоОбмена.Получить(ВерсияФормата);
	
	Если ЗначениеЗаполнено(ТекущаяСхема) Тогда
		ДвоичныеДанныеСхемы = Обработки.ОбменСБанками.ПолучитьМакет(ТекущаяСхема);
		ВремФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
		ДвоичныеДанныеСхемы.Записать(ВремФайлСхемы);
		Фабрика = СоздатьФабрикуXDTO(ВремФайлСхемы);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайлСхемы);
		Возврат Фабрика;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВерсииСхемАсинхронногоОбмена()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить("2.01", "Схема201");
	СоответствиеВозврата.Вставить("2.02", "Схема202");
	СоответствиеВозврата.Вставить("2.03", "Схема203");
	СоответствиеВозврата.Вставить("2.1.1", "Схема211");
	Возврат СоответствиеВозврата;
	
КонецФункции

#КонецОбласти