
#Область ПрограммныйИнтерфейс

#Область РегламентныеЗадания

// Метод регламентного задания "ЗакрытиеМесяца".
//
Процедура ВыполнитьЗакрытиеМесяца(Организация = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗакрытиеМесяца);
	
	Обработки.ОперацииЗакрытияМесяца.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ();
	
	ОписаниеЗадания = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ПолучитьРегламентноеЗаданиеПоОрганизации(Организация);
	
	Если НЕ ОписаниеЗадания.НастройкаСуществует Тогда
		ВызватьИсключение НСтр("ru='Не задана настройка регламентного задания закрытия месяца.'");
	КонецЕсли;
	
	// Закрываемый период.
	Если ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодМУ) Тогда 
		ПервыйПериод = ОписаниеЗадания.ЗакрываемыйПериодМУ;
	ИначеЕсли ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодРУ) Тогда 
		ПервыйПериод = ОписаниеЗадания.ЗакрываемыйПериодРУ;
	ИначеЕсли ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодОУ) Тогда 
		ПервыйПериод = ОписаниеЗадания.ЗакрываемыйПериодОУ;
	Иначе
		ВызватьИсключение НСтр("ru='Некорректная настройка регламентного задания закрытия месяца.'");
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодМУ) И ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодРУ)
	 		И ОписаниеЗадания.ЗакрываемыйПериодМУ > ОписаниеЗадания.ЗакрываемыйПериодРУ)
	 ИЛИ (ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодРУ)
	 		И ОписаниеЗадания.ЗакрываемыйПериодРУ > ОписаниеЗадания.ЗакрываемыйПериодОУ) Тогда
		ВызватьИсключение НСтр("ru='Некорректная настройка регламентного задания закрытия месяца.'");
	КонецЕсли;
	
	ОписаниеЗадания.Вставить("ПервыйПериод", 	ПервыйПериод);
	ОписаниеЗадания.Вставить("ПоследнийПериод", ОписаниеЗадания.ЗакрываемыйПериодОУ);
	
	// Запустим расчет в фоновом задании.
	Если ЕстьАктивноеФоновоеЗадание() Тогда
		ВызватьИсключение НСтр("ru='Обнаружено активное задание закрытия месяца.'");
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ОписаниеЗадания);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить("ЗакрытиеМесяцаСервер.ВыполнитьЗакрытиеМесяцаВФоновомЗадании");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить(
		"ОбщегоНазначения.ВыполнитьМетодКонфигурации",
		ПараметрыЗадания,
		ИмяФоновогоЗадания(),
		НСтр("ru='Регламентное задание закрытия месяца'"));
	
КонецПроцедуры

// Метод регламентного задания "ПереоценкаВалютныхСредств"
//
Процедура ВыполнитьПереоценку() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПереоценкаВалютныхСредств);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ПереоценкаВалютныхСредств.ВыполнитьПереоценку(ТекущаяДатаСеанса());
	
КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаСобытия

// Вызывается из подписки на события ПередЗаписьюКурсовВалют
// Параметры:
//	ДополнительныеСвойства - Структура - Доп.свойства, необходимые для проведения документа.
//	Движения - КоллекцияДвижений - Коллекция движения текущего регистратора.
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура СчитатьКурсыВалютПередЗаписью(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	// Проверка на ОбменДанными.Загрузка исключена специально, поскольку данный механизм отрабатывает
	// при получении данных в РИБ.
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Курсы.Период    КАК Период,
	|	Курсы.Валюта    КАК Валюта,
	|	Курсы.Курс      КАК Курс,
	|	Курсы.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалютПередЗаписью
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК Курсы
	|ГДЕ
	|	Курсы.Период = &Период
	|");
	
	ДопСвойства = ДополнительныеСвойства.ДополнительныеСвойства;
	ДопСвойства.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	Запрос.МенеджерВременныхТаблиц = ДопСвойства.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", ДополнительныеСвойства.Отбор.Период.Значение);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Вызывается из подписки на события ПроверитьНеобходимостьПереоценки
// Если изменены курсы валют, то необходимо переоценить денежные и валютные средства,
// и пересчитать взаиморасчеты.
// Параметры:
//	ДополнительныеСвойства - Структура - Доп.свойства, необходимые для проведения документа.
//	Движения - КоллекцияДвижений - Коллекция движения текущего регистратора.
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ПроверитьНеобходимостьПереоценки(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	// Проверка на ОбменДанными.Загрузка исключена специально, поскольку данный механизм отрабатывает
	// при получении данных в РИБ.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.Период КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПереоценкаДенежныхСредствКредитовДепозитовЗаймов) КАК Операция,
	|	Таблица.Валюта КАК Валюта
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Курсы.Период, МЕСЯЦ) КАК Период,
	|		Курсы.Валюта    КАК Валюта,
	|		Курсы.Курс      КАК Курс,
	|		Курсы.Кратность КАК Кратность
	|	ИЗ
	|		РегистрСведений.КурсыВалют КАК Курсы
	|	ГДЕ
	|		Курсы.Период = &Период
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Курсы.Период, МЕСЯЦ) КАК Период,
	|		Курсы.Валюта     КАК Валюта,
	|		-Курсы.Курс      КАК Курс,
	|		-Курсы.Кратность КАК Кратность
	|	ИЗ
	|		КурсыВалютПередЗаписью КАК Курсы
	|	) КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Период,
	|	Таблица.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.Курс) <> 0
	|	ИЛИ СУММА(Таблица.Кратность) <> 0
	|");
	
	ДопСвойства = ДополнительныеСвойства.ДополнительныеСвойства;
	Запрос.МенеджерВременныхТаблиц = ДопСвойства.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", ДополнительныеСвойства.Отбор.Период.Значение);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат; // курсы не изменились.
	КонецЕсли;
	
	МассивОрганизаций = Справочники.Организации.ДоступныеОрганизации(Истина);
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Установка заданий в РС "Задания к закрытию месяца".
		Для Каждого Организация Из МассивОрганизаций Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НаборЗаписей, Выборка);
			НаборЗаписей.Организация = Организация;
			НаборЗаписей.НомерЗадания = ТекущийНомерЗадания();
			НаборЗаписей.Записать();
		КонецЦикла;
		
		// Установка заданий в РС "Задания к распределению расчетов с клиентами"
		// и "Задания к распределению расчетов с поставщиками".
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""ЗаданияКРаспределениюРасчетовСКлиентами""      КАК ИмяРегистраЗаданий,
		|	""НомерЗаданияКРаспределениюРасчетовСКлиентами"" КАК ИмяКонстанты,
		|	Клиенты.АналитикаУчетаПоПартнерам                КАК АналитикаУчетаПоПартнерам,
		|	Клиенты.АналитикаУчетаПоПартнерам.Организация    КАК Организация,
		|	Клиенты.ЗаказКлиента                             КАК ОбъектРасчетов,
		|	&НачалоМесяца                                    КАК Месяц
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Клиенты
		|ГДЕ
		|	Клиенты.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И Клиенты.Валюта = &Валюта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""ЗаданияКРаспределениюРасчетовСПоставщиками""      КАК ИмяРегистраЗаданий,
		|	""НомерЗаданияКРаспределениюРасчетовСПоставщиками"" КАК ИмяКонстанты,
		|	Поставщики.АналитикаУчетаПоПартнерам                КАК АналитикаУчетаПоПартнерам,
		|	Поставщики.АналитикаУчетаПоПартнерам.Организация    КАК Организация,
		|	Поставщики.ЗаказПоставщику                          КАК ОбъектРасчетов,
		|	&НачалоМесяца                                       КАК Месяц
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Поставщики
		|ГДЕ
		|	Поставщики.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И Поставщики.Валюта = &Валюта
		|";
		
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Выборка.Месяц));
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Выборка.Месяц));
		
		ВыборкаРасчетов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРасчетов.Следующий() Цикл
			Задания = РегистрыСведений[ВыборкаРасчетов.ИмяРегистраЗаданий].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Задания, ВыборкаРасчетов);
			Задания.НомерЗадания = Константы[ВыборкаРасчетов.ИмяКонстанты].Получить();
			Задания.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Производится очистка измерения "Документ" по регистрам "Задания...",
// где в текущих записях используется удаляемый документ.
// Вызывается из подписки на события "ОчиститьЗаданияПередУдалениемДокумента",
// выполняется только в главном узле РИБ.
// Параметры:
//  Источник - ДокументСсылка - Ссылка на удаляемый документ.
//	Отказ - Булево - Признак необходимости прерывания удаления объекта.
//
Процедура ОчиститьЗаданияПередУдалениемДокумента(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.ИмяРегистра               КАК ИмяРегистра,
	|	Задания.Месяц                     КАК Месяц,
	|	Задания.НомерЗадания              КАК НомерЗадания,
	|	Задания.Документ                  КАК Документ,
	|	Задания.Операция                  КАК Операция,
	|	Задания.Организация               КАК Организация,
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	Задания.НомерПакета               КАК НомерПакета,
	|	Задания.ОбъектУчета               КАК ОбъектУчета,
	|	Задания.ОсновноеСредство          КАК ОсновноеСредство,
	|	Задания.Пропускать                КАК ПропускатьПриЗаписи
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРасчетуСебестоимости"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц        КАК Месяц,
	|		Задания.НомерЗадания КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО         КАК Документ,
	|		НЕОПРЕДЕЛЕНО         КАК Операция,
	|		Задания.Организация  КАК Организация,
	|		НЕОПРЕДЕЛЕНО         КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО         КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО         КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК            Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКЗакрытиюМесяца"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц        КАК Месяц,
	|		Задания.НомерЗадания КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО         КАК Документ,
	|		Задания.Операция     КАК Операция,
	|		Задания.Организация  КАК Организация,
	|		НЕОПРЕДЕЛЕНО         КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО         КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО         КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК            Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.Операция = Дубли.Операция
	|			И Задания.Организация = Дубли.Организация
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРаспределениюРасчетовСКлиентами"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		НЕОПРЕДЕЛЕНО                      КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО                      КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА Задания.ОбъектРасчетов = &Ссылка ИЛИ НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|			И Задания.ОбъектРасчетов = Дубли.ОбъектРасчетов
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРаспределениюРасчетовСПоставщиками"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		НЕОПРЕДЕЛЕНО                      КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО                      КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА Задания.ОбъектРасчетов = &Ссылка ИЛИ НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|			И Задания.ОбъектРасчетов = Дубли.ОбъектРасчетов
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|	) КАК Задания
	|ИТОГИ ПО
	|	Задания.ИмяРегистра
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	ВыборкаЗаданий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаданий.Следующий() Цикл
		ЗаданияКОчистке = РегистрыСведений[ВыборкаЗаданий.ИмяРегистра].СоздатьНаборЗаписей();
		ЗаданияКОчистке.Отбор.Документ.Установить(Источник.Ссылка);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ЗаданияКОчистке, Истина);
		
		ЗаданияКЗаписи = РегистрыСведений[ВыборкаЗаданий.ИмяРегистра].СоздатьНаборЗаписей();
		ВыборкаЗаписей = ВыборкаЗаданий.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл 
			Если Не ВыборкаЗаписей.ПропускатьПриЗаписи Тогда
				КЗаписи = ЗаданияКЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(КЗаписи, ВыборкаЗаписей);
			КонецЕсли;
		КонецЦикла;
		Попытка
			Если ЗаданияКЗаписи.Количество() <> 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ЗаданияКЗаписи, Ложь);
			КонецЕсли;
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление помеченных объектов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

// Функция формирует текст запроса для определения состояния отражения документов в регл.учете.
//
// Параметры:
// УчитыватьНДС - Булево - признак проверки необходимости отразить движения по НДС
//
// Возвращаемое значение:
//	Строка - Содержит текст запроса для определения состояния отражения документов.
//
Функция ТекстЗапросаСостояниеОтраженияДокументов(УчитыватьНДС = Истина) Экспорт
	
	ТекстЗапроса =
	"
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеРегистра.Период) КАК ДатаОкончания,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК ДанныеРегистра
	|ГДЕ
	|	&УчитыватьНДС
	|	И ДанныеРегистра.РегламентнаяОперация
	|	И ДанныеРегистра.Период <= &ДатаОкончания
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.Месяц) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.СчетФактура) КАК Количество
	|ИЗ
	|	РегистрСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж КАК ДанныеРегистра
	|ГДЕ
	|	&УчитыватьНДС
	|	И ДанныеРегистра.Месяц <= &ДатаОкончания
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.СчетФактура) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаОкончания,
	|	1 КАК Количество
	|ГДЕ
	|	ЛОЖЬ
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачала,
	|	1 КАК Количество
	|ГДЕ
	|	ЛОЖЬ
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачала,
	|	1 КАК Количество
	|ГДЕ
	|	ЛОЖЬ
	|
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИспользоватьРеглУчет", ?(ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"), "ИСТИНА", "ЛОЖЬ"));
	Возврат СтрЗаменить(ТекстЗапроса, "&УчитыватьНДС", ?(УчитыватьНДС, "ИСТИНА", "ЛОЖЬ"));
	
КонецФункции

// Функция формирует тексты запросов для получения таблицы изменений набора записей регистра накопления при его записи.
// Запросы составляются на основании метаданных регистра: измерений, ресурсов и реквизитов.
//
// Параметры:
//	МетаданныеРегистра - ОбъектМетаданных: РегистрНакопления - метаданные регистра, для которого составляется таблица изменений;
//
// Возвращаемое значение:
//	Структура
//		- ТекстВыборкиНачальныхДанных - Строка - запрос для выполнения в событии "ПередЗаписью" набора данных регистра накопления.
//			Формирует текущие записи регистра и сохраняет их во временную таблицу "НачальныеЗаписи";
//		- ТекстВыборкиТаблицыИзменений - Строка - запрос для получения итоговой таблицы изменений. Выполняется в событии "ПриЗаписи".
//			Составляется объединением таблицы НачальныеЗаписи и новой таблицы записей регистра. Выводятся только записи, по которым есть разницы (Сумма ресурсов не равна 0).
//
Функция ТекстыЗапросовДляПолученияТаблицыИзмененийРегистраНакопления(МетаданныеРегистра) Экспорт
	
	ТекстЗапросаВыборкиНачальныхЗаписей =
	"ВЫБРАТЬ
	|	Записи.Период КАК Период,
	|	Записи.Регистратор КАК Регистратор,
	|	&ВыборкаПолей
	|ПОМЕСТИТЬ #НачальныеЗаписи
	|ИЗ
	|	#ТаблицаРегистра КАК Записи
	|ГДЕ
	|	Записи.Регистратор = &Регистратор";
	
	ТекстЗапросаВыборкиИзменений =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Период,
	|	Таблица.Регистратор,
	|	&ВыборкаПолейТаблицыИзменений
	|ПОМЕСТИТЬ #ТаблицаИзменений
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачальныеЗаписи.Период КАК Период,
	|		НачальныеЗаписи.Регистратор КАК Регистратор,
	|		&ВыборкаПолейНачальныхЗаписей
	|	ИЗ
	|		#НачальныеЗаписи КАК НачальныеЗаписи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Записи.Период КАК Период,
	|		Записи.Регистратор КАК Регистратор,
	|		&ВыборкаПолейНовыхЗаписей
	|	ИЗ
	|		#ТаблицаРегистра КАК Записи
	|	ГДЕ
	|		Записи.Регистратор = &Регистратор) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Период,
	|	Таблица.Регистратор";
	
	ВыборкаПолей = Новый Массив;
	ВыборкаПолейТаблицыИзменений = Новый Массив;
	ВыборкаПолейНачальныхЗаписей = Новый Массив;
	ВыборкаПолейНовыхЗаписей = Новый Массив;
	ВыборкаПолейГруппировки = Новый Массив;
	ВыборкаПолейФильтра = Новый Массив;
	
	Для каждого ИзмерениеРегистра из МетаданныеРегистра.Измерения Цикл
		
		ТекстПоля = "." + ИзмерениеРегистра.Имя + " КАК " + ИзмерениеРегистра.Имя;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("Таблица" + ТекстПоля); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи" + ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейГруппировки.Добавить("Таблица." + ИзмерениеРегистра.Имя);
		
	КонецЦикла;
	
	Для каждого РесурсРегистра из МетаданныеРегистра.Ресурсы Цикл
		
		ТекстПоля = "." + РесурсРегистра.Имя + " КАК " + РесурсРегистра.Имя;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("СУММА(Таблица." + РесурсРегистра.Имя + ") КАК " + РесурсРегистра.Имя); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи"+ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("-Записи"+ТекстПоля);
		ВыборкаПолейФильтра.Добавить("СУММА(Таблица." + РесурсРегистра.Имя + ") <> 0");
		
	КонецЦикла;
	
	Для каждого РеквизитРегистра из МетаданныеРегистра.Реквизиты Цикл
		
		ТекстПоля = "." + РеквизитРегистра.Имя + " КАК " + РеквизитРегистра.Имя;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("Таблица" + ТекстПоля); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи" + ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейГруппировки.Добавить("Таблица." + РеквизитРегистра.Имя);
		
	КонецЦикла;
	
	ТекстВыборкиПолей = СтрСоединить(ВыборкаПолей, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейТаблицыИзменений = СтрСоединить(ВыборкаПолейТаблицыИзменений, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейНачальныхЗаписей = СтрСоединить(ВыборкаПолейНачальныхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейНовыхЗаписей = СтрСоединить(ВыборкаПолейНовыхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейГруппировки = СтрСоединить(ВыборкаПолейГруппировки, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейФильтра = СтрСоединить(ВыборкаПолейФильтра, Символы.ПС + Символы.Таб + "ИЛИ ");
	
	
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "&ВыборкаПолей", ТекстВыборкиПолей);
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#ТаблицаРегистра", МетаданныеРегистра.ПолноеИмя());
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНачальныхЗаписей", ТекстВыборкиПолейНачальныхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНовыхЗаписей", ТекстВыборкиПолейНовыхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейТаблицыИзменений", ТекстВыборкиПолейТаблицыИзменений);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаРегистра", МетаданныеРегистра.ПолноеИмя());
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаИзменений", "ТаблицаИзменений"+МетаданныеРегистра.Имя);
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + "," + Символы.ПС + Символы.Таб + ТекстВыборкиПолейГруппировки;
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + "ИМЕЮЩИЕ" + Символы.ПС + Символы.Таб + ТекстВыборкиПолейФильтра;
	
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #НачальныеЗаписи";
	
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);
	
	Возврат Новый Структура("ТекстВыборкиНачальныхДанных, ТекстВыборкиТаблицыИзменений", ТекстЗапросаВыборкиНачальныхЗаписей, ТекстЗапросаВыборкиИзменений);
	
КонецФункции

#КонецОбласти

#Область БлокировкаПриОбновленииИБ

// Проверяет возможность выполнения операции в зависимости от текущего состояния обновления ИБ.
// Если все входящие данные операции еще не обработаны, то операцию выполнять нельзя.
// В этом случае в журнал регистрации будет записана информация о необработанных данных и вызвано исключение.
//
// Параметры:
//	ВходящиеДанные - Соответствие
//		Ключ - Строка, ОбъектМетаданныхКонфигурации - входящие данные, используемые  операцией
//		Значение - см. ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки, параметр Отбор
//	ПредставлениеОперации - Строка - пользовательское представление выполняемой операции
//
Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат; // обновление ИБ завершено полностью
	КонецЕсли;
	
	ТекстОшибкиДляИсключение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
			|Подробнее см. в Журнале регистрации.'"),
		ПредставлениеОперации);
	ТекстОшибкиДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
		    |Корректное выполнение операции будет возможно после того,
			|когда будут успешно завершены все обработчики обновление исходных данных для этой операции.'"),
		ПредставлениеОперации);
	
	ДанныеСОтборомПоСсылкам = Новый Массив;
	ОтборПоСсылкам 			= Новый Массив;
	
	ДанныеЗаблокированы = Ложь;
	
	УстановитьПривилегированныйРежим(Истина); // у текущего пользователя может не быть прав на все входящие данные, но проверить надо все
	
	Для Каждого ОписаниеДанных Из ВходящиеДанные Цикл
		
		ОбъектМетаданных = ОписаниеДанных.Ключ;
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
		КонецЕсли;
		
		Отбор = ?(ТипЗнч(ОписаниеДанных.Значение) = Тип("Булево"), Неопределено, ОписаниеДанных.Значение);
		
		Если (Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		 И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый)
		 ИЛИ ТипЗнч(Отбор) = Тип("Структура") Тогда
			// Проверку независимых регистров сведений выполняем по одному,
			// т.к. для них нет единообразных отборов (по регистратору).
			// Аналогично и для других типов метаданных, если для них задан "сложный" отбор в виде структуры.
			Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ОбъектМетаданных, Отбор) Тогда
				
				ДанныеЗаблокированы = Истина;
				
				ЗаписьЖурналаРегистрации(
					ПредставлениеОперации,
					УровеньЖурналаРегистрации.Ошибка,
					ОбъектМетаданных,
					Отбор,
					ТекстОшибкиДляЖурнала);
				
			КонецЕсли;
		Иначе
			ДанныеСОтборомПоСсылкам.Добавить(ОбъектМетаданных.ПолноеИмя());
			Если ТипЗнч(Отбор) = Тип("Массив") Тогда
				// Добавим отбор-массив этого объекта метаданных в общий массив отборов
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборПоСсылкам, Отбор, Истина);
			ИначеЕсли Отбор <> Неопределено Тогда
				// Добавим отбор-ссылку этого объекта метаданных в общий массив отборов
				Если ОтборПоСсылкам.Найти(Отбор) = Неопределено Тогда
					ОтборПоСсылкам.Добавить(Отбор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеСОтборомПоСсылкам.Количество() > 0 Тогда
		
		Если ОтборПоСсылкам.Количество() = 0 Тогда
			ОтборПоСсылкам = Неопределено; // без отбора
		КонецЕсли;
		
		//Проверку всех объектов, для которых возможен отбор по ссылке/регистратору, выполним за один вызов.
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ДанныеСОтборомПоСсылкам, ОтборПоСсылкам) Тогда
			
			ДанныеЗаблокированы = Истина;
			
			ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
				|
				|" + НСтр("ru='Необходимо дождаться завершения обработки всех данных следующих типов:'");
			
			Для Каждого ИмяОбъектаМетаданных Из ДанныеСОтборомПоСсылкам Цикл
				// Перечислим имена объектов метаданных, среди которые есть еще не обработанные данные.
				ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
					|- " + ИмяОбъектаМетаданных;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				ПредставлениеОперации,
				УровеньЖурналаРегистрации.Ошибка,
				,
				ОтборПоСсылкам,
				ТекстОшибкиДляЖурнала);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаблокированы Тогда
		// Нельзя выполнять операцию - не завершено обновление всех ее входящих данных.
		ВызватьИсключение ТекстОшибкиДляИсключение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаданияКРасчету

// Возвращает текущее значение константы "НомерЗаданияКЗакрытиюМесяца" в целях определения для какого номера задания будет производиться пересчет.
//
// Возвращаемое значение:
//	Число - значение константы "НомерЗаданияКЗакрытиюМесяца". Определяет текущий номер задания для которого будет производиться расчет.
//		Все последующие действия пользователей информационной базы в целях актуализации расчетов будут писаться под более высоким номером задания.
//
Функция ТекущийНомерЗадания(Знач ИмяКонстанты = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяКонстанты) Тогда
		ИмяКонстанты = Метаданные.Константы.НомерЗаданияКЗакрытиюМесяца.Имя;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции

// Увеличивает на 1 значение константы "НомерЗаданияКЗакрытиюМесяца".
//
// Параметры:
//	ИмяКонстанты - Строка - имя константы номера задания. По умолчанию "НомерЗаданияКЗакрытиюМесяца".
//
// Возвращаемое значение:
//	Число - исходный номер задания.
//
Функция УвеличитьНомерЗадания(Знач ИмяКонстанты = "") Экспорт
	
	НомерДоРасчета = 0;
	
	Если НЕ ЗначениеЗаполнено(ИмяКонстанты) Тогда
		ИмяКонстанты = Метаданные.Константы.НомерЗаданияКЗакрытиюМесяца.Имя;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();		
		
		НомерДоРасчета = ТекущийНомерЗадания(ИмяКонстанты);
		Константы[ИмяКонстанты].Установить(НомерДоРасчета + 1);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ " " + НСтр("ru = 'Значение константы'") + " " + ИмяКонстанты + " = " + НомерДоРасчета;
		
		ЗаписьЖурналаРегистрации(
		    ИмяСобытияЖурналаРегистрации(НСтр("ru='Увеличение номера задания для расчета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ИнформацияОбОшибке);
			
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
	Возврат НомерДоРасчета;
	
КонецФункции

// Возвращает период с которого для данной операции закрытия месяца данные становятся неактуальными.
//
// Параметры:
//	ОперацияРасчета - Перечисление.ТипыОперацийЗакрытияМесяца - Имя операции.
//	КонецРасчета - Дата - Конец месяца, на который надо контролировать актуальность расчета.
//	НомерЗадания - Число - Номер задания по которому контролируется актуальность записей в регистре задания.
//							Записи выбираются только те, которые <= указанного номера задания.
//	МассивОрганизаций - Массив - Массив организаций, для которых контролируется актуальность.
//
// Возвращаемое значение:
//	Дата - Начало месяца на который неактуально закрытие месяца. Если последовательность актуальна в периоде КонецРасчета,
//			то будет возвращено начало следующего месяца за КонецРасчета.
//
Функция НачалоРасчета(ОперацияРасчета, КонецРасчета, НомерЗадания = Неопределено, МассивОрганизаций = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Задания.Месяц) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &КонецРасчета
	|	И Задания.Операция = &ОперацияРасчета
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И (Задания.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(Задания.Месяц) ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("КонецРасчета", 	    КонецРасчета);
	Запрос.УстановитьПараметр("ОперацияРасчета", 	ОперацияРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций",  МассивОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(МассивОрганизаций));
	
	Если НЕ ЗначениеЗаполнено(НомерЗадания) Тогда
		Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания());
	Иначе
		Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.НачалоРасчета, КонецМесяца(КонецРасчета) + 1);
	
КонецФункции

// Фиксирует удачный пересчет. Вызывается когда выполнен пересчет, для очистки записей, указывавших на необходимость пересчета.
//
// Параметры:
//	СледующийМесяц - Дата - указывает месяц на начало которого будет записана необходимость об актуализации данных расчета;
//	НомерЗаданияДоРасчета - Число - номер задания для которого производился расчет (см. ТекущийНомерЗадания()), если в процессе выполнения пересчета были опять изменены исходные данные,
//						запись об этом изменении была произведена под новым номером задания (см. УвеличитьНомерЗадания());
//	ОперацияРасчета - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция для которой производился расчет;
//	ДанныеКРаспределению - Структура - Формируется в методе ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц().
//
Процедура ЗафиксироватьРасчет(СледующийМесяц, НомерЗаданияДоРасчета, ОперацияРасчета, ДанныеКРаспределению) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.Операция,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ИЗ
	|	КэшГраниц КАК Задания
	|;
	|/////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&СледующийМесяц                   КАК Месяц,
	|	Границы.Операция                  КАК Операция,
	|	Границы.Организация               КАК Организация,
	|	МАКСИМУМ(Границы.НомерЗадания)    КАК НомерЗадания,
	|	НЕОПРЕДЕЛЕНО                      КАК Документ
	|ИЗ
	|	КэшГраниц КАК Границы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|	ПО &СледующийМесяц = Задания.Месяц
	|		И Границы.Операция = Задания.Операция
	|		И Границы.Организация = Задания.Организация
	|		И Границы.НомерЗадания = Задания.НомерЗадания
	|		И НЕОПРЕДЕЛЕНО = Задания.Документ
	|ГДЕ
	|	Задания.Месяц ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Границы.Операция,
	|	Границы.Организация";
	
	Запрос.МенеджерВременныхТаблиц = ДанныеКРаспределению.ВременныеТаблицы;
	Запрос.УстановитьПараметр("СледующийМесяц", СледующийМесяц);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.Операция.Установить(Выборка.Операция);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		Набор.Отбор.Документ.Установить(Выборка.Документ);
		Набор.Записать(); // Очистили рассчитанные аналитики в прошлом периоде
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СледующийМесяц) Тогда
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.Операция.Установить(Выборка.Операция);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Набор.Записать(Истина); // Перенесли рассчитанные аналитики в новый период
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Блокирует регистр "Задания к закрытию месяца" по указанным аналитикам.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Номер задания из константы "Номер задания к закрытию месяца".
//	Организации - Массив, СправочникСсылка.Организации - Перечень организаций к блокировке.
//	Операция - ПеречислениеСсылка.ТипыОперацийЗакрытияМесяца - Операция, по которой блокируется регистр заданий.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации, Операция) Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ИмяРегистра = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	ЭлементБлокировки.УстановитьЗначение("Операция", Операция);
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		КоличествоСтрок = Организации.Количество();
		Если КоличествоСтрок <> 0 Тогда
			Счетчик = 0;
			Пока Счетчик < КоличествоСтрок Цикл
				ИсточникБлокировки.Добавить();
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ИсточникБлокировки.ЗагрузитьКолонку(Организации, "Организация");
			ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		КонецЕсли;
		// если массив пустой, то блокировка ставится по всем организациям.
	ИначеЕсли ТипЗнч(Организации) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Организации) Тогда
		СтрокаБлокировки = ИсточникБлокировки.Добавить();
		СтрокаБлокировки.Организация = Организации;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Считывает записи регистра "Задания к закрытию месяца" во временную таблицу за указанный период по отборам.
//
// Параметры:
//	НачалоПериода - Период - Начало периода выборки данных.
//	ОкончаниеПериода - Период - Конец периода выборки данных.
//	Организации - Массив, СправочникСсылка.Организации - Фильтр по организации.
//	Операция - Перечисление.ТипыОперацийЗакрытияМесяца - Фильтр по типу операции.
//
// Возвращаемое значение:
//	Структура:
//		* Организации - Массив - Массив организаций, который неактуальны в указанном периоде.
//		* ВременныеТаблицы - МенеджерВременныхТаблиц - Содержит в себе временную таблицу КэшГраниц.
//
Функция ЗаданияКРасчетуЗаМесяц(НачалоПериода, КонецПериода, НомерЗадания, Организации, Операция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.Операция,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И Задания.Операция = &Операция
	|	И (Задания.Организация В (&Организации) ИЛИ &ПоВсемОрганизациям)
	|;
	|//////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Организация
	|ИЗ
	|	КэшГраниц КАК КэшГраниц";
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  		КонецПериода);
	Запрос.УстановитьПараметр("НомерЗадания",  		НомерЗадания);
	Запрос.УстановитьПараметр("Операция", 	   		Операция);
	Запрос.УстановитьПараметр("Организации",   		Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("Организация", 		Результат[1].Выгрузить().ВыгрузитьКолонку("Организация"));
	ИсходныеДанные.Вставить("ВременныеТаблицы", Запрос.МенеджерВременныхТаблиц);
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Процедура формирует записи в регистре сведений "Задания к закрытию месяца",
// если текущий документ изменяет записи в оперативных регистрах.
// Параметры:
//	Документ - Документ.Ссылка - Ссылка на документ-регистратор
//	ДополнительныеСвойства - Структура - Коллекция, содержащая в себе менеджер временных таблиц.
//
Процедура ОтразитьЗаданияКЗакрытиюМесяца(Документ, ДополнительныеСвойства) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // задания устанавливаются только в главном узле.
		Возврат;
	КонецЕсли;
	
	КоллекцияКонтрольныхРегистров = КоллекцияКонтрольныхРегистров();
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ВременныеТаблицы = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц        КАК Месяц,
	|	Таблица.Организация  КАК Организация,
	|	Таблица.Операция     КАК Операция,
	|	Таблица.Документ     КАК Документ
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|";
		
	ТекстВложенногоЗапроса = "";
	ТекстУничтожитьВт = "; ";
		
	Для Каждого КонтрольныйРегистр Из КоллекцияКонтрольныхРегистров Цикл
		ДополнитьТекстЗапросаЗаданий(КонтрольныйРегистр, ВременныеТаблицы.Таблицы, ШаблонЗапроса, ТекстВложенногоЗапроса, ТекстУничтожитьВт)
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстВложенногоЗапроса) Тогда // есть хотя бы один контрольный регистр.
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", "(" + ТекстВложенногоЗапроса + ")")
			+ ТекстУничтожитьВт;
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		НомерЗадания = ТекущийНомерЗадания();
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НаборЗаписей, Выборка);
			НаборЗаписей.НомерЗадания = НомерЗадания;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ИсправлениеОтрицательныхОстатковТоваровОрганизаций

Процедура Оформление_ИсправлениеОтрицательныхОстатковТоваровОрганизаций(ПараметрыОбработчика) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Исправление отрицательных остатков товаров организации'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Исправить'");
	
КонецПроцедуры

Процедура Использование_ИсправлениеОтрицательныхОстатковТоваровОрганизаций(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	ТекстЗапроса = ЗапросОтрицательныеОстаткиТоваровОрганизаций();
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "ОтрицательныеОстатки") = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет отрицательных остатков товаров организаций'"));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросОтрицательныеОстаткиТоваровОрганизаций() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Остатки.Организация КАК Организация,
	|	Остатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов КАК ВидЗапасов,
	|	Остатки.НомерГТД КАК НомерГТД,
	|	Остатки.Период КАК Период,
	|	СУММА(Остатки.КоличествоКонечныйОстаток) КАК Количество,
	|	СУММА(Остатки.КоличествоОборот) КАК Оборот
	|ПОМЕСТИТЬ ОтрицательныеОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОрганизаций.Организация КАК Организация,
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТоварыОрганизаций.ВидЗапасов КАК ВидЗапасов,
	|		ТоварыОрганизаций.НомерГТД КАК НомерГТД,
	|		ТоварыОрганизаций.Период КАК Период,
	|		ТоварыОрганизаций.КоличествоОборот КАК КоличествоОборот,
	|		ТоварыОрганизаций.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(
	|				&ГраницаКонецПредыдущегоПериода,
	|				&ГраницаКонецПериода,
	|				Месяц,
	|				,
	|				Организация В (&МассивОрганизаций)
	|					И ВидЗапасов.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварТребующийПодтвержденияВыпуска)
	|				) КАК ТоварыОрганизаций
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Резервы.Организация,
	|		Резервы.АналитикаУчетаНоменклатуры,
	|		Резервы.ВидЗапасов,
	|		Резервы.НомерГТД,
	|		Резервы.Период,
	|		Резервы.КоличествоОборот,
	|		Резервы.КоличествоКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.РезервыТоваровОрганизаций.ОстаткиИОбороты(
	|				&ГраницаКонецПредыдущегоПериода,
	|				&ГраницаКонецПериода,
	|				Месяц,
	|				,
	|				Организация В (&МассивОрганизаций)
	|					И ВидЗапасов.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварТребующийПодтвержденияВыпуска)
	|				) КАК Резервы) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Организация,
	|	Остатки.АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов,
	|	Остатки.НомерГТД,
	|	Остатки.Период
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.КоличествоКонечныйОстаток) < 0
	|	И СУММА(Остатки.КоличествоОборот) < 0"
	;
	Возврат ТекстЗапроса;

КонецФункции

Процедура ПроверкаОтрицательныхОстатковТоваровОрганизаций(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ОтрицательныеОстатки",
		НСтр("ru='Обнаружены отрицательные остатки товаров организации ""%1"" на конец периода %2'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеРасходовБудущихПериодов

Процедура Использование_РаспределениеРасходовБудущихПериодов(ПараметрыОбработчика) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru='Учет прочих доходов и расходов не ведется'"));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Статьи.Ссылка,
	|	Статьи.ВариантРаспределенияРасходовУпр,
	|	Статьи.ВариантРаспределенияРасходовРегл
	|ПОМЕСТИТЬ СтатьиРБП
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|ГДЕ
	|	Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|	ИЛИ Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статьи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Организация,
	|	Данные.Подразделение,
	|	Данные.НаправлениеДеятельности,
	|	Данные.СтатьяРасходов,
	|	Данные.АналитикаРасходов,
	|	Данные.СуммаПриход - Данные.СуммаРасход КАК Сумма,
	|	Данные.СуммаУпрПриход - Данные.СуммаУпрРасход КАК СуммаУпр,
	|	Данные.СуммаРеглПриход - Данные.СуммаРеглРасход КАК СуммаРегл,
	|	Данные.ПостояннаяРазницаПриход - Данные.ПостояннаяРазницаРасход КАК ПостояннаяРазница,
	|	Данные.ВременнаяРазницаПриход - Данные.ВременнаяРазницаРасход КАК ВременнаяРазница,
	|	Данные.БезСумм
	|ПОМЕСТИТЬ ВТНераспределенныеРБП
	|ИЗ (
	|	ВЫБРАТЬ
	|		Данные.Организация,
	|		Данные.Подразделение,
	|		Данные.СтатьяРасходов,
	|		Данные.АналитикаРасходов,
	|		Данные.НаправлениеДеятельности,
	|		СУММА(Данные.СуммаПриход) КАК СуммаПриход,
	|		СУММА(Данные.СуммаУпрПриход) КАК СуммаУпрПриход,
	|		СУММА(Данные.СуммаРеглПриход) КАК СуммаРеглПриход,
	|		СУММА(Данные.ПостояннаяРазницаПриход) КАК ПостояннаяРазницаПриход,
	|		СУММА(Данные.ВременнаяРазницаПриход) КАК ВременнаяРазницаПриход,
	|		СУММА(Данные.СуммаРасход) КАК СуммаРасход,
	|		СУММА(Данные.СуммаУпрРасход) КАК СуммаУпрРасход,
	|		СУММА(Данные.СуммаРеглРасход) КАК СуммаРеглРасход,
	|		СУММА(Данные.ПостояннаяРазницаРасход) КАК ПостояннаяРазницаРасход,
	|		СУММА(Данные.ВременнаяРазницаРасход) КАК ВременнаяРазницаРасход,
	|		МИНИМУМ(Данные.БезСумм) КАК БезСумм
	|	ИЗ (
	|		ВЫБРАТЬ
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности,
	|			СУММА(Приходы.Сумма) КАК СуммаПриход,
	|			СУММА(Приходы.СуммаУпр) КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Приходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Приходы.СтатьяРасходов)
	|				И (Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО НАЧАЛОПЕРИОДА(Распределение.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Приходы.Период, МЕСЯЦ)
	|				И Распределение.Проведен
	|				И Распределение.ВариантУказанияСуммыУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически)
	|				И Распределение.Организация = Приходы.Организация
	|				И Распределение.Подразделение = Приходы.Подразделение
	|				И Распределение.СтатьяРасходов = Приходы.СтатьяРасходов
	|				И Распределение.АналитикаРасходов = Приходы.АналитикаРасходов
	|				И Распределение.НаправлениеДеятельности = Приходы.НаправлениеДеятельности
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(Приходы.Период, ДЕНЬ) <= &КонецПериода
	|			И Приходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И Распределение.Ссылка ЕСТЬ NULL
	|			И Приходы.Организация В (&МассивОрганизаций)
	|		СГРУППИРОВАТЬ ПО
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности
	|			
	|		ОБЪЕДИНИТЬ ВСЕ
	|			
	|		ВЫБРАТЬ
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			СУММА(Приходы.СуммаРегл) КАК СуммаРеглПриход,
	|			СУММА(Приходы.ПостояннаяРазница) КАК ПостояннаяРазницаПриход,
	|			СУММА(Приходы.ВременнаяРазница) КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Приходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Приходы.СтатьяРасходов)
	|				И (Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО НАЧАЛОПЕРИОДА(Распределение.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Приходы.Период, МЕСЯЦ)
	|				И Распределение.Проведен
	|				И Распределение.ВариантУказанияСуммыРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически)
	|				И Распределение.Организация = Приходы.Организация
	|				И Распределение.Подразделение = Приходы.Подразделение
	|				И Распределение.СтатьяРасходов = Приходы.СтатьяРасходов
	|				И Распределение.АналитикаРасходов = Приходы.АналитикаРасходов
	|				И Распределение.НаправлениеДеятельности = Приходы.НаправлениеДеятельности
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(Приходы.Период, ДЕНЬ) <= &КонецПериода
	|			И Приходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И Распределение.Ссылка ЕСТЬ NULL
	|			И Приходы.Организация В (&МассивОрганизаций)
	|		СГРУППИРОВАТЬ ПО
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности	
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			СУММА(Расходы.Сумма) КАК СуммаРасход,
	|			СУММА(Расходы.СуммаУпр) КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Расходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Расходы.СтатьяРасходов)
	|					И (Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО Распределение.Ссылка = Расходы.Регистратор
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(ЕСТЬNULL(Распределение.Дата, Расходы.Период), ДЕНЬ) <= &КонецПериода
	|			И Расходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ Расходы.РасчетСебестоимости
	|			И Расходы.Организация В (&МассивОрганизаций)
	|		СГРУППИРОВАТЬ ПО
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			СУММА(Расходы.СуммаРегл) КАК СуммаРеглРасход,
	|			СУММА(Расходы.ПостояннаяРазница) КАК ПостояннаяРазницаРасход,
	|			СУММА(Расходы.ВременнаяРазница) КАК ВременнаяРазницаРасход,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Расходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Расходы.СтатьяРасходов)
	|					И (Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО Распределение.Ссылка = Расходы.Регистратор
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(ЕСТЬNULL(Распределение.Дата, Расходы.Период), ДЕНЬ) <= &КонецПериода
	|			И Расходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ Расходы.РасчетСебестоимости
	|			И Расходы.Организация В (&МассивОрганизаций)
	|
	|		СГРУППИРОВАТЬ ПО
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности
	|			
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Себестоимость.Организация,
	|			Себестоимость.Подразделение,
	|			Себестоимость.СтатьяРасходовСписания,
	|			Себестоимость.АналитикаРасходов,
	|			ЕСТЬNULL(Назначения.НаправлениеДеятельности,
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			ИСТИНА КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.СебестоимостьТоваров КАК Себестоимость
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО Статьи.Ссылка = Себестоимость.СтатьяРасходовСписания
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|				ПО Назначения.Ссылка = Себестоимость.АналитикаУчетаНоменклатуры.Назначение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО НАЧАЛОПЕРИОДА(Распределение.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Себестоимость.Период, МЕСЯЦ)
	|				И Распределение.Проведен
	|				И Распределение.Организация = Себестоимость.Организация
	|				И Распределение.Подразделение = Себестоимость.Подразделение
	|				И Распределение.СтатьяРасходов = Себестоимость.СтатьяРасходовСписания
	|				И Распределение.АналитикаРасходов = Себестоимость.АналитикаРасходов
	|				И Распределение.НаправлениеДеятельности =
	|					ЕСТЬNULL(Назначения.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|		ГДЕ
	|			Себестоимость.Период <= &КонецПериода
	|			И Себестоимость.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И Распределение.Ссылка ЕСТЬ NULL
	|			И Себестоимость.Организация В (&МассивОрганизаций)
	|			
	|		) КАК Данные
	|	СГРУППИРОВАТЬ ПО
	|		Данные.Организация,
	|		Данные.Подразделение,
	|		Данные.СтатьяРасходов,
	|		Данные.АналитикаРасходов,
	|		Данные.НаправлениеДеятельности
	|) КАК Данные
	|
	|ГДЕ
	|	(Данные.СуммаПриход - Данные.СуммаРасход) <> 0
	|	ИЛИ (Данные.СуммаУпрПриход - Данные.СуммаУпрРасход) <> 0
	|	ИЛИ (Данные.СуммаРеглПриход - Данные.СуммаРеглРасход) <> 0
	|	ИЛИ (Данные.ПостояннаяРазницаПриход - Данные.ПостояннаяРазницаРасход) <> 0
	|	ИЛИ (Данные.ВременнаяРазницаПриход - Данные.ВременнаяРазницаРасход) <> 0
	|	ИЛИ Данные.БезСумм";
	
	Запрос.Выполнить();
		
	Если УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "СтатьиРБП") = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет статей расходов с вариантом распределения ""На расходы будущих периодов""'"));
		
	ИначеЕсли УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "ВТНераспределенныеРБП") = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет незакрытых оборотов по статьям расходов с вариантом распределения ""На расходы будущих периодов""'"));
	 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаНераспределенныеРасходыБудущихПериодов(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение", 			НСтр("ru='Подразделение'"));
	СписокПолей.Добавить("СтатьяРасходов", 			НСтр("ru='Статья расходов'"));
	СписокПолей.Добавить("АналитикаРасходов", 		НСтр("ru='Аналитика расходов'"));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru='Направление деятельности'"));
	СписокПолей.Добавить("Сумма",		 			НСтр("ru='Сумма'"));
	СписокПолей.Добавить("СуммаУпр",		 		НСтр("ru='Сумма (упр.)'"));
	СписокПолей.Добавить("СуммаРегл",		 		НСтр("ru='Сумма (регл.)'"));
	СписокПолей.Добавить("ПостояннаяРазница",		НСтр("ru='Постоянная разница'"));
	СписокПолей.Добавить("ВременнаяРазница",		НСтр("ru='Временная разница'"));
	СписокПолей.Добавить("БезСумм",					НСтр("ru='Данные без сумм'"));
	
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ВТНераспределенныеРБП",
		НСтр("ru='Обнаружены нераспределенные расходы будущих периодов по организации ""%1"" за период %2'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти




#Область ОформлениеПередачТоваров

Процедура Использование_ОформлениеПередачТоваров(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Резервы.Организация КАК Организация,
	|	Резервы.КорОрганизация КАК КорОрганизация,
	|	Резервы.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Резервы.ВидЗапасов КАК ВидЗапасов,
	|	Резервы.НомерГТД КАК НомерГТД,
	|	СУММА(ВЫБОР
	|			КОГДА Резервы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|				ИНАЧЕ -1
	|		КОНЕЦ * Резервы.Количество) КАК Количество
	|ПОМЕСТИТЬ ОстаткиРезервов
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций КАК Резервы
	|ГДЕ
	|	Резервы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Резервы.Организация В(&МассивОрганизаций)
	|	И Резервы.ВидЗапасов.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|	И Резервы.КорВидЗапасов.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|
	|СГРУППИРОВАТЬ ПО
	|	Резервы.АналитикаУчетаНоменклатуры,
	|	Резервы.Организация,
	|	Резервы.КорОрганизация,
	|	Резервы.ВидЗапасов,
	|	Резервы.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	СУММА(Резервы.Количество) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиРезервов.Организация КАК Организация,
	|	ОстаткиРезервов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ОстаткиРезервов.ВидЗапасов КАК ВидЗапасов,
	|	ОстаткиРезервов.НомерГТД КАК НомерГТД,
	|	-ОстаткиРезервов.Количество КАК Количество
	|ПОМЕСТИТЬ ВТПередачи
	|ИЗ
	|	ОстаткиРезервов КАК ОстаткиРезервов
	|ГДЕ
	|	ОстаткиРезервов.Количество < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиРезервов.Организация КАК Организация,
	|	ОстаткиРезервов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ОстаткиРезервов.ВидЗапасов КАК ВидЗапасов,
	|	ОстаткиРезервов.НомерГТД КАК НомерГТД,
	|	ОстаткиРезервов.Количество КАК Количество
	|ПОМЕСТИТЬ ВТПриемки
	|ИЗ
	|	ОстаткиРезервов КАК ОстаткиРезервов
	|ГДЕ
	|	ОстаткиРезервов.Количество > 0";
	
	Запрос.Выполнить();
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "ОстаткиРезервов") = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет остатков в регистре ""Резервы товаров организаций""'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаНеобходимостиОформленияПередачТоваров(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ВТПередачи",
		НСтр("ru='Требуется оформить передачу товаров от организации ""%1"" на конец периода %2'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ВТПриемки",
		НСтр("ru='Требуется оформить передачу товаров в организацию ""%1"" на конец периода %2'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеОстатковТоваровКПередаче

Процедура Использование_ОформлениеОстатковТоваровКПередаче(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КПередаче.ОрганизацияВладелец КАК Организация,
	|	КПередаче.АналитикаУчетаНоменклатуры,
	|	КПередаче.ВидЗапасовПродавца КАК ВидЗапасов,
	|	КПередаче.НомерГТД,
	|	КПередаче.КоличествоКонечныйОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиКПередаче
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КПередаче
	|ГДЕ
	|	(КПередаче.ОрганизацияВладелец В (&МассивОрганизаций)
	|		ИЛИ КПередаче.ВидЗапасовПродавца.Организация В (&МассивОрганизаций))
	|	И КПередаче.КоличествоКонечныйОстаток <> 0
	|	И (КПередаче.КоличествоКонечныйОстаток - КПередаче.КоличествоНачальныйОстаток > 0
	|		ИЛИ КПередаче.КоличествоНачальныйОстаток = 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КПередаче.ОрганизацияВладелец КАК Организация,
	|	КПередаче.АналитикаУчетаНоменклатуры,
	|	КПередаче.ВидЗапасовПродавца КАК ВидЗапасов,
	|	КПередаче.НомерГТД,
	|	КПередаче.ВозвращеноКонечныйОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КПередаче
	|ГДЕ
	|	(КПередаче.ОрганизацияВладелец В (&МассивОрганизаций)
	|		ИЛИ КПередаче.ВидЗапасовПродавца.Организация В (&МассивОрганизаций))
	|	И КПередаче.ВозвращеноКонечныйОстаток <> 0
	|	И (КПередаче.ВозвращеноКонечныйОстаток - КПередаче.ВозвращеноНачальныйОстаток <> 0
	|		ИЛИ КПередаче.ВозвращеноНачальныйОстаток = 0)
	|";
	
	Запрос.Выполнить();
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "ОстаткиКПередаче") = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет остатков в регистре ""Товары организаций к передаче""'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_ОформлениеОстатковТоваровКПередаче(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = СтрЗаменить(ПараметрыОбработчика.ДанныеЭтапа.Наименование, "2.4", "11.4");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаОстатковПередачТоваров(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ОстаткиКПередаче",
		НСтр("ru='Обнаружены товары, требующие оформления передачи/возврата от организации ""%1"" на конец периода %2'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеВыкупаТоваров

Процедура Использование_ОформлениеВыкупаТоваров(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВыкупу.Организация,
	|	КВыкупу.АналитикаУчетаНоменклатуры,
	|	КВыкупу.КоличествоКонечныйОстаток - КВыкупу.КоличествоНачальныйОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиКВыкупу
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, МЕСЯЦ) КАК КВыкупу
	|ГДЕ
	|	КВыкупу.Организация В (&МассивОрганизаций)
	|	И КВыкупу.КоличествоКонечныйОстаток <> КВыкупу.КоличествоНачальныйОстаток
	|	И КВыкупу.КоличествоКонечныйОстаток <> 0
	|	И КВыкупу.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)";
	
	Запрос.Выполнить();
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "ОстаткиКВыкупу") = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет остатков товаров к выкупу в регистре ""Резервы товаров организаций""'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаОстатковТоваровКВыкупу(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ОстаткиКВыкупу",
		НСтр("ru='Обнаружены товары, требующие оформления выкупа по организации ""%1"" на конец периода %2'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеОтчетовПоКомиссииМеждуОрганизациями

Процедура Использование_ОформлениеОтчетовПоКомиссииМеждуОрганизациями(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ключи.Склад КАК Комиссионер,
	|	ТоварыПереданные.ВидЗапасов.Организация КАК Комитент,
	|	Ключи.Номенклатура КАК Номенклатура,
	|	Ключи.Характеристика КАК Характеристика,
	|	Ключи.Назначение КАК Назначение,
	|	ТоварыПереданные.КоличествоКонечныйОстаток - ТоварыПереданные.КоличествоНачальныйОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиТоваровПереданных
	|ИЗ
	|	РегистрНакопления.ТоварыПереданныеНаКомиссию.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК ТоварыПереданные
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = ТоварыПереданные.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	ТоварыПереданные.АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Организации
	|	И (ТоварыПереданные.КоличествоКонечныйОстаток - ТоварыПереданные.КоличествоНачальныйОстаток <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключи.Склад,
	|	ТоварыПереданные.ВидЗапасов.Организация,
	|	Ключи.Номенклатура,
	|	Ключи.Характеристика,
	|	Ключи.Назначение
	|;
	|///////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ключи.Склад КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.ВидЗапасов.Организация КАК Комиссионер,
	|	КОформлению.ВидЗапасов.ВладелецТовара КАК Комитент,
	|	Ключи.Номенклатура КАК Номенклатура,
	|	Ключи.Характеристика КАК Характеристика,
	|	Ключи.Назначение КАК Назначение,
	|	КОформлению.КоличествоКонечныйОстаток - КОформлению.КоличествоНачальныйОстаток
	|		+ КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиТоваровКОформлениюВсе
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КОформлению
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = КОформлению.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	КОформлению.АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Организации
	|	И ((КОформлению.КоличествоКонечныйОстаток - КОформлению.КоличествоНачальныйОстаток <> 0)
	|		ИЛИ (КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток <> 0))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КОформлению.ВидЗапасов.Организация,
	|	КОформлению.ВидЗапасов.ВладелецТовара,
	|	Ключи.Номенклатура,
	|	Ключи.Характеристика,
	|	Ключи.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОформлению.Организация КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.Комиссионер КАК Комиссионер,
	|	КОформлению.Комитент КАК Комитент,
	|	КОформлению.Номенклатура КАК Номенклатура,
	|	КОформлению.Характеристика КАК Характеристика,
	|	КОформлению.Назначение КАК Назначение,
	|	ВЫБОР КОГДА КОформлению.Количество < ТоварыПереданные.Количество
	|		ТОГДА КОформлению.Количество
	|		ИНАЧЕ ТоварыПереданные.Количество
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ОстаткиТоваровКОформлению
	|ИЗ
	|	ОстаткиТоваровКОформлениюВсе КАК КОформлению
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиТоваровПереданных КАК ТоварыПереданные
	|	ПО КОформлению.Комиссионер = ТоварыПереданные.Комиссионер
	|		И КОформлению.Комитент = ТоварыПереданные.Комитент
	|		И КОформлению.Номенклатура = ТоварыПереданные.Номенклатура
	|		И КОформлению.Характеристика = ТоварыПереданные.Характеристика
	|		И КОформлению.Назначение = ТоварыПереданные.Назначение
	|ГДЕ
	|	КОформлению.Количество <> 0
	|	И ТоварыПереданные.Количество <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОформлению.Организация КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.Комиссионер КАК Комиссионер,
	|	КОформлению.Комитент КАК Комитент,
	|	КОформлению.Номенклатура КАК Номенклатура,
	|	КОформлению.Характеристика КАК Характеристика,
	|	КОформлению.Назначение КАК Назначение,
	|	КОформлению.Количество КАК Количество
	|ПОМЕСТИТЬ ВТОстаткиКомитента
	|ИЗ
	|	ОстаткиТоваровКОформлению КАК КОформлению
	|ГДЕ
	|	КОформлению.Комитент В(&МассивОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОформлению.Организация КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.Комиссионер КАК Комиссионер,
	|	КОформлению.Комитент КАК Комитент,
	|	КОформлению.Номенклатура КАК Номенклатура,
	|	КОформлению.Характеристика КАК Характеристика,
	|	КОформлению.Назначение КАК Назначение,
	|	КОформлению.Количество КАК Количество
	|ПОМЕСТИТЬ ВТОстаткиКомиссионера
	|ИЗ
	|	ОстаткиТоваровКОформлению КАК КОформлению
	|ГДЕ
	|	КОформлению.Комиссионер В(&МассивОрганизаций)
	|";
	
	Запрос.Выполнить();
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "ВТОстаткиКомитента") = 0
	 И УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "ВТОстаткиКомиссионера") = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет остатков в регистре ""Товары к оформлению отчетов комитенту"" по схеме Интеркампани'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаОформленияОтчетовКомитентуМеждуОрганизациями(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Комиссионер", 			   НСтр("ru='Организация-комиссионер'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ВТОстаткиКомитента",
		НСтр("ru='Обнаружены товары, требующие оформления отчетов комитенту ""%1"" на конец периода %2'"),
		СписокПолей);
		
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Комитент", 				   НСтр("ru='Организация-комитент'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ДобавитьОписаниеРегистрацииПроблем(ПараметрыРегистрации,
		"ВТОстаткиКомиссионера",
		НСтр("ru='Обнаружены товары, требующие оформления отчетов комитенту от организации ""%1"" на конец периода %2'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеОтчетовКомитентамОСписании

Процедура Использование_ОформлениеОтчетовКомитентамОСписании(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОформлению.ВидЗапасов.Организация КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры.Склад КАК Комитент,
	|	КОформлению.АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД,
	|	КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток КАК Количество
	|ПОМЕСТИТЬ ВТКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			НЕ АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Организации
	|				И ВидЗапасов.Организация В (&МассивОрганизаций)) КАК КОформлению
	|ГДЕ
	|	КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток <> 0";
	
	Запрос.Выполнить();
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "ВТКОформлению") = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет остатков в регистре ""Товары к оформлению отчетов комитенту"" по сторонним комитентам'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаОформленияОтчетовКомитентуОСписании(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Комитент", 				   НСтр("ru='Комитент'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ВТКОформлению",
		НСтр("ru='Обнаружены товары, требующие оформления отчетов комитенту о списании от организации ""%1"" на конец периода %2'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеСчетовФактурИТаможенныхДокументов

Процедура Использование_ОформлениеСчетовФактурИТаможенныхДокументов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	ПараметрыУчетаНДС = Новый Структура;
	ПараметрыУчетаНДС.Вставить("Организация",   ПараметрыРасчета.Организация);
	ПараметрыУчетаНДС.Вставить("НачалоПериода", НачалоМесяца(ПараметрыРасчета.ПериодРегистрации));
	ПараметрыУчетаНДС.Вставить("КонецПериода",  КонецМесяца(ПараметрыРасчета.ПериодРегистрации));
	
	Результат = Обработки.ПомощникПоУчетуНДС.ОперацииПоНДСКВыполнению(ПараметрыУчетаНДС);
	
	Если НЕ Результат.ЕстьОбязательныеОперацииКВыполнению Тогда
		
		УстановитьСостояниеНеТребуется(ПараметрыОбработчика);
		
	Иначе
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Требуется оформление документов по учету НДС (%1 шт.)'"),
			Результат.ОбязательныеНевыполненныеОперации);
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			ТекстПояснения,
			,
			,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеДублейВидовЗапасов

Процедура Использование_ИсправлениеДублейВидовЗапасов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Справочники.ВидыЗапасов.УстановитьПараметрыЗапросаПоискаДублей(Запрос, ПараметрыРасчета.МассивОрганизаций, Истина);
	
	Запрос.Текст = Справочники.ВидыЗапасов.ТекстЗапросаПоискаДублейВидовЗапасов();
	
	Запрос.Выполнить();
	
	КоличествоПроблем =
		УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "ВтОтборыДублей");
	
	Если КоличествоПроблем = 0 Тогда
		
		УстановитьСостояниеНеТребуется(ПараметрыОбработчика);
		
	Иначе
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru='Обнаружены дубли видов запасов. После исправления дублей рекомендуется выполнить удаление помеченных объектов.'"),
			,
			,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеОшибокВИсходныхДанных


Процедура ПроверкаНеактивныеЗаписиВРегистрахИсточниках(ПараметрыПроверки) Экспорт
	
	ВходящиеДанные = Новый Соответствие;
	
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(ПараметрыПроверки.ДополнительныеПараметры.Период) Тогда
		ПартионныйУчет22.ВходящиеДанныеМеханизма(ВходящиеДанные);
	Иначе
		ПартионныйУчет.ВходящиеДанныеМеханизма(ВходящиеДанные);
	КонецЕсли;
	
	РасчетСебестоимости.ВходящиеДанныеМеханизма(ВходящиеДанные);
	
	ШаблонЗапроса = "
	|%1
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""%2"" КАК ИмяРегистра,
	|	%3 КАК Организация,
	|	Т.Регистратор КАК Регистратор
	|%4
	|ИЗ
	|	%2 КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Т.Активность";
	
	ТекстЗапроса = "";
	
	Для Каждого КлючИЗначение Из ВходящиеДанные Цикл
		
		МетаданныеРегистра = КлючИЗначение.Ключ;
		
		Если НЕ Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра)
		 И НЕ Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) Тогда
			Продолжить;
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра)
		 И МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			Продолжить;
		КонецЕсли;
			
		Если МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено Тогда
			ИмяПоляОрганизации = "Т.Организация";
		ИначеЕсли МетаданныеРегистра.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено Тогда
			ИмяПоляОрганизации = "Т.АналитикаУчетаПоПартнерам.Организация";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗапроса,
				?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ"),
				МетаданныеРегистра.ПолноеИмя(),
				ИмяПоляОрганизации,
				?(ТекстЗапроса = "", "ПОМЕСТИТЬ ВТНеактивныеЗаписиРегистров", ""));
		
	КонецЦикла;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Регистратор",		НСтр("ru='Документ'"));
	СписокПолей.Добавить("ИмяРегистра",		НСтр("ru='Имя регистра'"));
	
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ВТНеактивныеЗаписиРегистров",
		НСтр("ru='Обнаружены неактивные записи регистров в движениях документов организации ""%1"" за период %2'"),
		СписокПолей,
		"Регистратор");
	
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		СокрЛП(ТекстЗапроса));
	
КонецПроцедуры

Процедура ПроверкаВидыЗапасовВСебестоимости(ПараметрыПроверки) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СебестоимостьТоваров"" КАК ИмяРегистра,
	|	Т.Организация 			 КАК Организация,
	|	Т.Регистратор			 КАК Регистратор,
	|	СУММА(1) 				 КАК КоличествоЗаписей
	|ПОМЕСТИТЬ ДвиженияСНекорректнымВидомЗапасов
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Т.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО АналитикаНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация,
	|	Т.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВыручкаИСебестоимостьПродаж"" КАК ИмяРегистра,
	|	АналитикаПартнеров.Организация 	КАК Организация,
	|	Т.Регистратор			 		КАК Регистратор,
	|	СУММА(1) 				 		КАК КоличествоЗаписей
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК АналитикаПартнеров
	|		ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Т.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО АналитикаНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И АналитикаПартнеров.Организация В(&МассивОрганизаций)
	|	И Т.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаПартнеров.Организация,
	|	Т.Регистратор";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("ИмяРегистра",		  НСтр("ru='Имя регистра'"));
	СписокПолей.Добавить("Регистратор",		  НСтр("ru='Документ'"));
	СписокПолей.Добавить("КоличествоЗаписей", НСтр("ru='Количество движений с ошибками'"));
	
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ДвиженияСНекорректнымВидомЗапасов",
		НСтр("ru='Обнаружены некорректное заполнение вида запасов в движениях по регистрам себестоимости по организации ""%1"" за период %2'"),
		СписокПолей,
		"Регистратор");
	
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СебестоимостьТоваров"" КАК ИмяРегистра,
	|	Т.Организация 			 КАК Организация,
	|	Т.Регистратор			 КАК Регистратор,
	|	СУММА(1) 				 КАК КоличествоЗаписей
	|ПОМЕСТИТЬ ДвиженияСНекорректнымНазначением
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Т.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И АналитикаНоменклатуры.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация,
	|	Т.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВыручкаИСебестоимостьПродаж"" КАК ИмяРегистра,
	|	АналитикаПартнеров.Организация 	КАК Организация,
	|	Т.Регистратор			 		КАК Регистратор,
	|	СУММА(1) 				 		КАК КоличествоЗаписей
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК АналитикаПартнеров
	|		ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Т.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И АналитикаПартнеров.Организация В(&МассивОрганизаций)
	|	И АналитикаНоменклатуры.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаПартнеров.Организация,
	|	Т.Регистратор";
		
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ДвиженияСНекорректнымНазначением",
		НСтр("ru='Обнаружены некорректное заполнение назначения в движениях по регистрам себестоимости по организации ""%1"" за период %2'"),
		СписокПолей,
		"Регистратор");
	
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

Процедура ПроверкаКорректностьРеализацииУказаннойВВозврате(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровОтКлиента.Организация 				  КАК Организация,
	|	ТаблицаВидыЗапасов.Ссылка 							  КАК Возврат,
	|	ТаблицаВидыЗапасов.ДокументРеализации 				  КАК Реализация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОтгрузки КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасовОтгрузки 				  КАК ВидЗапасовОтгрузки
	|ПОМЕСТИТЬ ВТВозвратТоваров
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ПО ТаблицаВидыЗапасов.Ссылка = ВозвратТоваровОтКлиента.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВозвратТоваровОтКлиента.Организация В(&МассивОрганизаций)
	|	И ТаблицаВидыЗапасов.ДокументРеализации <> НЕОПРЕДЕЛЕНО
	|	И ВозвратТоваровОтКлиента.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТВозвраты.Реализация КАК Реализация,
	|	НАЧАЛОПЕРИОДА(ВТВозвраты.Реализация.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТРеализации
	|ИЗ
	|	ВТВозвратТоваров КАК ВТВозвраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВозвратТоваров.Организация 						 КАК Организация,
	|	ВТВозвратТоваров.Возврат 							 КАК Возврат,
	|	ВТВозвратТоваров.Реализация 						 КАК Реализация,
	|	ВТВозвратТоваров.АналитикаУчетаНоменклатуры 		 КАК АналитикаУчетаНоменклатуры,
	|	ВТВозвратТоваров.ВидЗапасовОтгрузки 				 КАК ВидЗапасов,
	|	СУММА(ЕСТЬNULL(ВТРеализацияТоваров.НомерЗапроса, 0)) КАК НомерЗапроса
	|ПОМЕСТИТЬ ВТРасхожденияВозвратов
	|ИЗ
	|	ВТВозвратТоваров КАК ВТВозвратТоваров
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		1 											 КАК НомерЗапроса,
	|		ТоварыОрганизаций.Регистратор 				 КАК Регистратор,
	|		ТоварыОрганизаций.Организация 				 КАК Организация,
	|		ВТРеализации.Реализация 					 КАК Реализация,
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТоварыОрганизаций.ВидЗапасов 				 КАК ВидЗапасов
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРеализации КАК ВТРеализации
	|			ПО ТоварыОрганизаций.ДокументРеализации = ВТРеализации.Реализация
	|	ГДЕ
	|		ТоварыОрганизаций.Период МЕЖДУ ВТРеализации.Период И &КонецПериода
	|		И ТоварыОрганизаций.Организация В(&МассивОрганизаций)
	|		И НЕ ТоварыОрганизаций.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|		И ТоварыОрганизаций.Активность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		2,
	|		ТоварыОрганизаций.Регистратор,
	|		ТоварыОрганизаций.Организация,
	|		ВТРеализации.Реализация,
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
	|		ТоварыОрганизаций.ВидЗапасов
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРеализации КАК ВТРеализации
	|			ПО ТоварыОрганизаций.Регистратор = ВТРеализации.Реализация
	|	ГДЕ
	|		ТоварыОрганизаций.Период МЕЖДУ ВТРеализации.Период И &КонецПериода
	|		И ТоварыОрганизаций.Организация В(&МассивОрганизаций)
	|		И ТоварыОрганизаций.Активность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		3,
	|		ТоварыКПередаче.Регистратор,
	|		ВидыЗапасов.Организация,
	|		ВТРеализации.Реализация,
	|		ТоварыКПередаче.АналитикаУчетаНоменклатуры,
	|		ТоварыКПередаче.ВидЗапасовПродавца
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизацийКПередаче КАК ТоварыКПередаче
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|			ПО ТоварыКПередаче.ВидЗапасовПродавца = ВидыЗапасов.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРеализации КАК ВТРеализации
	|			ПО ТоварыКПередаче.ДокументРеализации = ВТРеализации.Реализация
	|	ГДЕ
	|		ТоварыКПередаче.Период МЕЖДУ ВТРеализации.Период И &КонецПериода
	|		И ВидыЗапасов.Организация В(&МассивОрганизаций)
	|		И ТоварыКПередаче.Активность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		4,
	|		ТоварыКПередаче.Регистратор,
	|		ВидыЗапасов.Организация,
	|		ВТРеализации.Реализация,
	|		ТоварыКПередаче.АналитикаУчетаНоменклатуры,
	|		ТоварыКПередаче.ВидЗапасовПродавца
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизацийКПередаче КАК ТоварыКПередаче
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|			ПО ТоварыКПередаче.ВидЗапасовПродавца = ВидыЗапасов.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРеализации КАК ВТРеализации
	|			ПО ТоварыКПередаче.Регистратор = ВТРеализации.Реализация
	|	ГДЕ
	|		ТоварыКПередаче.Период МЕЖДУ ВТРеализации.Период И &КонецПериода
	|		И ВидыЗапасов.Организация В(&МассивОрганизаций)
	|		И ТоварыКПередаче.Активность
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		5,
	|		ТоварыПереданныеНаКомиссию.Регистратор,
	|		ВидыЗапасов.Организация,
	|		ВТРеализации.Реализация,
	|		ТоварыПереданныеНаКомиссию.АналитикаУчетаНоменклатуры,
	|		ТоварыПереданныеНаКомиссию.ВидЗапасов
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданныеНаКомиссию КАК ТоварыПереданныеНаКомиссию
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|			ПО ТоварыПереданныеНаКомиссию.ВидЗапасов = ВидыЗапасов.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРеализации КАК ВТРеализации
	|			ПО ТоварыПереданныеНаКомиссию.ДокументРеализации = ВТРеализации.Реализация
	|	ГДЕ
	|		ТоварыПереданныеНаКомиссию.Период МЕЖДУ ВТРеализации.Период И &КонецПериода
	|		И НЕ ТоварыПереданныеНаКомиссию.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|		И ВидыЗапасов.Организация В(&МассивОрганизаций)
	|		И ТоварыПереданныеНаКомиссию.Активность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		6,
	|		ТоварыПереданныеНаКомиссию.Регистратор,
	|		ВидыЗапасов.Организация,
	|		ВТРеализации.Реализация,
	|		ТоварыПереданныеНаКомиссию.АналитикаУчетаНоменклатуры,
	|		ТоварыПереданныеНаКомиссию.ВидЗапасов
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданныеНаКомиссию КАК ТоварыПереданныеНаКомиссию
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|			ПО ТоварыПереданныеНаКомиссию.ВидЗапасов = ВидыЗапасов.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРеализации КАК ВТРеализации
	|			ПО ТоварыПереданныеНаКомиссию.Регистратор = ВТРеализации.Реализация
	|	ГДЕ
	|		ТоварыПереданныеНаКомиссию.Период МЕЖДУ ВТРеализации.Период И &КонецПериода
	|		И ВидыЗапасов.Организация В(&МассивОрганизаций)
	|		И ТоварыПереданныеНаКомиссию.Активность
	|	) КАК ВТРеализацияТоваров
	|		ПО ВТВозвратТоваров.Организация = ВТРеализацияТоваров.Организация
	|			И ВТВозвратТоваров.Реализация = ВТРеализацияТоваров.Реализация
	|			И ВТВозвратТоваров.АналитикаУчетаНоменклатуры = ВТРеализацияТоваров.АналитикаУчетаНоменклатуры
	|			И ВТВозвратТоваров.ВидЗапасовОтгрузки = ВТРеализацияТоваров.ВидЗапасов
	|СГРУППИРОВАТЬ ПО
	|	ВТВозвратТоваров.Организация,
	|	ВТВозвратТоваров.Возврат,
	|	ВТВозвратТоваров.Реализация,
	|	ВТВозвратТоваров.АналитикаУчетаНоменклатуры,
	|	ВТВозвратТоваров.ВидЗапасовОтгрузки
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(ВТРеализацияТоваров.НомерЗапроса, 0)) = 0";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Возврат",						НСтр("ru='Документ возврата'"));
	СписокПолей.Добавить("Реализация",					НСтр("ru='Документ реализации'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru='Вид запасов'"));
	
	ПараметрыРегистрации = СформироватьПараметрыРегистрацииПроблем(
		"ВТРасхожденияВозвратов",
		НСтр("ru='Обнаружены возвращенные от клиента товары, отсутствующие в документе реализации организации ""%1""'"),
		СписокПолей,
		"Возврат");
	
	ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов

Процедура Использование_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитики
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аналитики.Организация В (&МассивОрганизаций)
	|	И Расчеты.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитики
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аналитики.Организация В (&МассивОрганизаций)
	|	И Расчеты.Активность";
	
	АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
	АналитикиРасчета.Организации = ПараметрыРасчета.МассивОрганизаций;
	
	НачалоРасчета = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(КонецМесяца(ПараметрыРасчета.Период), АналитикиРасчета);
	
	ЕстьДвиженияПоРасчетам = НЕ Запрос.Выполнить().Пустой();
	ПериодВДиапазонеПересчета = (ЗначениеЗаполнено(НачалоРасчета) И НачалоРасчета <= ПараметрыРасчета.ПериодРегистрации);
	
	РегистрыДляРасчета = Документы.ПереоценкаВалютныхСредств.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками);
	РегистрыДляРасчета = Документы.ПереоценкаВалютныхСредств.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами, РегистрыДляРасчета);
	
	ЕстьВалютныеОстатки = Документы.ПереоценкаВалютныхСредств.ЕстьВалютныеОстатки(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		РегистрыДляРасчета);
	
	ТребуетсяПереоценка = Документы.ПереоценкаВалютныхСредств.ТребуетсяПереоценкаВзаиморасчетов(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.ПериодРегистрации);
		
	Если НЕ ТребуетсяПереоценка И НЕ ПериодВДиапазонеПересчета Тогда
		
		Если НЕ ЕстьДвиженияПоРасчетам Тогда
			
			// Расчет не требуется.
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru='Нет движений по регистрам расчетов с клиентами и поставщиками.'"));
			
			Если НЕ ЕстьВалютныеОстатки Тогда
				УстановитьСостояниеНеТребуется(
					ПараметрыОбработчика,
					НСтр("ru='Нет валютных остатков по регистрам расчетов с клиентами и поставщиками.'"));
			КонецЕсли;
			
		Иначе
			// Расчет выполнен успешно.
		КонецЕсли;
		
	Иначе
		
		// Требуется перерасчет.
		Если ПериодВДиапазонеПересчета Тогда
			
			ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = НачалоМесяца(НачалоРасчета);
			
			УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Требуется формирование движений по расчетам начиная с периода %1'"),
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(НачалоРасчета)));
			
		КонецЕсли;
		
		Если ТребуетсяПереоценка Тогда
			
			УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				НСтр("ru='Обнаружены курсовые разницы по регистрам расчетов с клиентами и поставщиками.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Формирование движений по расчетам с контрагентами'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Сформировать'");
	
КонецПроцедуры

Процедура Выполнить_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
	АналитикиРасчета.Организации = ПараметрыРасчета.МассивОрганизаций;
	
	РаспределениеВзаиморасчетовВызовСервера.РассчитатьВсе(ПараметрыРасчета.КонецПериода, АналитикиРасчета);
	
	// Контрольная переоценка на случай если не было заданий к расчету
	Документы.ПереоценкаВалютныхСредств.ПереоценитьРасчетыСКлиентами(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.ПериодРегистрации);
	Документы.ПереоценкаВалютныхСредств.ПереоценитьРасчетыСПоставщиками(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ПереоценкаДенежныхСредствКредитовДепозитовЗаймов

Процедура Использование_ПереоценкаДенежныхСредствКредитовДепозитовЗаймов(ПараметрыОбработчика) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru='Мультивалютный учет не ведется'"));
			
		Возврат;
		
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	РегистрыДляРасчета = Документы.ПереоценкаВалютныхСредств.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаДенежныхСредств);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		РегистрыДляРасчета = Документы.ПереоценкаВалютныхСредств.РегистрыРасчета(
			Перечисления.ХозяйственныеОперации.ПереоценкаКредитовИДепозитов,
			РегистрыДляРасчета);
	КонецЕсли;
	
	ТребуетсяПереоценка = Документы.ПереоценкаВалютныхСредств.ТребуетсяПереоценка(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		РегистрыДляРасчета);
	
	ЕстьВалютныеОстатки = Документы.ПереоценкаВалютныхСредств.ЕстьВалютныеОстатки(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		РегистрыДляРасчета);
		
	Если ТребуетсяПереоценка Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru='Обнаружены курсовые разницы по регистрам учета денежных средств.'"));
		
	ИначеЕсли НЕ ЕстьВалютныеОстатки Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет валютных остатков по регистрам учета денежных средств.'"));
		
	КонецЕсли;
	
	УстановитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, "ТребуетсяПереоценка", ТребуетсяПереоценка);
	
КонецПроцедуры

Процедура Оформление_ПереоценкаДенежныхСредствКредитовДепозитовЗаймов(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Переоценка денежных средств'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Выполнить'");
	
КонецПроцедуры

Процедура Выполнить_ПереоценкаДенежныхСредствКредитовДепозитовЗаймов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоРасчета = НачалоРасчета(
		ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,
		Неопределено,
		ПараметрыРасчета.МассивОрганизаций);
	
	ПервыйПроход  = Истина;
	
	ТребуетсяПереоценка = ПолучитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, "ТребуетсяПереоценка", Ложь);
	ЕстьЗаданиеКРасчету = (НачалоРасчета <= ПараметрыРасчета.КонецПериода);
	
	Если ТребуетсяПереоценка И НЕ ЕстьЗаданиеКРасчету Тогда
		НачалоРасчета = ПараметрыРасчета.КонецПериода; // пересчитать только указанный месяц
	КонецЕсли;
	
	Пока НачалоРасчета <= ПараметрыРасчета.КонецПериода ИЛИ ТребуетсяПереоценка Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		Если ЕстьЗаданиеКРасчету Тогда
			
			Если ПервыйПроход Тогда
				НомерЗаданияДоРасчета = УвеличитьНомерЗадания();
			КонецЕсли;
		
			НачатьТранзакцию();
			
			Попытка
				
				ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ДанныеКПереоценкеЗаМесяц = ЗаданияКРасчетуЗаМесяц(
					НачалоРасчета,
					ОкончаниеПериода,
					НомерЗаданияДоРасчета,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
						|%2'"),
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ДобавитьОписаниеПроблемыВыполненияРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
		Иначе
			
			ДанныеКПереоценкеЗаМесяц = Новый Структура("Организация", ПараметрыРасчета.МассивОрганизаций);
			
		КонецЕсли;
		
		Попытка
			Документы.ПереоценкаВалютныхСредств.ПереоценитьДенежныеСредства(
				ДанныеКПереоценкеЗаМесяц.Организация,
				НачалоРасчета);
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Переоценка денежных средств за период %1 завершилась с ошибкой:
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ДобавитьОписаниеПроблемыВыполненияРасчета(ПараметрыОбработчика, ТекстОшибки, ДанныеКПереоценкеЗаМесяц.Организация, НачалоРасчета);
			
		КонецПопытки;
		
		Попытка
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
				Документы.ПереоценкаВалютныхСредств.ПереоценитьКредитыДепозитыЗаймы(
					ДанныеКПереоценкеЗаМесяц.Организация,
					НачалоРасчета);
			КонецЕсли;
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Переоценка кредитов, депозитов, займов за период %1 завершилась с ошибкой:
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ДобавитьОписаниеПроблемыВыполненияРасчета(ПараметрыОбработчика, ТекстОшибки, ДанныеКПереоценкеЗаМесяц.Организация, НачалоРасчета);
			
		КонецПопытки;
		
		СледующийМесяц = СледующийМесяцКРасчетуДенежныхСредств(НачалоРасчета, ПараметрыРасчета.МассивОрганизаций);
		
		Если ЕстьЗаданиеКРасчету И ПараметрыОбработчика.ТаблицаПояснения.Количество() = 0 Тогда
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗаблокироватьРегистрЗаданий(
					НомерЗаданияДоРасчета,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьРасчет(
					СледующийМесяц,
					НомерЗаданияДоРасчета,
					ПараметрыОбработчика.ДанныеЭтапа.Код,
					ДанныеКПереоценкеЗаМесяц);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
						|%2'"),
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ДобавитьОписаниеПроблемыВыполненияРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЕстьЗаданиеКРасчету И ЗначениеЗаполнено(СледующийМесяц) Тогда
			НачалоРасчета = СледующийМесяц;
		Иначе
			НачалоРасчета = ПараметрыРасчета.КонецПериода + 1; // выход из цикла
		КонецЕсли;
		
		ТребуетсяПереоценка = Ложь;
		ПервыйПроход = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры


Функция СледующийМесяцКРасчетуДенежныхСредств(ПериодРасчета, МассивОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	МИНИМУМ(ДенежныеСредства.Месяц) КАК МесяцКРасчету
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВКассахККМ КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВПути КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВПути.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Касса.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Касса.ВалютаДенежныхСредств <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|
	|	) КАК ДенежныеСредства
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(ДенежныеСредства.Месяц) ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("ВалютаРегл", 	   			Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ОбработанныйМесяц", 			КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("СледующийМесяц", 			КонецМесяца(ПериодРасчета) + 1);
	Запрос.УстановитьПараметр("НаКонецРассчитанногоМесяца", Новый Граница(КонецМесяца(ПериодРасчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", 			МассивОрганизаций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.МесяцКРасчету, Дата(1, 1, 1));
	
КонецФункции

#КонецОбласти


#Область НачисленияПоКредитамДепозитамИВыданнымЗаймам

Процедура Использование_НачисленияПоКредитамДепозитамИВыданнымЗаймам(ПараметрыОбработчика) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru='Договоры кредитов и депозитов не используются.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика 
	|ПОМЕСТИТЬ Графики
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&МассивОрганизаций)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Договор.Организация КАК Организация,
	|	Договор.Ссылка КАК Договор,
	|	График.Проценты КАК ПроцентНачисленияПлан,
	|	График.Комиссия КАК КомиссияНачисленияПлан,
	|	0 КАК ПроцентНачисленияФакт,
	|	0 КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ втПланФактРазвернуто
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.ВариантГрафика.Используется
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Организация,
	|	Расчеты.Договор КАК Договор,
	|	0 КАК ПроцентНачисленияПлан,
	|	0 КАК КомиссияНачисленияПлан,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|		ТОГДА Расчеты.СуммаВВалюте
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентНачисленияФакт,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|		ТОГДА Расчеты.СуммаВВалюте
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КомиссияНачисленияФакт
	|ИЗ
	|	РегистрНакопления.РасчетыПоДоговорамКредитовИДепозитов КАК Расчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договоры
	|	ПО Расчеты.Договор = Договоры.Ссылка
	|		И Договоры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И Расчеты.ТипГрафика = ЗНАЧЕНИЕ(Перечисление.ТипыГрафикаКредитовИДепозитов.Начисления)
	|		И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договоры.Организация В (&МассивОрганизаций)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПланФакт.Организация КАК Организация,
	|	втПланФакт.Договор КАК Договор,
	|	СУММА(втПланФакт.ПроцентНачисленияПлан) КАК ПроцентНачисленияПлан,
	|	СУММА(втПланФакт.КомиссияНачисленияПлан) КАК КомиссияНачисленияПлан,
	|	СУММА(втПланФакт.ПроцентНачисленияФакт) КАК ПроцентНачисленияФакт,
	|	СУММА(втПланФакт.КомиссияНачисленияФакт) КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ Отклонения
	|ИЗ
	|	втПланФактРазвернуто КАК втПланФакт
	|СГРУППИРОВАТЬ ПО
	|	втПланФакт.Организация,
	|	втПланФакт.Договор
	|ИМЕЮЩИЕ
	|	СУММА(втПланФакт.ПроцентНачисленияПлан) - СУММА(втПланФакт.ПроцентНачисленияФакт) > 0
	|		ИЛИ СУММА(втПланФакт.КомиссияНачисленияПлан) - СУММА(втПланФакт.КомиссияНачисленияФакт) > 0";
	
	Запрос.Выполнить();
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "Графики") = 0 Тогда
			
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет графиков начислений и оплат по договорам кредитов и депозитов.'"));
		
	Иначе
		
		ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru='По организации ""%1"" за период %2 есть отклонения в плановых и фактических начислениях по договорам кредитов и депозитов.'"),
			Запрос,
			"Отклонения",
			Ложь,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АннулированиеПодарочныхСертификатов

Процедура Использование_АннулированиеПодарочныхСертификатов(ПараметрыОбработчика) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru='Подарочные сертификаты не используются.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = Документы.АннулированиеПодарочныхСертификатов.ТекстЗапросаСертификатыКАннулированию() + Символы.ПС + ";" + Символы.ПС + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Аннулирование.Организация КАК Организация
	|ПОМЕСТИТЬ АннулированныеСертификаты
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК Аннулирование
	|ГДЕ
	|	Аннулирование.Организация В(&МассивОрганизаций)
	|	И Аннулирование.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аннулирование.Проведен";
	
	Запрос.Выполнить();
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "СертификатыКАннулированию") > 0 Тогда
			
		ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru='По организации ""%1"" за период %2 есть сертификаты, которые необходимо аннулировать.'"),
			Запрос,
			"СертификатыКАннулированию",
			Ложь,
			Истина);
		
	ИначеЕсли УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "АннулированныеСертификаты") = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет сертификатов, которые необходимо аннулировать.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_АннулированиеПодарочныхСертификатов(ПараметрыОбработчика) Экспорт
	
	Документы.АннулированиеПодарочныхСертификатов.АннулироватьПодарочныеСертификатыПриЗакрытииМесяца(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти


#Область РасчетПартийИСебестоимости

Процедура Использование_РасчетПартийИСебестоимости(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	ПериодРасчета    = ПараметрыРасчета.ПериодРегистрации;
	
	// Проверим сообщение о необходимости перехода на партионный учет версии 2.2.
	Если НЕ УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22()
	 И ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению") Тогда
	 
		ТекстСообщения = НСтр("ru='Рекомендуется выполнить переход на партионный учет версии 2.2, т.к. используется раздельный учет товаров по налогообложению НДС.'");
		
		ДействиеПодробнее = Обработки.ОперацииЗакрытияМесяца.ОписаниеДействия_ОткрытьФорму(
			Метаданные.Обработки.ПанельАдминистрированияУТ.Формы.ФинансовыйРезультатИКонтроллинг.ПолноеИмя());
			
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			ТекстСообщения,
			НСтр("ru='Перейти'"),
			ДействиеПодробнее,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ВажнаяИнформация);
	 	
	КонецЕсли;
	
	// Дополним связанными по Интеркампани организациями и добавим информационные сообщения.
	МассивОрганизаций = УниверсальныеМеханизмыПартийИСебестоимости.СвязиОрганизацийПоСхемеИнтеркампани(
		ПериодРасчета,
		ПараметрыРасчета.МассивОрганизаций);
		
	МассивДополнительныеОрганизации = Новый Массив;
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		Если ПараметрыРасчета.МассивОрганизаций.Найти(ТекущаяОрганизация) = Неопределено Тогда
			МассивДополнительныеОрганизации.Добавить(ТекущаяОрганизация);
		КонецЕслИ;
	КонецЦикла;
	
	Если МассивДополнительныеОрганизации.Количество() > 0 Тогда
		
		ТекстДополнительныеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Также будет выполнен расчет для организаций, связанных по схеме Интеркампани: %1'"),
			УниверсальныеМеханизмыПартийИСебестоимости.ПредставлениеОрганизаций(МассивДополнительныеОрганизации, ", "));
		
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			ТекстДополнительныеОрганизации,
			,
			,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ВажнаяИнформация);
		
	КонецЕсли;
	
	НачалоПериодаРасчета = УниверсальныеМеханизмыПартийИСебестоимости.НачалоПериодаРасчета(ПериодРасчета, МассивОрганизаций);
	
	Если НачалоПериодаРасчета <= ПериодРасчета Тогда
		
		ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = НачалоПериодаРасчета;
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Требуется пересчет начиная с периода %1.'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(НачалоПериодаРасчета)));
		Возврат; // партии не актуальны
		
	КонецЕсли;
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.ЕстьНекорректныеДвиженияСебестоимости(ПериодРасчета, МассивОрганизаций) Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru='Период еще не был пересчитан в партионном учете версии 2.2.'"));
		Возврат; // период не рассчитывался в партионном учете версии 2.2
		
	КонецЕсли;
	
	ОрганизацииСДвижениямиПоСебестоимости = УниверсальныеМеханизмыПартийИСебестоимости.ОрганизацииСДвижениямиПоСебестоимости(ПериодРасчета,МассивОрганизаций);
	
	Если НЕ УниверсальныеМеханизмыПартийИСебестоимости.ЕстьДокументыРасчетаСебестоимости(ПериодРасчета, ОрганизацииСДвижениямиПоСебестоимости) Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru='Расчет себестоимости в данном периоде еще не выполнялся.'"));
		Возврат;
		
	КонецЕсли;
	
	СостояниеКорректировкиНДС = УниверсальныеМеханизмыПартийИСебестоимости.СостояниеКорректировкиНДС(ПериодРасчета, МассивОрганизаций);
	Если СостояниеКорректировкиНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru='Требуется выполнить корректировку налогообложения НДС.'"));
		Возврат;
		
	КонецЕсли;
	
	НетДвиженийСебестоимости = НЕ УниверсальныеМеханизмыПартийИСебестоимости.ЕстьДвиженияПоРегиструНакопления(
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя,
		ПериодРасчета,
		МассивОрганизаций);
	
	НетДвиженийВыручки = НЕ УниверсальныеМеханизмыПартийИСебестоимости.ЕстьДвиженияПоРегиструНакопления(
		Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя,
		ПериодРасчета,
		МассивОрганизаций,
		"АналитикаУчетаПоПартнерам.Организация");
	
	НетДвиженийПартийПрочихРасходов = НЕ УниверсальныеМеханизмыПартийИСебестоимости.ЕстьДвиженияПоРегиструНакопления(
		Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя,
		ПериодРасчета,
		МассивОрганизаций);
	
	Если НетДвиженийПартийПрочихРасходов И НетДвиженийСебестоимости И НетДвиженийВыручки
 	 И СостояниеКорректировкиНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет движений по регистрам себестоимости и прочих расходов.'"));
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_РасчетПартийИСебестоимости(ПараметрыОбработчика) Экспорт
	
	ВключенПУ = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВключен(
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	Если ВключенПУ Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код);
	Иначе
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Распределение доп. расходов по товарам'");
	КонецЕсли;
	
	Если ВключенПУ Тогда 
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Рассчитать'");
	Иначе
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Распределить'");
	КонецЕсли;
	
	Если НЕ ТребуетсяПерерасчет(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		
		ПараметрыОбработчика.ДанныеЭтапа.ТекстПодробнее = "";
		
	Иначе
		
		ПротоколыРасчета = РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.ПолучитьПротоколыРасчета(
			ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации,
			ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
		
		Если НЕ ЗначениеЗаполнено(ПротоколыРасчета) Тогда
			ПараметрыОбработчика.ДанныеЭтапа.ТекстПодробнее = "";
		Иначе
			ПараметрыОбработчика.ДанныеЭтапа.ТекстПодробнее = ТекстПодробнееПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_РасчетПартийИСебестоимости(ПараметрыОбработчика) Экспорт
	
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации,
		Неопределено,
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
		
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Дата", 				ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	ПараметрыЗапуска.Вставить("МассивОрганизаций",  ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	ПараметрыЗапуска.Вставить("МестоВызоваРасчета", "ЗакрытиеМесяцаСервер.Выполнить_РасчетПартийИСебестоимости");
	
	ПартионныйУчет22.РассчитатьВсеВПопыткеИсключении(ПараметрыЗапуска);
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеНДС

Процедура Использование_РаспределениеНДС(ПараметрыОбработчика) Экспорт
	
	ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Ложь);
	ПроверитьКорректностьПримененияПравила5Процентов(ПараметрыОбработчика);
	
	Если СостояниеЭтапаОпределено(ПараметрыОбработчика.ДанныеЭтапа)
	 И ТребуетсяПерерасчет(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(
		ПараметрыОбработчика,
		Метаданные.Документы.РаспределениеНДС.Имя);
	
КонецПроцедуры

Функция ПроверитьКорректностьПримененияПравила5Процентов(ПараметрыОбработчика)
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	НеобходимаПроверка = (Месяц(ПараметрыРасчета.ПериодРегистрации) % 3 = 0);
	БылиОшибки = Ложь;
	
	Если НЕ НеобходимаПроверка Тогда
		Возврат НЕ БылиОшибки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	МАКСИМУМ(Т.ПрименитьПравило5Процентов) КАК ПрименитьПравило5Процентов
	|ПОМЕСТИТЬ ОрганизацииСДокументамиРаспределения
	|ИЗ
	|	Документ.РаспределениеНДС КАК Т
	|ГДЕ
	|	Т.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Организация КАК Организация,
	|	Организации.ПрименитьПравило5Процентов КАК ПрименитьПравило5Процентов
	|ИЗ
	|	ОрганизацииСДокументамиРаспределения КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|				&НачалоПериода,
	|				Организация В
	|					(ВЫБРАТЬ
	|						Т.Организация
	|					ИЗ
	|						ОрганизацииСДокументамиРаспределения КАК Т)) КАК Политики
	|		ПО Организации.Организация = Политики.Организация
	|ГДЕ
	|	ЕСТЬNULL(Политики.УчетнаяПолитика.Учитывать5ПроцентныйПорог, ЛОЖЬ)";
	
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаОрганизаций.Количество() = 0 Тогда
		Возврат НЕ БылиОшибки;
	КонецЕсли;
	
	Оценка = Документы.РаспределениеНДС.ОценкаПримененияПравила5Процентов(
		ТаблицаОрганизаций.ВыгрузитьКолонку("Организация"),
		ПараметрыРасчета.ПериодРегистрации);
		
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
		
		СтрокаОценки = Оценка.Найти(СтрокаОрганизации.Организация, "Организация");
		
		Если СтрокаОценки = Неопределено Тогда
			
			Продолжить;
		
		ИначеЕсли НЕ СтрокаОрганизации.ПрименитьПравило5Процентов И СтрокаОценки.Доля <= 5 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У организации ""%1"" расходы по реализации не облагаемой НДС не превышают 5% от общих расходов. НДС может быть принят к вычету в полном объеме.'"),
				СтрокаОрганизации.Организация);
			
			ДобавитьПоясняющуюИнформациюКЭтапу(
				ПараметрыОбработчика,
				ТекстСообщения,
				,
				,
				Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет);
			
		ИначеЕсли СтрокаОрганизации.ПрименитьПравило5Процентов И СтрокаОценки.Доля > 5 Тогда
			
			БылиОшибки = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У организации ""%1"" расходы по реализации не облагаемой НДС превышают 5% от общих расходов. Необходимо выполнить распределение НДС между видами деятельности.'"),
				СтрокаОрганизации.Организация);
			
			УстановитьСостояниеВыполненСОшибками(
				ПараметрыОбработчика,
				ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;		
	
	Возврат НЕ БылиОшибки;
	
КонецФункции

Процедура Выполнить_РаспределениеНДС(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	
	НомерЗаданияДоРасчета = УвеличитьНомерЗадания();
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ДанныеКРаспределению = ЗаданияКРасчетуЗаМесяц(
			НачалоПериода,
			КонецПериода,
			НомерЗаданияДоРасчета,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
				|%2'"),
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ДобавитьОписаниеПроблемыВыполненияРасчета(
			ПараметрыОбработчика,
			ТекстОшибки,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		
	КонецПопытки;
	
	РезультатРаспределенияНДС = Документы.РаспределениеНДС.РаспределитьНДС(
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации, 
		ДанныеКРаспределению.Организация);
	
	Если РезультатРаспределенияНДС.РассчитанныеОрганизации.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьРегистрЗаданий(
				НомерЗаданияДоРасчета,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьРасчет(
				Неопределено,
				НомерЗаданияДоРасчета,
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРаспределению);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ДобавитьОписаниеПроблемыВыполненияРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыРасчета.ПериодРегистрации);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеДоходовИРасходовПоНаправлениямДеятельности

Процедура Использование_РаспределениеДоходовИРасходовПоНаправлениямДеятельности(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Статьи.Ссылка,
	|	Статьи.ВариантРаспределенияРасходовУпр,
	|	Статьи.ВариантРаспределенияРасходовРегл,
	|	Статьи.КосвенныеЗатратыНУ
	|ПОМЕСТИТЬ СтатьиНД
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|ГДЕ
	|	Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|	ИЛИ Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|	ИЛИ (Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|		И Статьи.КосвенныеЗатратыНУ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статьи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Обороты(
	|			&НачалоПериода,
	|			&ГраницаКонецПериода,
	|			,
	|			Организация В (&МассивОрганизаций)
	|				И СтатьяРасходов В
	|					(ВЫБРАТЬ
	|						Т.Ссылка
	|					 ИЗ
	|						СтатьиНД КАК Т
	|					 ГДЕ
	|						Т.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|					)) КАК Расходы
	|ГДЕ
	|	Расходы.СуммаПриход <> 0
	|	ИЛИ Расходы.СуммаУпрПриход <> 0
	|	ИЛИ Расходы.СуммаРасход <> 0
	|	ИЛИ Расходы.СуммаУпрРасход <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расходы.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Обороты(
	|			&НачалоПериода,
	|			&ГраницаКонецПериода,
	|			,
	|			Организация В (&МассивОрганизаций)
	|				И СтатьяРасходов В
	|					(ВЫБРАТЬ
	|						Т.Ссылка
	|					 ИЗ
	|						СтатьиНД КАК Т
	|					 ГДЕ
	|						Т.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|					)) КАК Расходы
	|ГДЕ
	|	Расходы.СуммаРеглПриход <> 0
	|	ИЛИ Расходы.ПостояннаяРазницаПриход <> 0
	|	ИЛИ Расходы.ВременнаяРазницаПриход <> 0
	|	ИЛИ Расходы.СуммаРеглРасход <> 0
	|	ИЛИ Расходы.ПостояннаяРазницаРасход <> 0
	|	ИЛИ Расходы.ВременнаяРазницаРасход <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расходы.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Обороты(
	|			&НачалоПериода,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			Организация В (&МассивОрганизаций)
	|				И СтатьяРасходов В
	|					(ВЫБРАТЬ
	|						Т.Ссылка
	|					 ИЗ
	|						СтатьиНД КАК Т
	|					 ГДЕ
	|						Т.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|						И Т.КосвенныеЗатратыНУ
	|					)) КАК Расходы
	|ГДЕ
	|	Расходы.ВременнаяРазницаПриход <> 0
	|	ИЛИ Расходы.ВременнаяРазницаРасход <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Доходы.Организация
	|ИЗ
	|	РегистрНакопления.ПрочиеДоходы.Обороты(&НачалоПериода, &ГраницаКонецПериода, , Организация В (&МассивОрганизаций)) КАК Доходы
	|ГДЕ
	|	Доходы.СуммаПриход <> 0
	|	ИЛИ Доходы.СуммаУпрПриход <> 0
	|	ИЛИ Доходы.СуммаРеглПриход <> 0
	|	ИЛИ Доходы.СуммаРасход <> 0
	|	ИЛИ Доходы.СуммаУпрРасход <> 0
	|	ИЛИ Доходы.СуммаРеглРасход <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Нет оборотов по регистрам прочих доходов и расходов за период %1'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)));
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Расходы.Организация КАК Организация
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Расходы.Организация КАК Организация,
	|			Расходы.Подразделение КАК Подразделение,
	|			Расходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|			Расходы.СтатьяРасходов КАК СтатьяРасходов,
	|			Расходы.АналитикаРасходов КАК АналитикаРасходов
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы.Остатки(
	|				&ГраницаКонецПериода,
	|				Организация В (&МассивОрганизаций)
	|					И СтатьяРасходов В
	|						(ВЫБРАТЬ
	|							Т.Ссылка
	|						ИЗ
	|							СтатьиНД КАК Т)) КАК Расходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статья
	|				ПО Статья.Ссылка = Расходы.СтатьяРасходов
	|		ГДЕ
	|			(Расходы.СуммаОстаток <> 0 ИЛИ Расходы.СуммаУпрОстаток <> 0)
	|			И Статья.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|			ИЛИ 
	|			Расходы.СуммаРеглОстаток <> 0
	|			И Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|	) КАК Расходы
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Доходы.Организация
	|	ИЗ
	|		РегистрНакопления.ПрочиеДоходы.Остатки(&ГраницаКонецПериода, Организация В (&МассивОрганизаций)) КАК Доходы
	|	ГДЕ
	|		Доходы.СуммаОстаток <> 0
	|	) КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По организации ""%1"" на конец периода %2 есть остатки по регистрам прочих доходов и расходов.'"),
				Выборка.Организация,
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)));
		
	КонецЦикла;
				
КонецПроцедуры

Процедура Выполнить_РаспределениеДоходовИРасходовПоНаправлениямДеятельности(ПараметрыОбработчика) Экспорт
	
	Для Каждого ТекущаяОрганизация Из ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций Цикл
		
		Попытка
			Документы.РаспределениеДоходовИРасходовПоНаправлениямДеятельности.СоздатьДокументыЗаПериод(
				ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации, 
				ТекущаяОрганизация);
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Распределение доходов и расходов расходов по направлениям деятельности за период %1 завершилось с ошибкой:
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ДобавитьОписаниеПроблемыВыполненияРасчета(ПараметрыОбработчика, ТекстОшибки, ТекущаяОрганизация);
			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеДокументовВРегламентированномУчете

Процедура Использование_ОтражениеДокументовВРегламентированномУчете(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = ТекстЗапросаСостояниеОтраженияДокументов(Истина);
	
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ЕстьОтраженныеВУчете   = НЕ МассивРезультатов[0].Пустой() ИЛИ НЕ МассивРезультатов[2].Пустой();
	ЕстьОжидающиеОтражения = НЕ МассивРезультатов[1].Пустой() ИЛИ НЕ МассивРезультатов[3].Пустой();
	ЕстьНеОтраженныеВУчете = НЕ МассивРезультатов[4].Пустой();
	
	ИспользоватьРеглУчет = ИспользоватьРеглУчет(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	Если ЕстьОжидающиеОтражения Тогда
		
		МассивПояснений = Новый Массив;
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			МассивПояснений.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ожидает отражения в учете НДС: %1'"),
				СокрЛП(МассивРезультатов[1].Выгрузить()[0].Количество)));
		КонецЕсли;
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			МассивПояснений.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ожидает отражения в бухгалтерском и налоговом учете: %1'"),
			СокрЛП(МассивРезультатов[3].Выгрузить()[0].Количество)));
		КонецЕсли;
		
		УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, СтрСоединить(МассивПояснений, Символы.ПС));
		
	КонецЕсли;
	
	Если ЕстьНеОтраженныеВУчете Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не %1 документов: %2'"),
				?(ИспользоватьРеглУчет, НСтр("ru='отражено в учете'"), НСтр("ru='обработано'")),
				СокрЛП(МассивРезультатов[4].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если НЕ ЕстьНеОтраженныеВУчете И НЕ ЕстьОжидающиеОтражения И НЕ ЕстьОтраженныеВУчете Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Нет документов для %1.'"),
				?(ИспользоватьРеглУчет, НСтр("ru='отражения в учете'"), НСтр("ru='обработки'"))));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_ОтражениеДокументовВРегламентированномУчете(ПараметрыОбработчика) Экспорт
	
	Если НЕ ИспользоватьРеглУчет(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Формирование записей книг покупок и продаж'");
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Сформировать'");
	Иначе
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Отразить'");
 	КонецЕсли;
 	
КонецПроцедуры

Процедура Выполнить_ОтражениеДокументовВРегламентированномУчете(ПараметрыОбработчика) Экспорт
	
	УчетНДСУТ.СформироватьЗаписиКнигиПокупокПродаж( 
		КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область ФоновыеЗадания

Функция ТекущееСостояниеФоновогоЗадания(ИдентификаторЗадания) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "");
	Результат.Вставить("НеНайдено", Ложь);
	Результат.Вставить("Активно", Ложь);
	Результат.Вставить("Завершено", Ложь);
	Результат.Вставить("ЗавершеноАварийно", Ложь);
	Результат.Вставить("Отменено", Ложь);
	Результат.Вставить("Начало");
	Результат.Вставить("Конец");
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Задание");
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если Задание = Неопределено Тогда
		Результат.НеНайдено = Истина;
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Фоновое задание с идентификатором %1 не найдено.'"),
			СокрЛП(ИдентификаторЗадания));
		Возврат Результат;
	КонецЕсли;
	
	Результат.Задание 	   = Задание;
	Результат.Наименование = Задание.Наименование;
	Результат.Начало 	   = Задание.Начало;
	Результат.Конец 	   = Задание.Конец;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.Активно = Истина;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.Завершено = Истина;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Результат.ЗавершеноАварийно = Истина;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.Отменено = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтменитьВыполнениеФоновогоЗадания(ИдентификаторЗадания) Экспорт 
	
	СостояниеЗадания = ТекущееСостояниеФоновогоЗадания(ИдентификаторЗадания);
	
	Если СостояниеЗадания.Активно Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			СостояниеЗадания.Задание.Отменить();
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(НСтр("ru = 'Отмена выполнения фонового задания'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки);
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает имя уникального фонового задания закрытия месяца
//
// Возвращаемое значение:
//	Строка - Имя фонового задания с разделителем сеанса.
Функция ИмяФоновогоЗадания(Организация = Неопределено) Экспорт
	
	Возврат "ЗакрытиеМесяца_" + РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
КонецФункции

Функция ИдентификаторАктивногоФоновогоЗадания(Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", 		ИмяФоновогоЗадания(Организация));
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Идентификатор = АктивныеЗадания[0].УникальныйИдентификатор;
	Иначе
		Идентификатор = Неопределено;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция ЕстьАктивноеФоновоеЗадание(Организация = Неопределено) Экспорт
	
	Идентификатор = ИдентификаторАктивногоФоновогоЗадания(Организация);
	
	Возврат ЗначениеЗаполнено(Идентификатор);
	
КонецФункции

#КонецОбласти

#Область РаботаСЗапросами

Функция ИнициализироватьЗапрос(Запрос, ПараметрыОбработчикаИлиПараметрыРасчета) Экспорт
	
	ЭтоПараметрыОбработчика = ПараметрыОбработчикаИлиПараметрыРасчета.Свойство("ПараметрыРасчета");
	
	Если ЭтоПараметрыОбработчика Тогда
		ПараметрыРасчета = ПараметрыОбработчикаИлиПараметрыРасчета.ПараметрыРасчета;
	Иначе
		ПараметрыРасчета = ПараметрыОбработчикаИлиПараметрыРасчета;
	КонецЕсли;
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	
	// Общие параметры запроса.
	Запрос.УстановитьПараметр("НачалоПериода",				  	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",				  	КонецПериода);
	Запрос.УстановитьПараметр("НачалоПредыдущегоПериода",	  	НачалоМесяца(НачалоПериода - 1));
	Запрос.УстановитьПараметр("КонецПредыдущегоПериода",	  	НачалоПериода - 1);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода",	  	КонецПериода + 1);
	
	Запрос.УстановитьПараметр("ГраницаНачалоПериода",		  	Новый Граница(НачалоПериода, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ГраницаКонецПериода",		  	Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ГраницаКонецПредыдущегоПериода",	Новый Граница(НачалоПериода - 1, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("МассивОрганизаций",			  	ПараметрыРасчета.МассивОрганизаций);
	
	// Параметры-значения функциональных опций.
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов",
		ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	
	Запрос.УстановитьПараметр("ПартионныйУчетНеИспользуется",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(НачалоПериода));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии21",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии21(НачалоПериода));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаПереходаНаПартионныйУчетВерсии22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22());
	
	
	// Менеджер временных таблиц.
	ДанныеИнициализированы = ЭтоПараметрыОбработчика И ПараметрыОбработчикаИлиПараметрыРасчета.Свойство("МенеджерВременныхТаблиц");
	
	Если ДанныеИнициализированы Тогда
		
		Запрос.МенеджерВременныхТаблиц = ПараметрыОбработчикаИлиПараметрыРасчета.МенеджерВременныхТаблиц;
		
	ИначеЕсли ЭтоПараметрыОбработчика Тогда
		
		ПараметрыОбработчикаИлиПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
		
		Запрос.МенеджерВременныхТаблиц = ПараметрыОбработчикаИлиПараметрыРасчета.МенеджерВременныхТаблиц;
		
	Иначе
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	КонецЕсли;
	
	Возврат ДанныеИнициализированы;
	
КонецФункции

#КонецОбласти

#Область ПроверкиСостоянияСистемы

Процедура ЗаполнитьГруппыПроверокДляРегистрации(ТаблицаГруппПроверок) Экспорт
	
	ОписаниеГруппыПроверок = ТаблицаГруппПроверок.Добавить();
	ОписаниеГруппыПроверок.ИдентификаторРодителя = "";
	ОписаниеГруппыПроверок.Наименование = НСтр("ru='Закрытие месяца'");
	ОписаниеГруппыПроверок.КонтекстВыполнения = Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка();
	ОписаниеГруппыПроверок.Идентификатор = "ЗакрытиеМесяца";
	
	ТаблицаЭтапов = Обработки.ОперацииЗакрытияМесяца.СформироватьЭтапыЗакрытияМесяца();
	
	Для Каждого ТекущаяСтрока Из ТаблицаЭтапов Цикл
		
		ОписаниеГруппыПроверок = ТаблицаГруппПроверок.Добавить();
		ОписаниеГруппыПроверок.ИдентификаторРодителя = "ЗакрытиеМесяца";
		ОписаниеГруппыПроверок.Наименование = ТекущаяСтрока.Наименование;
		ОписаниеГруппыПроверок.КонтекстВыполнения = ТекущаяСтрока.Код;
		ОписаниеГруппыПроверок.Идентификатор = "ГруппаПроверокЭтапаЗакрытияМесяца";
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок) Экспорт
	
	#Область ИсправлениеОшибокВИсходныхДанных
	
	// Неактивные записи в регистрах.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеактивныеЗаписиВРегистрахИсточниках",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеактивныеЗаписиВРегистрахИсточниках");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Неактивные записи в регистрах.'"),
		НСтр("ru='В регистрах, являющихся исходными данными для операция закрытия месяца, не должно быть неактивных записей.'"));
	
	// Заполнение видов запасов в регистре ""Себестоимость товаров"".
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ВидыЗапасовВСебестоимости",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаВидыЗапасовВСебестоимости");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Заполнение вида запасов и назначения в регистре ""Себестоимость товаров"".'"),
		НСтр("ru='При выключенной опции ""Обособленный учет себестоимости товаров по видам запасов"" поля ""Вид запасов"" в регистре ""Себестоимость товаров"" и ""Назначение"" в аналитике номенклатуры не должны быть заполнены.'"));
	
	// Корректность реализации, указанной в возврате.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьРеализацииУказаннойВВозврате",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаКорректностьРеализацииУказаннойВВозврате");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Корректность реализации, указанной в возврате.'"),
		НСтр("ru='При изменении задним числом документа реализации товарный состав документа возврата от клиента может рассинхронизироваться с реализацией.
			|В этом случае в документе возврата необходимо или указать корректный документ реализации или вообще не указывать его.'"));
	
	#КонецОбласти
	
	#Область РасчетПартийИСебестоимости
	
	// Контроль дополнительных расходов, которые не удалось распределить.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НераспределенныеДополнительныеРасходы",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНераспределенныеДополнительныеРасходы");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Контроль дополнительных расходов, которые не удалось распределить.'"),
		НСтр("ru='Все дополнительные расходы должны быть распределены.'"));
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Истина;
	
	// Наличие движений с неподобранными партиями.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ДвиженияСНеподобраннымиПартиями",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаДвиженияСНеподобраннымиПартиями");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Наличие движений с неподобранными партиями.'"),
		НСтр("ru='Для всех движений должны быть подобраны соответствующие им партии.'"));
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Истина;
	
	#КонецОбласти
	
	// Отрицательные остатки товаров организаций.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ОтрицательныеОстаткиТоваровОрганизаций",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОтрицательныхОстатковТоваровОрганизаций,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОтрицательныхОстатковТоваровОрганизаций");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Отрицательные остатки в регистре ""Товары организаций""'"),
		НСтр("ru='Отрицательных остатков быть не должно.'"));
	
	// Расходы будущих периодов.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НераспределенныеРасходыБудущихПериодов",
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеРасходовБудущихПериодов,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНераспределенныеРасходыБудущихПериодов");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Нераспределенные расходы будущих периодов'"),
		НСтр("ru='Не должно быть нераспределенных расходов по статьям расходов с вариантом распределения ""На расходы будущих периодов"".'"));
	
	
	
	
	// Оформление передач товаров.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненаПередачаТоваров",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПередачТоваров,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиОформленияПередачТоваров");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не оформленные передачи товаров между организациями'"),
		НСтр("ru='Должны быть оформлены документы ""Передача товаров между организациями"".'"));
	
	// Оформление остатков передач товаров.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеОформленыОстаткиПередачТоваров",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковТоваровКПередаче,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОстатковПередачТоваров");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не оформленные остатки передач товаров между организациями'"),
		НСтр("ru='Должны быть оформлены документы ""Передача товаров между организациями"".'"));
		
	// Оформление выкупа товаров.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеОформленыВыкупыТоваров",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыкупаТоваров,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОстатковТоваровКВыкупу");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не оформленные выкупы товаров, принятых на ответственное хранение'"),
		НСтр("ru='Должны быть оформлены документы ""Выкуп товаров с хранения"".'"));
		
	// Оформление отчетов по комиссии между организациями.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненоОформлениеОтчетовПоКомиссииМеждуОрганизациями",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовПоКомиссииМеждуОрганизациями,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОформленияОтчетовКомитентуМеждуОрганизациями");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не оформленные отчеты по комиссии между организациями'"),
		НСтр("ru='Должны быть оформлены документы ""Отчет по комиссии между организациями"" и ""Отчет по комиссии между организациями о списании"".'"));
		
	// Оформление отчетов комитентам о списании.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненоОформлениеОтчетовКомитентуОСписании",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовКомитентамОСписании,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОформленияОтчетовКомитентуОСписании");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не оформленные отчеты комитентам о списании'"),
		НСтр("ru='Должны быть оформлены документы ""Отчет комитенту о списании"".'"));
		
		
	// Расчет партий и себестоимости.
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок);
	
	// Также создадим служебные контекстные проверки,
	// к которым можно дописывать сообщения о проблемах при выполнении расчета.
	ЗаполнитьСлужебныеПроверкиЭтаповРасчета(ТаблицаПроверок);
	
КонецПроцедуры

Функция ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, Идентификатор, КонтекстВыполнения,
			УточнениеКонтекстаВыполнения, Обработчик, Важность = Неопределено) Экспорт
	
	ОписаниеПроверки = ТаблицаПроверок.Добавить();
	
	ОписаниеПроверки.Идентификатор 				  = Идентификатор;
	ОписаниеПроверки.ИдентификаторРодителя 		 = "ГруппаПроверокЭтапаЗакрытияМесяца";
	ОписаниеПроверки.КонтекстВыполнения 		  = КонтекстВыполнения;
	ОписаниеПроверки.УточнениеКонтекстаВыполнения = УточнениеКонтекстаВыполнения;
	ОписаниеПроверки.Обработчик 				  = Обработчик;
	ОписаниеПроверки.Важность 					  =
		?(ЗначениеЗаполнено(Важность), Важность, Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
		
	ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Ложь;
	ОписаниеПроверки.ВозможноИзменениеВажности   = Ложь;
	
	ОписаниеПроверки.ДетализацияДоОрганизации    = Истина;
	ОписаниеПроверки.ДетализацияДоПериода        = Истина;
	ОписаниеПроверки.Используется			     = Ложь;
	
	Возврат ОписаниеПроверки;
	
КонецФункции

Функция ИмяФормыРасшифровкиРезультатовПроверки(Проверка) Экспорт
	
	ИмяФормы = Неопределено;
	
	Возврат ИмяФормы;
	
КонецФункции
	
Функция ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, Наименование, Комментарий = "") Экспорт
	
	ОписаниеПроверки.Наименование = Наименование;
	ОписаниеПроверки.Комментарий  = Комментарий;
	
КонецФункции

Функция ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки)
	
	// Подготовка параметров расчета.
	ПараметрыРасчета = Новый Структура("ПериодРегистрации, МассивОрганизаций");
	
	ДополнительныеПараметры = ПараметрыПроверки.ДополнительныеПараметры;
	ТипСтруктура = Новый ОписаниеТипов("Структура, ФиксированнаяСтруктура");
	
	// Отбор по периоду.
	Если ТипСтруктура.СодержитТип(ТипЗнч(ДополнительныеПараметры)) И ДополнительныеПараметры.Свойство("Период") Тогда
		Если ТипЗнч(ДополнительныеПараметры.Период) = Тип("СтандартныйПериод") Тогда
			ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ДополнительныеПараметры.Период.ДатаНачала);
		Иначе // тип значения - Дата
			ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ДополнительныеПараметры.Период);
		КонецЕсли;
	ИначеЕсли ТипСтруктура.СодержитТип(ТипЗнч(ДополнительныеПараметры)) И ДополнительныеПараметры.Свойство("ПериодРегистрации") Тогда
		ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ДополнительныеПараметры.ПериодРегистрации);
	Иначе
		ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	// Отбор по организациям.
	Если ТипСтруктура.СодержитТип(ТипЗнч(ДополнительныеПараметры)) И ДополнительныеПараметры.Свойство("МассивОрганизаций") Тогда
		ПараметрыРасчета.МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ДополнительныеПараметры.МассивОрганизаций);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.МассивОрганизаций) Тогда
		ПараметрыРасчета.МассивОрганизаций = Справочники.Организации.ДоступныеОрганизации();
	КонецЕсли;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Процедура ЗаполнитьОтборыДляПроверки(ПараметрыПроверки, ПараметрыРасчета)
	
	ПараметрыПроверки.Отборы.Очистить();
	
	Для Каждого ТекущаяОрганизация Из ПараметрыРасчета.МассивОрганизаций Цикл
		НоваяСтрока = ПараметрыПроверки.Отборы.Добавить();
		НоваяСтрока.Организация 	  = ТекущаяОрганизация;
		НоваяСтрока.ПроверяемыйПериод = ПараметрыРасчета.ПериодРегистрации;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьПараметрыРегистрацииПроблем(ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта = "") Экспорт
	
	ПараметрыРегистрации = Новый Массив;
	
	ДобавитьОписаниеРегистрацииПроблем(ПараметрыРегистрации, ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ДобавитьОписаниеРегистрацииПроблем(ПараметрыРегистрации, ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта = "") Экспорт
	
	ОписаниеРегистрации = Новый Структура;
	ОписаниеРегистрации.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	ОписаниеРегистрации.Вставить("ШаблонТекстаОшибки",  ШаблонТекстаОшибки);
	ОписаниеРегистрации.Вставить("СписокПолей", 		 СписокПолей);
	ОписаниеРегистрации.Вставить("ИмяПоляОбъекта", 	 ИмяПоляОбъекта);
	
	// Текст запроса для выборки данных.
	ТекстПоляЗапроса = "";
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ТекстПоляЗапроса = ТекстПоляЗапроса + ?(ТекстПоляЗапроса = "", "", ",
			|	") + "Т." + ЭлементСписка.Значение;
	КонецЦикла;
	
	ТекстЗапросаВыборки =
	"ВЫБРАТЬ
	|	%1
	|ИЗ
	|	%2 КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	%1
	|
	|ИТОГИ ПО
	|	Организация";
	
	ТекстЗапросаВыборки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапросаВыборки,
		ТекстПоляЗапроса,
		ИмяВременнойТаблицы);
	
	ОписаниеРегистрации.Вставить("ТекстЗапросаВыборки", ТекстЗапросаВыборки);
	
	ПараметрыРегистрации.Добавить(ОписаниеРегистрации);
	
КонецФункции

Функция ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки(ПараметрыПроверки) Экспорт
	
	ПараметрыРасчета = ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки);
	
	ЗаполнитьОтборыДляПроверки(ПараметрыПроверки, ПараметрыРасчета);
	
	ДополнительныеПараметры = ПараметрыПроверки.ДополнительныеПараметры;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПараметрыРасчета", ПараметрыРасчета);
	ПараметрыОбработчика.Вставить("ДанныеЭтапа",
	 Обработки.ОперацииЗакрытияМесяца.СформироватьОписаниеДанныхЭтапа(ПараметрыПроверки.КонтекстВыполнения));
	ПараметрыОбработчика.Вставить("ТаблицаПояснения", Обработки.ОперацииЗакрытияМесяца.СформироватьТаблицуПоясненийКЭтапам());
	
	Если ДополнительныеПараметры.Свойство("МенеджерВременныхТаблиц") Тогда
		// Данные для проверки уже подготовлены - ее надо выполнить безусловно.
		ПараметрыОбработчика.Вставить("МенеджерВременныхТаблиц", ДополнительныеПараметры.МенеджерВременныхТаблиц);
	Иначе
		// Проверим использование этапа расчета (необходимость выполнения проверки)
		// и заодно подготовим необходимые данные для проверки в процедуре проверки использования этапа.
		Обработки.ОперацииЗакрытияМесяца.ПроверитьИспользованиеЭтапа(ПараметрыОбработчика);
	КонецЕсли;
	 
	Возврат ПараметрыОбработчика;
	
КонецФункции


Функция КоличествоРегистрируемыхОднотипныхОшибок(ПараметрыПроверки)
	Возврат 100; // если 0, то регистрируются все ошибки
КонецФункции
	
Процедура ЗарегистрироватьПроблемыПроверкиДоРасчетаПоДаннымВременнойТаблицы(ПараметрыПроверки, ПараметрыРегистрации, ТекстЗапросаФормированияТаблиц = "") Экспорт
	
	ПараметрыОбработчика = ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки(ПараметрыПроверки);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета 	 = ПараметрыОбработчика.ПараметрыРасчета;
	МаксКоличествоОшибок = КоличествоРегистрируемыхОднотипныхОшибок(ПараметрыПроверки);
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если ЗначениеЗаполнено(ТекстЗапросаФормированияТаблиц) Тогда
		
		// Таблица с данными формируется не в процедуре проверки использования этапа - сформируем ее здесь.
		Запрос.Текст = ТекстЗапросаФормированияТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Для Каждого ОписаниеРегистрации Из ПараметрыРегистрации Цикл
		
		Запрос.Текст = ОписаниеРегистрации.ТекстЗапросаВыборки;
		
		ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОрганизаций.Следующий() Цикл
			
			// Зарегистрируем проблему.
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеРегистрации.ШаблонТекстаОшибки,
				ВыборкаОрганизаций.Организация,
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации));
			
			АудитСостоянияСистемы.ДобавитьСтрокуВТаблицуВыявленныхПроблем(
				ПараметрыПроверки,
				ВыборкаОрганизаций.Организация,
				ПараметрыРасчета.ПериодРегистрации,
				ТекстОшибки);
			
			Выборка = ВыборкаОрганизаций.Выбрать();
			
			НомерОшибки = 0;
			
			Пока Выборка.Следующий() Цикл
				
				НомерОшибки = НомерОшибки + 1;
				
				Если МаксКоличествоОшибок > 0 И НомерОшибки > МаксКоличествоОшибок Тогда
					
					КоличествоНезарегистрированных = Выборка.Количество() - МаксКоличествоОшибок;
					
					ДобавитьИнформациюОНезарегистрированныхОбъектахКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						КоличествоНезарегистрированных);
					
					Прервать;
					
				КонецЕсли;
					
				// Добавим расшифровку проблемы по объектам.
				Если ЗначениеЗаполнено(ОписаниеРегистрации.ИмяПоляОбъекта) Тогда
					
					ДобавитьОбъектКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						Выборка,
						ТекстОшибки,
						ОписаниеРегистрации.СписокПолей,
						ОписаниеРегистрации.ИмяПоляОбъекта);
					
				Иначе
					
					ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						Выборка,
						ТекстОшибки,
						ОписаниеРегистрации.СписокПолей);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьПроблемыПроверкиПослеРасчетаПоДаннымВременнойТаблицы(ПараметрыПроверки, ПараметрыРегистрации, ТекстЗапросаФормированияТаблиц = "") Экспорт
	
	ПараметрыРасчета = ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки);
	МаксКоличествоОшибок = КоличествоРегистрируемыхОднотипныхОшибок(ПараметрыПроверки);
	
	ЗаполнитьОтборыДляПроверки(ПараметрыПроверки, ПараметрыРасчета);
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыРасчета);
	
	Если ЗначениеЗаполнено(ТекстЗапросаФормированияТаблиц) Тогда
		
		// Таблица с данными формируется не в процедуре проверки использования этапа - сформируем ее здесь.
		Запрос.Текст = ТекстЗапросаФормированияТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Для Каждого ОписаниеРегистрации Из ПараметрыРегистрации Цикл
		
		Запрос.Текст = ОписаниеРегистрации.ТекстЗапросаВыборки;
		
		ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОрганизаций.Следующий() Цикл
			
			// Зарегистрируем проблему.
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеРегистрации.ШаблонТекстаОшибки,
				ВыборкаОрганизаций.Организация,
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации));
			
			АудитСостоянияСистемы.ДобавитьСтрокуВТаблицуВыявленныхПроблем(
				ПараметрыПроверки,
				ВыборкаОрганизаций.Организация,
				ПараметрыРасчета.ПериодРегистрации,
				ТекстОшибки);
			
			Выборка = ВыборкаОрганизаций.Выбрать();
			
			НомерОшибки = 0;
			
			Пока Выборка.Следующий() Цикл
				
				НомерОшибки = НомерОшибки + 1;
				
				Если МаксКоличествоОшибок > 0 И НомерОшибки > МаксКоличествоОшибок Тогда
					
					КоличествоНезарегистрированных = Выборка.Количество() - МаксКоличествоОшибок;
					
					ДобавитьИнформациюОНезарегистрированныхОбъектахКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						КоличествоНезарегистрированных);
					
					Прервать;
					
				КонецЕсли;
				
				// Добавим расшифровку проблемы по объектам.
				Если ЗначениеЗаполнено(ОписаниеРегистрации.ИмяПоляОбъекта) Тогда
					
					ДобавитьОбъектКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						Выборка,
						ТекстОшибки,
						ОписаниеРегистрации.СписокПолей,
						ОписаниеРегистрации.ИмяПоляОбъекта);
					
				Иначе
					
					ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						Выборка,
						ТекстОшибки,
						ОписаниеРегистрации.СписокПолей);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ДобавитьОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, ИсточникДанных, ОписаниеПроблемы, СписокПолей, ИмяПоляОбъекта) Экспорт
	
	Представление = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		
		ИмяПоля = ЭлементСписка.Значение;
		ЗначениеПоля = ИсточникДанных[ИмяПоля];
		
		Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
			Представление = Представление + ?(Представление = "", "", "; ")
				+ ЭлементСписка.Представление + ": """ + СокрЛП(ЗначениеПоля) + """";
		КонецЕсли;
		
	КонецЦикла;
	
	Представление = ОписаниеПроблемы + ":
		|" + Представление;
	
	АудитСостоянияСистемы.ДобавитьОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		ИсточникДанных[ИмяПоляОбъекта],
		Представление);
	
КонецПроцедуры

Процедура ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, ИсточникДанных, ОписаниеПроблемы, СписокПолей) Экспорт
	
	Расшифровка   = Новый Структура;
	Представление = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		
		ИмяПоля = ЭлементСписка.Значение;
		ЗначениеПоля = ИсточникДанных[ИмяПоля];
		
		Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		Расшифровка.Вставить(ИмяПоля, ЗначениеПоля);
		
		Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
			Представление = Представление + ?(Представление = "", "", "; ")
				+ ЭлементСписка.Представление + ": """ + СокрЛП(ЗначениеПоля) + """";
		КонецЕсли;
		
	КонецЦикла;
	
	Представление = ОписаниеПроблемы + ":
		|" + Представление;
	
	АудитСостоянияСистемы.ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		Расшифровка,
		Представление);
	
КонецПроцедуры

Процедура ДобавитьИнформациюОНезарегистрированныхОбъектахКЗафиксированнойПроблеме(ПараметрыПроверки, КоличествоОбъектов) Экспорт
	
	ОписаниеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Еще найдено аналогичных проблем: %1'"),
		СокрЛП(КоличествоОбъектов));
	
	АудитСостоянияСистемы.ДобавитьОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		Неопределено,
		ОписаниеПроблемы);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиЭтаповРасчета

Процедура ЗаполнитьСлужебныеПроверкиЭтаповРасчета(ТаблицаПроверок)
	
	Для Каждого МетаЗначение Из Метаданные.Перечисления.ОперацииЗакрытияМесяца.ЗначенияПеречисления Цикл
		
		ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			ИдентификаторСлужебнойПроверкиЭтапа(МетаЗначение.Имя),
			Перечисления.ОперацииЗакрытияМесяца[МетаЗначение.Имя],
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ВоВремяРасчета,
			"");
		ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Истина;
		
		ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Проблемы, диагностированные при выполнении операции ""%1""'"),
				МетаЗначение.Синоним),
			НСтр("ru='Служебная контекстная проверка для регистрации проблем, диагностированных в ходе расчета.'"));
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторСлужебнойПроверкиЭтапа(ЭтапРасчета) Экспорт
	
	Идентификатор = "СлужебнаяКонтекстнаяПоОрганизациямПоПериодам_";
	
	Если ТипЗнч(ЭтапРасчета) = Тип("Строка") Тогда
		Идентификатор = Идентификатор + ЭтапРасчета;
	Иначе
		Идентификатор = Идентификатор + ИмяЗначенияПеречисленияДляЭтапаРасчета(ЭтапРасчета);
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция ИмяЗначенияПеречисленияДляЭтапаРасчета(ЭтапРасчета) Экспорт
	
	Для Каждого МетаЗначение Из Метаданные.Перечисления.ОперацииЗакрытияМесяца.ЗначенияПеречисления Цикл
		Если Перечисления.ОперацииЗакрытияМесяца[МетаЗначение.Имя] = ЭтапРасчета Тогда
			Возврат МетаЗначение.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ИнициализироватьПараметрыРегистрацииПроблемыРасчета(ЭтапРасчета, Организация, ПроверяемыйПериод) Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("ЭтапРасчета", 		ЭтапРасчета);
	ПараметрыРегистрации.Вставить("Организация", 		Организация);
	ПараметрыРегистрации.Вставить("ПроверяемыйПериод", 	ПроверяемыйПериод);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРегистрации, ТекстПроблемы,
			Важность = Неопределено, ТекстУточнения = "", Объект = Неопределено, ДублироватьВЖР = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРегистрации.Организация) Тогда
		МассивОрганизаций = Справочники.Организации.ДоступныеОрганизации();
	Иначе			
		МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ПараметрыРегистрации.Организация);
	КонецЕсли;
	
	Проверка = АудитСостоянияСистемы.НайтиПроверкуПоКлючевымПолям(
		ПараметрыРегистрации.ЭтапРасчета,
		ИдентификаторСлужебнойПроверкиЭтапа(ПараметрыРегистрации.ЭтапРасчета));
	
	Если НЕ ЗначениеЗаполнено(Проверка) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не найдена служебная контекстная проверка для операции ""%1""'"),
			СокрЛП(ПараметрыРегистрации.ЭтапРасчета));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		
		ОписаниеПроблемы = АудитСостоянияСистемы.СформироватьОписаниеПроблемы(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстПроблемы,
				СокрЛП(ТекущаяОрганизация),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРегистрации.ПроверяемыйПериод)),
			Важность,
			ТекстУточнения,
			Объект);
		
		АудитСостоянияСистемы.ЗарегистрироватьПроблему(
			Проверка,
			ТекущаяОрганизация,
			ПараметрыРегистрации.ПроверяемыйПериод,
			ОписаниеПроблемы);
		
	КонецЦикла;
	
	Если ДублироватьВЖР И ЗначениеЗаполнено(ТекстУточнения) Тогда
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(ИмяЗначенияПеречисленияДляЭтапаРасчета(ПараметрыРегистрации.ЭтапРасчета)),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстУточнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеПроблемыВыполненияРасчета(ПараметрыОбработчика, ТекстОшибки,
			Организация = Неопределено, Период = Неопределено, Важность = Неопределено, РасшифровкаОшибки = Неопределено) Экспорт
	
	ОписаниеОшибки = ПараметрыОбработчика.ТаблицаПояснения.Добавить();
	
	ОписаниеОшибки.Родитель 		 = ПараметрыОбработчика.ДанныеЭтапа.Код;
	ОписаниеОшибки.Наименование 	 = ТекстОшибки;
	ОписаниеОшибки.Состояние 		 = Важность;
	ОписаниеОшибки.Организация 		 = Организация;
	ОписаниеОшибки.Период 			 = Период;
	ОписаниеОшибки.РасшифровкаОшибки = РасшифровкаОшибки;
	
КонецПроцедуры
	
Функция ШаблонТекстаПроблемыОшибкаВыполненияКода() Экспорт
	
	Возврат НСтр("ru='При выполнении расчета периода %2 по организации ""%1"" произошла исключительная ситуация'");
	
КонецФункции

// Проверяет наличие проблем (ошибок) связанных с выполнением указанной операции закрытия месяца.
//
// Параметры:
//  Организация	 - Массив - Список организаций, для которых выполнялся расчет.
//  Период		 - Дата - Период, в котором выполнялся расчет.
//  Операция	 - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Операция закрытия месяца.
// 
// Возвращаемое значение:
//  Булево - Истина, если есть проблемы.
//
Функция ЕстьПроблемыВыполненияРасчета(Организация, Период, Операция) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
	|ГДЕ
	|	Проблемы.Организация В(&Организация)
	|	И Проблемы.ПроверяемыйПериод = &Период
	|	И Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка)
	|	И Проблемы.Проверка В
	|			(ВЫБРАТЬ
	|				ПроверкиСостоянияСистемы.Ссылка КАК Ссылка
	|			ИЗ
	|				Справочник.ПроверкиСостоянияСистемы КАК ПроверкиСостоянияСистемы
	|			ГДЕ
	|				ПроверкиСостоянияСистемы.КонтекстВыполнения = &Операция)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", НачалоДня(Период));
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

#КонецОбласти

#Область СостоянияЭтапов

Функция СостояниеЭтапаОпределено(СтрокаТаблицыЭтапов) Экспорт
	
	Возврат СтрокаТаблицыЭтапов.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено;
	
КонецФункции

Функция ТребуетсяПерерасчет(СтрокаТаблицыЭтапов) Экспорт
	
	Возврат СтрокаТаблицыЭтапов.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно
		И СтрокаТаблицыЭтапов.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
КонецФункции

Функция РасчетЭтапаНеТребуется(ПараметрыОбработчика) Экспорт
	
	Возврат ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
КонецФункции


Функция УстановитьСостояниеНеТребуется(ПараметрыОбработчика, Наименование = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	Если ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
	 ИЛИ ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
		Возврат Ложь; // если были диагностированы проблемы, то этап требует пересчета
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Наименование, ТекстПодробнее, ДействиеПодробнее, Состояние);
	КонецЕсли;
	
КонецФункции

Функция УстановитьСостояниеОтключено(ПараметрыОбработчика, Наименование = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ПараметрыОбработчика.ДанныеЭтапа.Отключено = Истина;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Наименование, ТекстПодробнее, ДействиеПодробнее, Состояние);
	КонецЕсли;
	
КонецФункции

Функция УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, Наименование = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		
		Если НЕ ЗначениеЗаполнено(Состояние) Тогда
			Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка;
		КонецЕсли;
		
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Наименование, ТекстПодробнее, ДействиеПодробнее, Состояние);
		
	КонецЕсли;
	
КонецФункции

Функция УстановитьСостояниеВыполненСОшибками(ПараметрыОбработчика, Наименование = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	Если ПараметрыОбработчика.ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		
		Если НЕ ЗначениеЗаполнено(Состояние) Тогда
			Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение;
		КонецЕсли;
		
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Наименование, ТекстПодробнее, ДействиеПодробнее, Состояние);
		
	КонецЕсли;
	
КонецФункции


Процедура ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Наименование, ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ОписаниеПояснения = ПараметрыОбработчика.ТаблицаПояснения.Добавить();
	
	ОписаниеПояснения.Код 				= Новый УникальныйИдентификатор;
	ОписаниеПояснения.Состояние	 		= ?(ЗначениеЗаполнено(Состояние),
		Состояние,
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация);
	ОписаниеПояснения.Родитель 			= ПараметрыОбработчика.ДанныеЭтапа.Код;
	
	ОписаниеПояснения.Наименование 		= Наименование;
	ОписаниеПояснения.ТекстПодробнее 	= ТекстПодробнее;
	ОписаниеПояснения.ДействиеПодробнее = ДействиеПодробнее;
	
КонецПроцедуры


Функция ОпределитьСостояниеЭтаповРасчета(Этапы, Период, МассивОрганизаций = Неопределено, УчетСостоянияПредшествующихЭтапов = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполним состояния этапов.
	СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
		НачалоМесяца(Период),
		МассивОрганизаций);
	
	ПараметрыЗапускаОбновленияСостояния =
		Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(СтруктураДанных);
	ПараметрыЗапускаОбновленияСостояния.УчетСостоянияПредшествующихЭтапов = УчетСостоянияПредшествующихЭтапов;
	
	Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
	
	// Вернем состояние требуемых этапов.
	МассивЭтапов = ОбщегоНазначенияУТКлиентСервер.Массив(Этапы);
	СостоянияЭтапов = Новый Соответствие;
	
	Для Каждого Этап Из МассивЭтапов Цикл
		
		СтрокаЭтапа = СтруктураДанных.ТаблицаЭтапы.Найти(Этап, "Код");
		
		Если СтрокаЭтапа <> Неопределено Тогда
			СостоянияЭтапов.Вставить(Этап, СтрокаЭтапа.Состояние);
		Иначе
			СостоянияЭтапов.Вставить(Этап, Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивЭтапов.Количество() = 1 Тогда
		Возврат СостоянияЭтапов[МассивЭтапов[0]];
	КонецЕсли;
	
	Возврат СостоянияЭтапов;
	
КонецФункции

Процедура ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(ПараметрыОбработчика, ШаблонТекста, Запрос,
			ИмяВременнойТаблицы, ПоОрганизациямПрисутствующимТолькоВОтборе, ЭтоОшибка = Ложь)
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяВременнойТаблицы КАК РезультатПроверки
	|		ПО Т.Ссылка = РезультатПроверки.Организация
	|ГДЕ
	|	Т.Ссылка В(&МассивОрганизаций)
	|	И ВЫБОР КОГДА РезультатПроверки.Организация ЕСТЬ NULL
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	  КОНЕЦ = &ПоОрганизациямПрисутствующимТолькоВОтборе
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Запрос.УстановитьПараметр("ПоОрганизациямПрисутствующимТолькоВОтборе", ПоОрганизациямПрисутствующимТолькоВОтборе);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста,
			Выборка.Организация,
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
		
		Если ЭтоОшибка Тогда
			УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, ТекстРезультата);
		Иначе
			УстановитьСостояниеНеТребуется(ПараметрыОбработчика, ТекстРезультата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеПроверки

Функция ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, ВыполнятьССамогоРаннего = Истина,
			ИмяТаблицыОтбораОрганизаций = "", ИмяРегистраЗаданий = "")
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Организация,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ)) КАК Месяц
	|ПОМЕСТИТЬ ВТОрганизацииСЗаданиямиКЗакрытиюМесяца
	|ИЗ
	|	РегистрСведений.%1 КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %3 КАК Организации
	|		ПО Задания.Организация = Организации.Ссылка
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ) <= &НачалоПериода
	|	%2
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(Задания.Месяц), НЕОПРЕДЕЛЕНО) КАК Месяц
	|ИЗ
	|	ВТОрганизацииСЗаданиямиКЗакрытиюМесяца КАК Задания";
	
	Если НЕ ЗначениеЗаполнено(ИмяРегистраЗаданий) Тогда
		
		// Проверяем регистр ЗаданияКЗакрытиюМесяца 
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Запрос.Текст,
			"ЗаданияКЗакрытиюМесяца",
			"И Задания.Операция = &РассчитываемыйЭтап",
			?(ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ИмяТаблицыОтбораОрганизаций, "ВТОрганизации"));
		
		Запрос.УстановитьПараметр("РассчитываемыйЭтап", ПараметрыОбработчика.ДанныеЭтапа.Код);
		
	Иначе
		
		// Проверяем указанный регистр
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Запрос.Текст,
			ИмяРегистраЗаданий,
			"",
			?(ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ИмяТаблицыОтбораОрганизаций, "ВТОрганизации"));
		
	КонецЕсли;
	
	Если НЕ ВыполнятьССамогоРаннего Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<=", "=")
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос,
		"ВТОрганизацииСЗаданиямиКЗакрытиюМесяца"
			+ ?(НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ", ВТОрганизации", ""));
	
	Если ЗначениеЗаполнено(Выборка.Месяц) Тогда
		
		ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = Выборка.Месяц;
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Требуется пересчет операции %1 %2'"),
				?(ВыполнятьССамогоРаннего, НСтр("ru='начиная с периода'"), НСтр("ru='за период'")),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(Выборка.Месяц)));
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


Функция ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(ПараметрыОбработчика, ИмяДокумента, ИмяТаблицыОтбораОрганизаций = "")
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	ВТОрганизации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%1 КАК Т
	|		ПО Организации.Ссылка = Т.Организация
	|			И (Т.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (Т.Проведен)";
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ИмяТаблицыОтбораОрганизаций);
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='За период %1 нет заданий для расчета данной операции и отсутствуют документы ""%2"".'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
				Метаданные.Документы[ИмяДокумента].Синоним));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	КонецЕсли;
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак использования регламентированного учета в указанном периоде.
//
// Параметры:
// 	Период - Дата - проверяемый период
//
// Возвращаемое значение:
//	Булево - признак использования регламентированного учета
//
Функция ИспользоватьРеглУчет(Период)
	
	ДатаВПериодеРеглУчета = Истина;
	
	Результат = ДатаВПериодеРеглУчета И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область ЗаданияКРасчету

Функция КоллекцияКонтрольныхРегистров()
	
	Коллекция = Новый Массив();
	Коллекция.Добавить("НДССостояниеРеализации0ЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СостоянияНМАОрганизацийЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СостоянияОСОрганизацийЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ВыручкаИСебестоимостьПродажЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДвиженияДенежныеСредстваДоходыРасходыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДвиженияДоходыРасходыПрочиеАктивыПассивыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеДокументыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваБезналичныеЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваВКассахККМЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваВПутиЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваНаличныеЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваУПодотчетныхЛицЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("КнигаУчетаДоходовИРасходовЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПартииПрочихРасходовЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНМатериалыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНОСиНМАЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНТоварыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасчетыПоДоговорамКредитовИДепозитовЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СтоимостьОСЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СтоимостьНМАЗаданияКЗакрытиюМесяца");
	
	Возврат Коллекция;
	
КонецФункции

Процедура ДополнитьТекстЗапросаЗаданий(ИмяТаблицы, Таблицы, ШаблонЗапроса, ТекстЗапроса, ТекстУничтожитьВт)
	Если Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", ИмяТаблицы);
		ТекстУничтожитьВт = ТекстУничтожитьВт + "УНИЧТОЖИТЬ " + ИмяТаблицы + "; ";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Метод регламентного задания "ЗакрытиеМесяца".
//
Процедура ВыполнитьЗакрытиеМесяцаВФоновомЗадании(ОписаниеЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПериод = ОписаниеЗадания.ПервыйПериод;
	
	// Последовательное закрытие месяцев.
	Пока ТекущийПериод <= ОписаниеЗадания.ПоследнийПериод Цикл
		
		ЗакрыватьОУ = (ОписаниеЗадания.ЗакрываемыйПериодОУ = ТекущийПериод);
		ЗакрыватьРУ = (ОписаниеЗадания.ЗакрываемыйПериодРУ = ТекущийПериод);
		ЗакрыватьМУ = (ОписаниеЗадания.ЗакрываемыйПериодМУ = ТекущийПериод);
		
		Если НЕ ЗакрыватьОУ И НЕ ЗакрыватьРУ И НЕ ЗакрыватьМУ Тогда
			ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1);
			Продолжить;
		КонецЕсли;
		
		// Заполним состояния этапов.
		СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
			ТекущийПериод,
			ОписаниеЗадания.Организация,
			ОписаниеЗадания.Организация);
		
		ПараметрыЗапускаОбновленияСостояния = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(
			СтруктураДанных);
		
		ПараметрыЗапускаОбновленияСостояния.ПроверятьДатуЗапрета = Истина;
		ПараметрыЗапускаОбновленияСостояния.ВыполнятьПроверкиДоЭтапа = Истина;
		
		Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
		
		ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1);
		
		Если СтруктураДанных.ИзмененияЗапрещены Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЗакрытиеМесяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
				,
				СтруктураДанных.ПоясненияКЗапретуИзменений);
			
			Продолжить;
			
		КонецЕсли;
		
		// Последовательно выполним все этапы.
		Для Каждого ТекущаяСтрока Из СтруктураДанных.ТаблицаЭтапы Цикл
			
			Если ТекущаяСтрока.ВыполняетсяВручную Тогда
				Продолжить;
			КонецЕсли;
			
			Если (НЕ ЗакрыватьОУ И ТекущаяСтрока.ОперативныйУчет)
			 ИЛИ (НЕ ЗакрыватьРУ И ТекущаяСтрока.РегламентированныйУчет)
			 ИЛИ (НЕ ЗакрыватьМУ И ТекущаяСтрока.МеждународныйУчет) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыЗапускаРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляРасчетаЭтапов(
				СтруктураДанных,
				ТекущаяСтрока.Код,
				СтруктураДанных.ТаблицаЭтапы[СтруктураДанных.ТаблицаЭтапы.Количество()-1].Код);
			
			Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов(ПараметрыЗапускаРасчета);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтборыВФормах

Процедура УстановитьОтборыВФормеСпискаРегламентныхДокуметов(Форма, Список) Экспорт
	
	Если НЕ Форма.Параметры.Свойство("ЗакрытиеМесяца") Тогда
		Возврат;
	КонецЕсли;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	Форма.Параметры.Отбор.Очистить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		Форма.Параметры.МассивОрганизаций,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗакрытиеМесяца_Организация");
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Дата",
		НачалоМесяца(Форма.Параметры.ПериодРегистрации),
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗакрытиеМесяца_НачалоПериода");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"Дата",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		КонецМесяца(Форма.Параметры.ПериодРегистрации),
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗакрытиеМесяца_КонецПериода");
	
	Если Форма.Параметры.Свойство("ТипОперации") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ТипОперации",
			Форма.Параметры.ТипОперации,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
			"ЗакрытиеМесяца_ТипОперации");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Тестирование

// Выполняется в фоновом задании, создаваемом в обработке ТестированиеОперацийЗакрытийМесяца.
//
Процедура ТестированиеЗакрытияМесяца(Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполним состояния этапов.
	СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
		НачалоМесяца(Период));
	
	ПараметрыЗапускаОбновленияСостояния = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(
		СтруктураДанных);
	
	Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
	
	// Последовательно выполним все этапы (в т.ч. этапы в статусе "Выполнен успешно").
	Для Каждого ТекущаяСтрока Из СтруктураДанных.ТаблицаЭтапы Цикл
		
		Если ТекущаяСтрока.ВыполняетсяВручную
		 И ТекущаяСтрока.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			
			СтруктураПоиска = Новый Структура("Родитель", ТекущаяСтрока.Код);
			СтрокиПояснений = СтруктураДанных.ТаблицаПоясненияЭтапов.НайтиСтроки(СтруктураПоиска);

			Для Каждого СтрокаПояснения Из СтрокиПояснений Цикл
				
				Если СтрокаПояснения.Состояние <> Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка
				 И СтрокаПояснения.Состояние <> Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение Тогда
					Продолжить;
				КонецЕсли;
				
				// Продублируем проблемы, диагностированные для ручной операции, в журнале регистрации для последующего анализа.
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(ИмяЗначенияПеречисленияДляЭтапаРасчета(ТекущаяСтрока.Код)),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					СтрокаПояснения.Наименование);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.ВыполняетсяВручную
		 ИЛИ ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		
		ПараметрыЗапускаРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляРасчетаЭтапов(
			СтруктураДанных,
			ТекущаяСтрока.Код,
			СтруктураДанных.ТаблицаЭтапы[СтруктураДанных.ТаблицаЭтапы.Количество()-1].Код);
		
		Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов(ПараметрыЗапускаРасчета);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеСвойства

Процедура УстановитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, ИмяСвойства, ЗначениеСвойства = Неопределено)
	
	ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства.Вставить(ИмяСвойства, ЗначениеСвойства);
	
КонецПроцедуры

Функция ПолучитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено)
	
	Если НЕ ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства[ИмяСвойства];
	
КонецФункции

#КонецОбласти

#Область Прочие

Функция ТекстПодробнееПоУмолчанию() Экспорт
	Возврат НСтр("ru='Подробнее'");
КонецФункции

Функция ИмяСобытияЖурналаРегистрации(ДополнениеИмени) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Закрытие месяца.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ДополнениеИмени);
	
КонецФункции

#КонецОбласти

#КонецОбласти
