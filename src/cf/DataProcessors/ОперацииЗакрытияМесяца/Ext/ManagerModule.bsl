#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписанияЭтапов

// Возвращает описание дерева операций для формы обработки.
//
// Возвращаемое значение:
//	Таблица значений - см. СформироватьТаблицуЭтапов()
//
Функция СформироватьЭтапыЗакрытияМесяца() Экспорт
	
	ТаблицаЭтапов = СформироватьТаблицуЭтапов();
	
	#Область Группа_РучныеОперации
	
	ТекущийРодитель = ИдентификаторГруппыРучныеОперации();
	
	// Ошибки в данных.
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеДублейВидовЗапасов,
		Истина, Ложь, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru='Исправить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ИсправлениеДублейВидовЗапасов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Справочники.ВидыЗапасов.Формы.ФормаСписка.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстПодробнее     = ЗакрытиеМесяцаСервер.ТекстПодробнееПоУмолчанию();
	НоваяСтрока.ДействиеПодробнее  = ОписаниеДействия_ОткрытьРезультатыПроверки(,, НоваяСтрока.Код);
	
	// Невыполненные регламентные операции.
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОтрицательныхОстатковТоваровОрганизаций);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ИсправлениеОтрицательныхОстатковТоваровОрганизаций");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ИсправлениеОтрицательныхОстатковТоваровОрганизаций");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПомощникИсправленияОстатковТоваровОрганизаций.Формы.ФормаМониторСостоянияТоваровОрганизаций.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеРасходовБудущихПериодов,
		Ложь, Истина, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Распределить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РаспределениеРасходовБудущихПериодов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеРасходовБудущихПериодов.Формы.ФормаСпискаДокументов.ПолноеИмя());
	
	

	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПередачТоваров);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеПередачТоваров");
	ОписаниеДействия = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоПередачиВыкуп.ПолноеИмя());
	ОписаниеДействия.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДокументыИнтеркампани");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия;
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковТоваровКПередаче);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеОстатковТоваровКПередаче");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ОформлениеОстатковТоваровКПередаче");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоПередачиТоваров21.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыкупаТоваров);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеВыкупаТоваров");
	ОписаниеДействия = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоПередачиВыкуп.ПолноеИмя());
	ОписаниеДействия.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДокументыЗакупки");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия;
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовПоКомиссииМеждуОрганизациями);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеОтчетовПоКомиссииМеждуОрганизациями");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоОтчетыПоКомиссии.ПолноеИмя());

	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовКомитентамОСписании);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеОтчетовКомитентамОСписании");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.ЖурналыДокументов.ОтчетыКомитентам.Формы.ФормаСпискаДокументов.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеСчетовФактурИТаможенныхДокументов,
		Ложь, Истина, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеСчетовФактурИТаможенныхДокументов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПомощникПоУчетуНДС.Формы.Форма.ПолноеИмя());
	// Доп. параметры формы.
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ТолькоОформлениеДокументов", Истина);
	
	#КонецОбласти
	
	#Область Группа_Взаиморасчеты
	
	ТекущийРодитель = ИдентификаторГруппыВзаиморасчеты();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	НоваяСтрока.ДействиеВыполнить = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПереоценкаДенежныхСредствКредитовДепозитовЗаймов);
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПереоценкаДенежныхСредствКредитовДепозитовЗаймов");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ПереоценкаДенежныхСредствКредитовДепозитовЗаймов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ПереоценкаДенежныхСредствКредитовДепозитовЗаймов");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.ПереоценкаВалютныхСредств.Формы.ФормаСписка.ПолноеИмя(), Истина);
	
	#КонецОбласти
	
	#Область Группа_ФормированиеЗатрат
	
	ТекущийРодитель = ИдентификаторГруппыФормированиеЗатрат();
	
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачисленияПоКредитамДепозитамИВыданнымЗаймам);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Начислить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_НачисленияПоКредитамДепозитамИВыданнымЗаймам");
	НоваяСтрока.ДействиеВыполнить = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.НачисленияКредитовИДепозитов.Формы.ФормаСписка.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.АннулированиеПодарочныхСертификатов);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Аннулировать'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_АннулированиеПодарочныхСертификатов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_АннулированиеПодарочныхСертификатов");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.АннулированиеПодарочныхСертификатов.Формы.ФормаСписка.ПолноеИмя());
	
	#КонецОбласти

	
	#Область Группа_Себестоимость
	
	ТекущийРодитель = ИдентификаторГруппыСебестоимость();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыкупаТоваров);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковТоваровКПередаче);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовКомитентамОСписании);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовПоКомиссииМеждуОрганизациями);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеПередачТоваров);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РасчетПартийИСебестоимости");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_РасчетПартийИСебестоимости");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РасчетПартийИСебестоимости");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.РегистрыСведений.ПротоколыРасчетаПартийИСебестоимости.Формы.ФормаПросмотраПротоколов.ПолноеИмя());
	НоваяСтрока.ДействиеПодробнее.ОткрыватьВместоЖР = Истина;
	НоваяСтрока.ДействиеПодробнее.НеТребуетсяПриУспешномВыполнении = Истина;
	
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Распределить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РаспределениеНДС");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РаспределениеНДС");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеНДС.Формы.ФормаСписка.ПолноеИмя());
	
	#КонецОбласти
	
	#Область Группа_ФормированиеФинансовогоРезультата
	
	ТекущийРодитель = ИдентификаторГруппыФормированиеФинансовогоРезультата();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеДоходовИРасходовПоНаправлениямДеятельности);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Распределить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РаспределениеДоходовИРасходовПоНаправлениямДеятельности");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РаспределениеДоходовИРасходовПоНаправлениямДеятельности");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеДоходовИРасходовПоНаправлениямДеятельности.Формы.ФормаСписка.ПолноеИмя());
	
	#КонецОбласти
	
	#Область Группа_РегламентированныйУчет
	
	ТекущийРодитель = ИдентификаторГруппыРегламентированныйУчет();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете,
		Ложь, Истина, Ложь);
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОтражениеДокументовВРегламентированномУчете");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ОтражениеДокументовВРегламентированномУчете");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ОтражениеДокументовВРегламентированномУчете");
	
	#КонецОбласти
	
	
	// Заполнение полей по умолчанию.
	Для Каждого ТекущаяСтрока Из ТаблицаЭтапов Цикл
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Наименование) Тогда
			ТекущаяСтрока.Наименование = СокрЛП(ТекущаяСтрока.Код);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЭтапов.ЗаполнитьЗначения(Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено, "Состояние");
	
	Возврат ТаблицаЭтапов;
	
КонецФункции


Функция СформироватьТаблицуГруппЭтапов()
	
	ТаблицаГруппЭтапов = Новый ТаблицаЗначений;
	ТаблицаГруппЭтапов.Колонки.Добавить("Код", 				      Новый ОписаниеТипов("Строка"));
	ТаблицаГруппЭтапов.Колонки.Добавить("Наименование", 	      Новый ОписаниеТипов("Строка"));
	ТаблицаГруппЭтапов.Колонки.Добавить("Родитель", 		      Новый ОписаниеТипов("Строка")); // код группы-родителя
	
	// Служебные колонки.
	ТаблицаГруппЭтапов.Колонки.Добавить("Состояние",   		      Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияОперацийЗакрытияМесяца"));
	ТаблицаГруппЭтапов.Колонки.Добавить("Отключено",   		      Новый ОписаниеТипов("Булево"));
	ТаблицаГруппЭтапов.Колонки.Добавить("Видимость",   		      Новый ОписаниеТипов("Булево"));
	ТаблицаГруппЭтапов.Колонки.Добавить("ИдентификаторСтроки",    Новый ОписаниеТипов("Число"));
	
	// Добавление индексов полей.
	ТаблицаГруппЭтапов.Индексы.Добавить("Код");
	
	Возврат ТаблицаГруппЭтапов;
	
КонецФункции

Функция СформироватьТаблицуЭтапов() Экспорт
	
	ТаблицаЭтапов = Новый ТаблицаЗначений;
	ТаблицаЭтапов.Колонки.Добавить("Код",		   		      Новый ОписаниеТипов("ПеречислениеСсылка.ОперацииЗакрытияМесяца"));
	ТаблицаЭтапов.Колонки.Добавить("Наименование", 		      Новый ОписаниеТипов("Строка"));
	ТаблицаЭтапов.Колонки.Добавить("Родитель", 	   		      Новый ОписаниеТипов("Строка")); // код группы-родителя
	ТаблицаЭтапов.Колонки.Добавить("ВыполняетсяВручную", 	  Новый ОписаниеТипов("Булево")); // если Истина, то будет пропущен при расчете этапов
	
	ТаблицаЭтапов.Колонки.Добавить("ПредшествующиеЭтапы",     Новый ОписаниеТипов("Массив")); // коды этапов-предшественников; от их состояния будет зависеть состояние текущего этапа
	
	ТаблицаЭтапов.Колонки.Добавить("ТекстВыполнить", 	      Новый ОписаниеТипов("Строка"));
	ТаблицаЭтапов.Колонки.Добавить("ТекстПодробнее", 	      Новый ОписаниеТипов("Строка"));
	
	ТаблицаЭтапов.Колонки.Добавить("ДействиеВыполнить",       Новый ОписаниеТипов("Структура"));
	ТаблицаЭтапов.Колонки.Добавить("ДействиеПодробнее",       Новый ОписаниеТипов("Структура"));
	
	ТаблицаЭтапов.Колонки.Добавить("ДействиеИспользование",   Новый ОписаниеТипов("Структура"));
	ТаблицаЭтапов.Колонки.Добавить("ДействиеОформление",      Новый ОписаниеТипов("Структура"));
	
	ТаблицаЭтапов.Колонки.Добавить("ДатаНачалаРасчета",    	  Новый ОписаниеТипов("Дата")); // дата, с которой требуется пересчет
	ТаблицаЭтапов.Колонки.Добавить("Состояние",   		      Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияОперацийЗакрытияМесяца"));
	ТаблицаЭтапов.Колонки.Добавить("СостояниеПоУмолчанию",    Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияОперацийЗакрытияМесяца")); // если не используется процедура "Использование"
	
	ТаблицаЭтапов.Колонки.Добавить("ТипыРегламентныхОпераций",Новый ОписаниеТипов("Массив")); // соответствие значениям одноименного перечисления
	
	// Вид учета, к которому относится этап.
	ТаблицаЭтапов.Колонки.Добавить("ОперативныйУчет",         Новый ОписаниеТипов("Булево"));
	ТаблицаЭтапов.Колонки.Добавить("РегламентированныйУчет",  Новый ОписаниеТипов("Булево"));
	ТаблицаЭтапов.Колонки.Добавить("МеждународныйУчет",       Новый ОписаниеТипов("Булево"));
	
	// Служебные колонки.
	ТаблицаЭтапов.Колонки.Добавить("Отключено",   		   	  Новый ОписаниеТипов("Булево"));
	ТаблицаЭтапов.Колонки.Добавить("Видимость",   		      Новый ОписаниеТипов("Булево"));
	ТаблицаЭтапов.Колонки.Добавить("ИдентификаторСтроки",     Новый ОписаниеТипов("Число"));
	ТаблицаЭтапов.Колонки.Добавить("ГиперссылкаВыполнить",    Новый ОписаниеТипов("Булево"));
	ТаблицаЭтапов.Колонки.Добавить("ГиперссылкаПодробнее",    Новый ОписаниеТипов("Булево"));
	ТаблицаЭтапов.Колонки.Добавить("ЕстьЗаписиЖР",    	      Новый ОписаниеТипов("Булево"));
	ТаблицаЭтапов.Колонки.Добавить("ДополнительныеСвойства",  Новый ОписаниеТипов("Структура"));
	ТаблицаЭтапов.Колонки.Добавить("ВыполненыПредшествующиеЭтапы", Новый ОписаниеТипов("Булево"));
	
	// Добавление индексов полей.
	ТаблицаЭтапов.Индексы.Добавить("Код");
	ТаблицаЭтапов.Индексы.Добавить("Родитель");
	
	Возврат ТаблицаЭтапов;
	
КонецФункции

Функция СформироватьТаблицуПоясненийКЭтапам() Экспорт
	
	ТаблицаПояснений = Новый ТаблицаЗначений;
	ТаблицаПояснений.Колонки.Добавить("Код",		   		  Новый ОписаниеТипов("Строка")); // имя проверки
	ТаблицаПояснений.Колонки.Добавить("Наименование", 		  Новый ОписаниеТипов("Строка"));
	ТаблицаПояснений.Колонки.Добавить("Состояние",   		  Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыВажностиПроблемыСостоянияСистемы"));
	ТаблицаПояснений.Колонки.Добавить("Родитель", 	   		  Новый ОписаниеТипов("ПеречислениеСсылка.ОперацииЗакрытияМесяца")); // этап-родитель
	
	ТаблицаПояснений.Колонки.Добавить("Период",   		  	  Новый ОписаниеТипов("Дата"));
	ТаблицаПояснений.Колонки.Добавить("Организация",   		  Новый ОписаниеТипов("Массив, СправочникСсылка.Организации"));
	
	ТаблицаПояснений.Колонки.Добавить("ТекстВыполнить", 	  Новый ОписаниеТипов("Строка"));
	ТаблицаПояснений.Колонки.Добавить("ТекстПодробнее", 	  Новый ОписаниеТипов("Строка"));
	
	ТаблицаПояснений.Колонки.Добавить("ДействиеВыполнить",    Новый ОписаниеТипов("Структура"));
	ТаблицаПояснений.Колонки.Добавить("ДействиеПодробнее",    Новый ОписаниеТипов("Структура"));
	
	// Служебные колонки.
	ТаблицаПояснений.Колонки.Добавить("Видимость",   		  Новый ОписаниеТипов("Булево"));
	ТаблицаПояснений.Колонки.Добавить("ИдентификаторСтроки",  Новый ОписаниеТипов("Число"));
	ТаблицаПояснений.Колонки.Добавить("ГиперссылкаВыполнить", Новый ОписаниеТипов("Булево"));
	ТаблицаПояснений.Колонки.Добавить("ГиперссылкаПодробнее", Новый ОписаниеТипов("Булево"));
	
	ТаблицаПояснений.Колонки.Добавить("РасшифровкаОшибки");
	
	// Добавление индексов полей.
	ТаблицаПояснений.Индексы.Добавить("Родитель");
	
	Возврат ТаблицаПояснений;
	
КонецФункции

Функция СформироватьТаблицуСгруппированныхПояснений() Экспорт
	
	ТаблицаПояснений = СформироватьТаблицуПоясненийКЭтапам();
	
	ТаблицаПояснений.Колонки.Добавить("Коды",				Новый ОписаниеТипов("Массив"));
	ТаблицаПояснений.Колонки.Добавить("КоличествоОбъектов", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаПояснений;
	
КонецФункции

Функция ДобавитьСгруппированноеПояснение(СтруктураДанных, СтрокаПояснения, КоличествоОбъектов = 0)
	
	ЕстьСгруппированнаяСтрока = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПояснения.ДействиеВыполнить)
	 И ЗначениеЗаполнено(СтрокаПояснения.ДействиеПодробнее)
	 И СтрокаПояснения.ДействиеПодробнее.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьРезультатыПроверки Тогда
	 
		СтруктураПоиска = Новый Структура("Наименование, Состояние, Родитель, Период");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПояснения);
		
		СгруппированныеСтроки = СтруктураДанных.ТаблицаСгруппированныхПояснений.НайтиСтроки(СтруктураПоиска);
			
		
		Для Каждого ТекСтр Из СгруппированныеСтроки Цикл
			
			Если ЗначениеЗаполнено(СтрокаПояснения.ДействиеВыполнить)
			 ИЛИ НЕ ЗначениеЗаполнено(ТекСтр.ДействиеПодробнее)
	 		 ИЛИ ТекСтр.ДействиеПодробнее.ВидДействия <> Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьРезультатыПроверки
			 ИЛИ ТекСтр.ДействиеПодробнее.ПараметрыФормы.Проверка <> СтрокаПояснения.ДействиеПодробнее.ПараметрыФормы.Проверка
			 ИЛИ ТекСтр.ДействиеПодробнее.ПараметрыФормы.КонтекстВыполнения <> СтрокаПояснения.ДействиеПодробнее.ПараметрыФормы.КонтекстВыполнения Тогда
				
				Продолжить; // такие не группируем
				
			ИначеЕсли ТипЗнч(ТекСтр.РасшифровкаОшибки) = Тип("Структура")
			 И ТипЗнч(СтрокаПояснения.РасшифровкаОшибки) = Тип("Структура") Тогда
				
				ОбщиеКлючи = ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
					ТекСтр.РасшифровкаОшибки,
					СтрокаПояснения.РасшифровкаОшибки);
				
				Если ОбщиеКлючи.Количество() <> ТекСтр.РасшифровкаОшибки.Количество()
				 ИЛИ ОбщиеКлючи.Количество() <> СтрокаПояснения.РасшифровкаОшибки.Количество() Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекСтр.РасшифровкаОшибки, СтрокаПояснения.РасшифровкаОшибки) Тогда
					Продолжить;
				КонецЕсли;
				
				// Нашли подходящую строку.
				
			ИначеЕсли ТипЗнч(ТекСтр.РасшифровкаОшибки) = Тип("Структура")
			 ИЛИ ТипЗнч(СтрокаПояснения.РасшифровкаОшибки) = Тип("Структура") Тогда
			 
				Продолжить; // структура только в одной из строк
				
			ИначеЕсли ТекСтр.РасшифровкаОшибки <> СтрокаПояснения.РасшифровкаОшибки Тогда
				
				Продолжить; // расшифровки не совпадают
				
			КонецЕсли;
			
			ЕстьСгруппированнаяСтрока = Истина;
			Прервать;
			
		КонецЦикла;		
		
	КонецЕсли;
	
	Если НЕ ЕстьСгруппированнаяСтрока Тогда
		
		ТекСтр = СтруктураДанных.ТаблицаСгруппированныхПояснений.Добавить();
		
		ЗаполнитьЗначенияСвойств(ТекСтр, СтрокаПояснения, , "Код, Организация, ИдентификаторСтроки");
		
		ТекСтр.Код 		   = СтрокаПояснения.Код;
		ТекСтр.Коды 	   = Новый Массив;
		ТекСтр.Организация = Новый Массив;
		
	Иначе
		
		ТекСтр.Код = СокрЛП(Новый УникальныйИдентификатор);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ТекСтр.ДействиеПодробнее.ПараметрыФормы.Проблема,
			СтрокаПояснения.ДействиеПодробнее.ПараметрыФормы.Проблема,
			Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ТекСтр.Коды,
		ОбщегоНазначенияУТКлиентСервер.Массив(СтрокаПояснения.Код),
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ТекСтр.Организация,
		ОбщегоНазначенияУТКлиентСервер.Массив(СтрокаПояснения.Организация),
		Истина);
	
	ТекСтр.КоличествоОбъектов = ТекСтр.КоличествоОбъектов + КоличествоОбъектов;
	
КонецФункции

Функция СформироватьОписаниеДанныхЭтапа(Код) Экспорт
	
	ТаблицаЭтапы = СформироватьЭтапыЗакрытияМесяца();
	СтрокаЭтапа  = ТаблицаЭтапы.Найти(Код, "Код"); 
	
	Если СтрокаЭтапа = Неопределено Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не найдено описание операции закрытия месяца ""%1""'"),
			СокрЛП(Код));
			
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ДанныеЭтапа = ПреобразоватьСтрокуТаблицыВСтруктуру(СтрокаЭтапа);
	
	Возврат ДанныеЭтапа;
	
КонецФункции

Функция ДобавитьЭтапВТаблицу(ТаблицаЭтапов, Родитель, Код, ОперативныйУчет = Истина, РегламентированныйУчет = Ложь, МеждународныйУчет = Ложь)
	
	НоваяСтрока = ТаблицаЭтапов.Добавить();
	
	НоваяСтрока.Родитель 		  		= Родитель;
	НоваяСтрока.Код 			  		= Код;
	НоваяСтрока.ОперативныйУчет 		= ОперативныйУчет;
	НоваяСтрока.РегламентированныйУчет  = РегламентированныйУчет;
	НоваяСтрока.МеждународныйУчет 		= МеждународныйУчет;
	
	Возврат НоваяСтрока;
	
КонецФункции


Функция СтруктураОписанияДействия()
	
	Описание = Новый Структура;
	
	Описание.Вставить("ВидДействия", 					  Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ПустаяСсылка());
	Описание.Вставить("Обработчик",  					  "");
	Описание.Вставить("ИмяФормы",    					  "");
	Описание.Вставить("НаКлиенте",   					  Ложь);
	Описание.Вставить("НаСервере",   					  Ложь);
	Описание.Вставить("ОткрыватьВместоЖР", 				  Ложь);
	Описание.Вставить("НеТребуетсяПриУспешномВыполнении", Ложь);
	
	Описание.Вставить("ПараметрыФормы", 				  Новый Структура);
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеДействия_СервернаяПроцедура(Обработчик)
	
	Описание = СтруктураОписанияДействия();
	
	Описание.Обработчик  = Обработчик;
	Описание.НаСервере   = Истина;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеДействия_ВыполнитьРасчет(Обработчик)
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ВыполнитьРасчет;
	Описание.Обработчик  = Обработчик;
	Описание.НаСервере   = Истина;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеДействия_ОткрытьРезультатыПроверки(Проверка = Неопределено, Проблема = Неопределено, КонтекстВыполнения = Неопределено)
	Перем ИмяФормы;
	
	Описание = СтруктураОписанияДействия();
	
	Если ЗначениеЗаполнено(Проверка) Тогда
		ИмяФормы = ЗакрытиеМесяцаСервер.ИмяФормыРасшифровкиРезультатовПроверки(Проверка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяФормы) Тогда
		ИмяФормы = Метаданные.Обработки.ОперацииЗакрытияМесяца.Формы.РезультатыПроверки.ПолноеИмя()
	КонецЕсли;
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьРезультатыПроверки;
	Описание.ИмяФормы    = ИмяФормы;
	Описание.НаКлиенте   = Истина;
	
	Описание.ПараметрыФормы.Вставить("Проверка", 		   Проверка);
	Описание.ПараметрыФормы.Вставить("Проблема", 		   ОбщегоНазначенияУТКлиентСервер.Массив(Проблема));
	Описание.ПараметрыФормы.Вставить("КонтекстВыполнения", КонтекстВыполнения);
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеДействия_ОткрытьФорму(ИмяФормы, ПараметрыВСтруктуреОтбор = Ложь) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьФорму;
	Описание.ИмяФормы    = ИмяФормы;
	Описание.НаКлиенте   = Истина;
	
	ПоляПараметровФормы = "Организация, МассивОрганизаций, ПериодРегистрации, Период, НачалоПериода, КонецПериода, ДатаОкончанияПериода";
	Если ПараметрыВСтруктуреОтбор Тогда
		Описание.ПараметрыФормы.Вставить("Отбор", Новый Структура(ПоляПараметровФормы));
	Иначе
		Описание.Вставить("ПараметрыФормы", Новый Структура(ПоляПараметровФормы));
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеДействия_ОткрытьЖурналРегистрации(РассчитываемыйЭтап) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьЖурналРегистрации;
	Описание.ИмяФормы    = Метаданные.Обработки.ЖурналРегистрации.Формы.ЖурналРегистрации.ПолноеИмя();
	Описание.НаКлиенте   = Истина;
	
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
	Описание.ПараметрыФормы.Вставить("ДатаНачала");
	Описание.ПараметрыФормы.Вставить("ДатаОкончания");
	Описание.ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	Описание.ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
	
	Описание.ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить(
		ЗакрытиеМесяцаСервер.ИмяСобытияЖурналаРегистрации(
			ЗакрытиеМесяцаСервер.ИмяЗначенияПеречисленияДляЭтапаРасчета(РассчитываемыйЭтап)));
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область ОписаниеГруппЭтапов

Функция СформироватьГруппыЭтаповЗакрытияМесяца() Экспорт
	
	ТаблицаГруппЭтапов = СформироватьТаблицуГруппЭтапов();
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыРучныеОперации();
	НоваяСтрока.Наименование = НСтр("ru='Данные операции требуется выполнить вручную'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыВзаиморасчеты();
	НоваяСтрока.Наименование = НСтр("ru='Взаиморасчеты и переоценка валютных средств'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыФормированиеЗатрат();
	НоваяСтрока.Наименование = НСтр("ru='Формирование затрат'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыПроизводственныеЗатраты();
	НоваяСтрока.Наименование = НСтр("ru='Распределение производственных затрат'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыСебестоимость();
	НоваяСтрока.Наименование = НСтр("ru='Расчет себестоимости'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыФормированиеФинансовогоРезультата();
	НоваяСтрока.Наименование = НСтр("ru='Формирование финансового результата'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыРегламентированныйУчет();
	НоваяСтрока.Наименование = НСтр("ru='Регламентированный учет'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыУчетПоУСН();
	НоваяСтрока.Наименование = НСтр("ru='Учет по УСН'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыМеждународныйУчет();
	НоваяСтрока.Наименование = НСтр("ru='Международный учет'");
	
	// Заполнение полей по умолчанию.
	ТаблицаГруппЭтапов.ЗаполнитьЗначения(Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено, "Состояние");
	
	Возврат ТаблицаГруппЭтапов;
	
КонецФункции


Функция ИдентификаторГруппыРучныеОперации() Экспорт
	Возврат "РучныеОперации";
КонецФункции

Функция ИдентификаторГруппыВзаиморасчеты() Экспорт
	Возврат "Взаиморасчеты";
КонецФункции

Функция ИдентификаторГруппыФормированиеЗатрат() Экспорт
	Возврат "ФормированиеЗатрат";
КонецФункции

Функция ИдентификаторГруппыПроизводственныеЗатраты() Экспорт
	Возврат "ПроизводственныеЗатраты";
КонецФункции

Функция ИдентификаторГруппыСебестоимость() Экспорт
	Возврат "Себестоимость";
КонецФункции

Функция ИдентификаторГруппыФормированиеФинансовогоРезультата() Экспорт
	Возврат "ФормированиеФинансовогоРезультата";
КонецФункции

Функция ИдентификаторГруппыРегламентированныйУчет() Экспорт
	Возврат "РегламентированныйУчет";
КонецФункции

Функция ИдентификаторГруппыУчетПоУСН() Экспорт
	Возврат "УчетПоУСН";
КонецФункции

Функция ИдентификаторГруппыМеждународныйУчет() Экспорт
	Возврат "МеждународныйУчет";
КонецФункции

#КонецОбласти

#Область СостояниеЭтапов

Функция ИнициализироватьСтруктуруПараметрыРасчета(Период, МассивОрганизаций = Неопределено, Организация = Неопределено) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("Организация", 		  Организация);
	ПараметрыРасчета.Вставить("МассивОрганизаций",
		?(ЗначениеЗаполнено(МассивОрганизаций),
			ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций),
			Справочники.Организации.ДоступныеОрганизации()));
	
	ПараметрыРасчета.Вставить("Период", 			  НачалоМесяца(Период));
	ПараметрыРасчета.Вставить("ПериодРегистрации", 	  ПараметрыРасчета.Период);
	ПараметрыРасчета.Вставить("НачалоПериода", 		  ПараметрыРасчета.Период);
	ПараметрыРасчета.Вставить("КонецПериода",  		  КонецМесяца(ПараметрыРасчета.Период));
	ПараметрыРасчета.Вставить("ДатаОкончанияПериода", КонецМесяца(ПараметрыРасчета.Период));
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(Период, МассивОрганизаций = Неопределено,
			Организация = Неопределено, СтруктураДанных = Неопределено) Экспорт
	
	ПараметрыРасчета = ИнициализироватьСтруктуруПараметрыРасчета(Период, МассивОрганизаций, Организация);
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанных) Тогда // еще не инициализирована
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ТаблицаГруппыЭтапов",    			СформироватьГруппыЭтаповЗакрытияМесяца());
		СтруктураДанных.Вставить("ТаблицаЭтапы", 		   			СформироватьЭтапыЗакрытияМесяца());
		СтруктураДанных.Вставить("ТаблицаПоясненияЭтапов", 			СформироватьТаблицуПоясненийКЭтапам());
		СтруктураДанных.Вставить("ТаблицаСгруппированныхПояснений", СформироватьТаблицуСгруппированныхПояснений());
	КонецЕсли;
	
	СтруктураДанных.Вставить("ПараметрыРасчета",   			Новый ФиксированнаяСтруктура(ПараметрыРасчета));
	СтруктураДанных.Вставить("МесяцЗакрытУспешно", 			Истина);
	СтруктураДанных.Вставить("ИзмененияЗапрещены", 			Ложь);
	СтруктураДанных.Вставить("ПоясненияКЗапретуИзменений", 	"");
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(СтруктураДанных, АдресХранилища = "",
			ОбновитьТолькоОдинЭтап = Неопределено, ДоступностьВидовУчета = Неопределено) Экспорт
	
	ПараметрыЗапуска = Новый Структура;
	
	ПараметрыЗапуска.Вставить("СтруктураДанных", 					 СтруктураДанных);
	ПараметрыЗапуска.Вставить("АдресХранилища", 					 АдресХранилища);
	
	ПараметрыЗапуска.Вставить("ПроверятьДатуЗапрета", 				 Ложь);
	ПараметрыЗапуска.Вставить("ОбновлятьКэшиРегламентныхЗаданий", 	 Ложь); // нужно для формы закрытия месяца
	ПараметрыЗапуска.Вставить("ОбновлятьСписокПроверок", 	 		 Ложь); // нужно для формы закрытия месяца
	
	ПараметрыЗапуска.Вставить("ОбновитьТолькоОдинЭтап", 			 ОбновитьТолькоОдинЭтап);
	ПараметрыЗапуска.Вставить("ВыполнятьПроверкиДоЭтапа", 			 Ложь);
	ПараметрыЗапуска.Вставить("ВыполнятьПроверкиПослеЭтапа", 		 Ложь);
	ПараметрыЗапуска.Вставить("УчетСостоянияПредшествующихЭтапов", 	 Истина);
	
	Если ЗначениеЗаполнено(ДоступностьВидовУчета) Тогда
		ПараметрыЗапуска.Вставить("ОперативныйУчет", 		 		 ДоступностьВидовУчета.ОперативныйУчет);
		ПараметрыЗапуска.Вставить("РегламентированныйУчет", 	 	 ДоступностьВидовУчета.РегламентированныйУчет);
		ПараметрыЗапуска.Вставить("МеждународныйУчет", 	 			 ДоступностьВидовУчета.МеждународныйУчет);
	Иначе
		ПараметрыЗапуска.Вставить("ОперативныйУчет", 		 		 Истина);
		ПараметрыЗапуска.Вставить("РегламентированныйУчет", 	 	 Истина);
		ПараметрыЗапуска.Вставить("МеждународныйУчет", 	 			 Истина);
	КонецЕсли;
	
	Возврат ПараметрыЗапуска;
	
КонецФункции

Функция ИнициализироватьПараметрыОбработчикаЭтапа(СтруктураДанных, СтрокаТаблицыЭтапов, ОписаниеВидовУчета = Неопределено)
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеЭтапа",	   		ПреобразоватьСтрокуТаблицыВСтруктуру(СтрокаТаблицыЭтапов));
	ПараметрыОбработчика.Вставить("ПараметрыРасчета",  		СтруктураДанных.ПараметрыРасчета);
	ПараметрыОбработчика.Вставить("ТаблицаПояснения",  		СформироватьТаблицуПоясненийКЭтапам());
	
	Если ЗначениеЗаполнено(ОписаниеВидовУчета) Тогда
		ПараметрыОбработчика.Вставить("ОперативныйУчет", 	   	ОписаниеВидовУчета.ОперативныйУчет);
		ПараметрыОбработчика.Вставить("РегламентированныйУчет", ОписаниеВидовУчета.РегламентированныйУчет);
		ПараметрыОбработчика.Вставить("МеждународныйУчет", 		ОписаниеВидовУчета.МеждународныйУчет);
	Иначе
		ПараметрыОбработчика.Вставить("ОперативныйУчет", 	   	Истина);
		ПараметрыОбработчика.Вставить("РегламентированныйУчет", Истина);
		ПараметрыОбработчика.Вставить("МеждународныйУчет", 		Истина);
	КонецЕсли;
	
	Возврат ПараметрыОбработчика;
	
КонецФункции

Процедура ЗаполнитьСостоянияЭтапов(ПараметрыЗапуска) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекстДлительностьЭтапов = "";
	СтруктураДанных = ПараметрыЗапуска.СтруктураДанных;
	
	Если ПараметрыЗапуска.ОбновлятьКэшиРегламентныхЗаданий Тогда
		РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ОбновитьКэшСвойстваИспользованиеРегламентногоЗадания();
	КонецЕсли;
	
	Если ПараметрыЗапуска.ОбновлятьСписокПроверок Тогда
		АудитСостоянияСистемы.ЗаполнитьСправочникПроверокСостоянияСистемы(
			Тип("ПеречислениеСсылка.ОперацииЗакрытияМесяца"),
			Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапуска.ОбновитьТолькоОдинЭтап) Тогда
		СтрокиЭтапов = СтруктураДанных.ТаблицаЭтапы.НайтиСтроки(Новый Структура("Код", ПараметрыЗапуска.ОбновитьТолькоОдинЭтап));
	Иначе
		СтрокиЭтапов = СтруктураДанных.ТаблицаЭтапы;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из СтрокиЭтапов Цикл
		
		ВремяНачалаЭтапа = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.СостояниеПоУмолчанию) Тогда
			ТекущаяСтрока.Состояние = ТекущаяСтрока.СостояниеПоУмолчанию;
		Иначе
			ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено;
		КонецЕсли;
		
		ТекущаяСтрока.ВыполненыПредшествующиеЭтапы = Истина;
		ТекущаяСтрока.ДатаНачалаРасчета = Неопределено;
		ТекущаяСтрока.ДополнительныеСвойства.Очистить();
		
		ПараметрыОбработчика = ИнициализироватьПараметрыОбработчикаЭтапа(СтруктураДанных, ТекущаяСтрока, ПараметрыЗапуска);
		
		// Определение состояния выполнения этапа.
		ПроверитьИспользованиеЭтапа(ПараметрыОбработчика);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыОбработчика.ДанныеЭтапа, "Состояние, ДатаНачалаРасчета, ДополнительныеСвойства");
		
		Если ПараметрыЗапуска.УчетСостоянияПредшествующихЭтапов Тогда
			// Проверим, требуется ли расчет этапа в зависимости от состояний предшествующих этапов.
			ПроверитьПредшествующиеЭтапы(СтруктураДанных, ТекущаяСтрока, ПараметрыОбработчика);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыОбработчика.ДанныеЭтапа, "Состояние");
		КонецЕсли;
		
		// Выполним проверки состояния учета.
		ОтборМоментыЗапускаПроверки = Новый Массив;
		
		Если ПараметрыЗапуска.ВыполнятьПроверкиДоЭтапа Тогда
			ОтборМоментыЗапускаПроверки.Добавить(Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета);
			ОтборМоментыЗапускаПроверки.Добавить(Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета);
	    КонецЕсли;
		
		Если ПараметрыЗапуска.ВыполнятьПроверкиПослеЭтапа Тогда
			ОтборМоментыЗапускаПроверки.Добавить(Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета);
			ОтборМоментыЗапускаПроверки.Добавить(Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета);
		КонецЕсли;
		
		ВыполнитьПроверкиЭтапа(СтруктураДанных, ТекущаяСтрока, ПараметрыОбработчика, ОтборМоментыЗапускаПроверки);
		
		// Заполним результаты выполнения проверок состояния учета.
		ОпределитьСостояниеИЗаполнитьПоясненияКЭтапу(СтруктураДанных, ТекущаяСтрока, ПараметрыОбработчика);
		
		// Внесем изменения в оформление этапа.
		НастроитьОформлениеЭтапа(ПараметрыОбработчика);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыОбработчика.ДанныеЭтапа, "Наименование, ТекстВыполнить, ТекстПодробнее, ЕстьЗаписиЖР");
		
		Если ПараметрыОбработчика.ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыОбработчика.ДанныеЭтапа, "Состояние");
			ОпределитьСостояниеИЗаполнитьПоясненияКЭтапу(СтруктураДанных, ТекущаяСтрока, ПараметрыОбработчика);
		КонецЕсли;
		
		ВозможнаяГиперссылкаДляСостояния = 
			ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
			ИЛИ ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками
			ИЛИ (ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно
				 И НЕ ТекущаяСтрока.ВыполняетсяВручную);
		
		ТекущаяСтрока.ГиперссылкаВыполнить = ВозможнаяГиперссылкаДляСостояния
			И ЗначениеЗаполнено(ТекущаяСтрока.ДействиеВыполнить) И НЕ ПустаяСтрока(ТекущаяСтрока.ТекстВыполнить);
		
		ТекущаяСтрока.ГиперссылкаПодробнее = ВозможнаяГиперссылкаДляСостояния
			И (НЕ ТекущаяСтрока.ВыполняетсяВручную ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ДействиеПодробнее))
			И НЕ ПустаяСтрока(ТекущаяСтрока.ТекстПодробнее);
		
		Если ПараметрыОбработчика.Свойство("МенеджерВременныхТаблиц") Тогда
			ПараметрыОбработчика.МенеджерВременныхТаблиц.Закрыть();
			ПараметрыОбработчика.Удалить("МенеджерВременныхТаблиц");
		КонецЕсли;
		
		ВремяОкончанияЭтапа = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ТекстДлительностьЭтапов = ТекстДлительностьЭтапов + ?(ТекстДлительностьЭтапов = "", "", "
			|") + ТекущаяСтрока.Наименование + ": " 
			+ ПротоколРасчетаПартийИСебестоимости.ПредставлениеВремени((ВремяОкончанияЭтапа - ВремяНачалаЭтапа)/1000);
		
	КонецЦикла;
	
	// Заполним свойства групп этапов.
	ЗаполнитьСвойстваГруппЭтапов(СтруктураДанных);
	
	// Проверим даты запрета изменения.
	Если ПараметрыЗапуска.ПроверятьДатуЗапрета Тогда
		ПроверитьДатыЗапретаИзменения(СтруктураДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища) Тогда
		
		// Запущено как фоновое задание - вернем данные не через параметр, а через временное хранилище.
		ПоместитьВоВременноеХранилище(СтруктураДанных, ПараметрыЗапуска.АдресХранилища);
	
		ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ТекстДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Время формирования списка: %1
				|Период: %2
				|Организации: %3'"),
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеВремени((ВремяОкончания - ВремяНачала)/1000),
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(СтруктураДанных.ПараметрыРасчета.ПериодРегистрации),
			УниверсальныеМеханизмыПартийИСебестоимости.ПредставлениеОрганизаций(СтруктураДанных.ПараметрыРасчета.МассивОрганизаций, ", "));
			
		ТекстДляЖурнала = ТекстДляЖурнала + "
			|
			|" + ТекстДлительностьЭтапов;
		
		ЗаписьЖурналаРегистрации(
			ЗакрытиеМесяцаСервер.ИмяСобытияЖурналаРегистрации(НСтр("ru = 'Формировании списка операций'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			ТекстДляЖурнала);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИспользованиеЭтапа(ПараметрыОбработчика) Экспорт
	
	Если ПараметрыОбработчика.Свойство("ОперативныйУчет")
	 И ПараметрыОбработчика.Свойство("РегламентированныйУчет")
	 И ПараметрыОбработчика.Свойство("МеждународныйУчет") Тогда
		
		// Вид учета этапа должен быть доступен в Форме обработки.
		ЭтапДоступен = (ПараметрыОбработчика.ДанныеЭтапа.ОперативныйУчет И ПараметрыОбработчика.ОперативныйУчет)
		 ИЛИ (ПараметрыОбработчика.ДанныеЭтапа.РегламентированныйУчет И ПараметрыОбработчика.РегламентированныйУчет)
		 ИЛИ (ПараметрыОбработчика.ДанныеЭтапа.МеждународныйУчет И ПараметрыОбработчика.МеждународныйУчет);
		
		Если НЕ ЭтапДоступен Тогда
		 
			ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
				ПараметрыОбработчика,
				НСтр("ru='Данный вид учета недоступен.'"));
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбработчика.ДанныеЭтапа.ДействиеИспользование) Тогда
		Возврат;
	КонецЕсли;
	
	// Выполним обработчик проверки использования этапа.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрыОбработчика);
	
	Попытка
		
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(
			ПараметрыОбработчика.ДанныеЭтапа.ДействиеИспользование.Обработчик,
			МассивПараметров);
		
	Исключение
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При определении состояния операции %1 произошла ошибка:
				|%2'"),
			ПараметрыОбработчика.ДанныеЭтапа.Наименование,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьПредшествующиеЭтапы(СтруктураДанных, ТекущаяСтрока, ПараметрыОбработчика)
	
	Если ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		Возврат;
	КонецЕсли;
	
	ИндексТекущейСтроки = СтруктураДанных.ТаблицаЭтапы.Индекс(ТекущаяСтрока);
	
	Для Каждого ПредшествующийЭтап Из ТекущаяСтрока.ПредшествующиеЭтапы Цикл
		
		СтрокаПредшествующегоЭтапа = СтруктураДанных.ТаблицаЭтапы.Найти(ПредшествующийЭтап, "Код");
		
		Если СтруктураДанных.ТаблицаЭтапы.Индекс(СтрокаПредшествующегоЭтапа) >= ИндексТекущейСтроки Тогда
			
			ТекстОшибки = НСтр("ru='Порядок выполнения операций ""%1"" и ""%2"" не совпадает с настройками взаимозависимости операций.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				ТекущаяСтрока.Наименование,
				СтрокаПредшествующегоЭтапа.Наименование);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
			
		Если СтрокаПредшествующегоЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		 ИЛИ СтрокаПредшествующегоЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций
		 ИЛИ СтрокаПредшествующегоЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено Тогда
			
			// Не выполнен предшествующий этап - после его расчета надо будет рассчитать текущий этап.
			ТекущаяСтрока.ВыполненыПредшествующиеЭтапы = Ложь;
			
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не выполнена предшествующая операция ""%1""'"),
					СтрокаПредшествующегоЭтапа.Наименование),
					,
					,
					Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПроверкиЭтапа(СтруктураДанных, ТекущаяСтрока, ПараметрыОбработчика, ОтборМоментыЗапускаПроверки)
	
	Если НЕ ЗначениеЗаполнено(ОтборМоментыЗапускаПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПроверок = АудитСостоянияСистемы.ТаблицаПроверокПоКонтексту(
		ТекущаяСтрока.Код,
		ОтборМоментыЗапускаПроверки,
		Ложь);
		
	АудитСостоянияСистемы.ОчиститьРезультатыПроверок(
		ТаблицаПроверок.ВыгрузитьКолонку("Проверка"),
		СтруктураДанных.ПараметрыРасчета.МассивОрганизаций,
		НачалоМесяца(СтруктураДанных.ПараметрыРасчета.ПериодРегистрации),
		КонецМесяца(СтруктураДанных.ПараметрыРасчета.ПериодРегистрации));
	
	Если ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыПроверок = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДанных.ПараметрыРасчета);
	Если ПараметрыОбработчика.Свойство("МенеджерВременныхТаблиц") Тогда
		ДополнительныеПараметрыПроверок.Вставить("МенеджерВременныхТаблиц", ПараметрыОбработчика.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Для Каждого ТекущаяПроверка Из ТаблицаПроверок Цикл
		
		РезультатПроверки = АудитСостоянияСистемы.ВыполнитьПроверкуСостоянияСистемы(
			ТекущаяПроверка.Проверка,
			ДополнительныеПараметрыПроверок);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьСостояниеИЗаполнитьПоясненияКЭтапу(СтруктураДанных, ТекущаяСтрока, ПараметрыОбработчика)
	
	ЕстьОшибки = Ложь;
	ЕстьПредупреждения = Ложь;
	
	// Удалим старые пояснения к этапу.
	СтарыеПояснения = СтруктураДанных.ТаблицаПоясненияЭтапов.НайтиСтроки(Новый Структура("Родитель", ТекущаяСтрока.Код));
	Для Каждого СтрокаПояснения Из СтарыеПояснения Цикл
		СтруктураДанных.ТаблицаПоясненияЭтапов.Удалить(СтрокаПояснения);
	КонецЦикла;
	
	СтарыеПояснения = СтруктураДанных.ТаблицаСгруппированныхПояснений.НайтиСтроки(Новый Структура("Родитель", ТекущаяСтрока.Код));
	Для Каждого СтрокаПояснения Из СтарыеПояснения Цикл
		СтруктураДанных.ТаблицаСгруппированныхПояснений.Удалить(СтрокаПояснения);
	КонецЦикла;
	
	КоличествоПояснений = СтруктураДанных.ТаблицаСгруппированныхПояснений.Количество();
	
	// Перенесем новые пояснения к этапу в общую таблицу пояснений.
	Для Каждого СтрокаПояснения Из ПараметрыОбработчика.ТаблицаПояснения Цикл
		
		НовоеПояснение = СтруктураДанных.ТаблицаПоясненияЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеПояснение, СтрокаПояснения);
		
		НовоеПояснение.Родитель = ТекущаяСтрока.Код;
		
		Если НЕ ЗначениеЗаполнено(НовоеПояснение.Состояние) Тогда
			НовоеПояснение.Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация;
		КонецЕсли;
		
		НовоеПояснение.ГиперссылкаВыполнить =
			ЗначениеЗаполнено(НовоеПояснение.ДействиеВыполнить) И НЕ ПустаяСтрока(НовоеПояснение.ТекстВыполнить);
		
		НовоеПояснение.ГиперссылкаПодробнее =
			ЗначениеЗаполнено(НовоеПояснение.ДействиеПодробнее) И НЕ ПустаяСтрока(НовоеПояснение.ТекстПодробнее);
		
		ДобавитьСгруппированноеПояснение(СтруктураДанных, НовоеПояснение);
		
	КонецЦикла;
	
	Если ПараметрыОбработчика.ТаблицаПояснения.Найти(Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка, "Состояние") <> Неопределено Тогда
		ЕстьОшибки = Истина;
	ИначеЕсли ПараметрыОбработчика.ТаблицаПояснения.Найти(Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение, "Состояние") <> Неопределено Тогда
		ЕстьПредупреждения = Истина;
	КонецЕсли;
	
	Если ТекущаяСтрока.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		
		// Добавим в общую таблицу пояснений результаты выполнения проверок.
		ТаблицаПроверок = АудитСостоянияСистемы.ТаблицаПроверокПоКонтексту(ТекущаяСтрока.Код);
		
		ТаблицаПроблем = АудитСостоянияСистемы.ТаблицаПроблемСостоянияСистемы(
			ТаблицаПроверок.ВыгрузитьКолонку("Проверка"),
			СтруктураДанных.ПараметрыРасчета.МассивОрганизаций,
			НачалоМесяца(СтруктураДанных.ПараметрыРасчета.ПериодРегистрации),
			КонецМесяца(СтруктураДанных.ПараметрыРасчета.ПериодРегистрации));
		
		Для Каждого СтрокаПояснения Из ТаблицаПроблем Цикл
			
			НовоеПояснение = СтруктураДанных.ТаблицаПоясненияЭтапов.Добавить();
			
			НовоеПояснение.Родитель 		 = ТекущаяСтрока.Код;
			НовоеПояснение.Код 				 = СтрокаПояснения.Проблема;
			НовоеПояснение.Состояние 		 = СтрокаПояснения.Важность;
			НовоеПояснение.Организация 		 = СтрокаПояснения.Организация;
			НовоеПояснение.Период 		 	 = СтрокаПояснения.ПроверяемыйПериод;
			НовоеПояснение.Наименование 	 = СтрокаПояснения.Представление;
			НовоеПояснение.ТекстПодробнее    = ЗакрытиеМесяцаСервер.ТекстПодробнееПоУмолчанию();
			НовоеПояснение.ДействиеПодробнее = ОписаниеДействия_ОткрытьРезультатыПроверки(
				СтрокаПояснения.Проверка,
				СтрокаПояснения.Проблема);
			
			НовоеПояснение.ГиперссылкаВыполнить = Ложь;
			НовоеПояснение.ГиперссылкаПодробнее = Истина;
			
			ДобавитьСгруппированноеПояснение(СтруктураДанных, НовоеПояснение, СтрокаПояснения.КоличествоОбъектов);
			
			ЕстьОшибки = ЕстьОшибки ИЛИ (СтрокаПояснения.Важность = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
			ЕстьПредупреждения = ЕстьПредупреждения ИЛИ (СтрокаПояснения.Важность = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение);
			
			// Подставим в наименование информацию о количестве проблем.
			НовоеПояснение.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 (%2 шт.)'"),
				НовоеПояснение.Наименование,
				СокрЛП(СтрокаПояснения.КоличествоОбъектов));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для НомерПояснения = КоличествоПояснений + 1 По СтруктураДанных.ТаблицаСгруппированныхПояснений.Количество() Цикл
		
		СтрокаПояснения = СтруктураДанных.ТаблицаСгруппированныхПояснений[НомерПояснения - 1];
		
		Если СтрокаПояснения.КоличествоОбъектов > 0 Тогда
			// Подставим в наименование информацию о количестве проблем.
			СтрокаПояснения.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 (%2 шт.)'"),
				СтрокаПояснения.Наименование,
				СокрЛП(СтрокаПояснения.КоличествоОбъектов));
		КонецЕсли;
		
	КонецЦикла;
	
	// Скорректируем состояние этапа.
	// Предварительно состояние уже может быть установлено при проверке использования этапа или проверке предшествующих этапов.
	Если ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
	 ИЛИ ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		// Эти состояния не меняем.
	ИначеЕсли ЕстьОшибки Тогда
		ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли ЕстьПредупреждения Тогда
		ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	ИначеЕсли ТекущаяСтрока.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.СостояниеПоУмолчанию) Тогда
			ТекущаяСтрока.Состояние = ТекущаяСтрока.СостояниеПоУмолчанию;
		ИначеЕсли ТекущаяСтрока.ВыполняетсяВручную Тогда
			ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		Иначе
			ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваГруппЭтапов(СтруктураДанных, СтрокиГрупп = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокиГрупп) Тогда  // верхний уровень дерева
		СтруктураДанных.МесяцЗакрытУспешно = Истина;
		СтрокиГрупп = СтруктураДанных.ТаблицаГруппыЭтапов.НайтиСтроки(Новый Структура("Родитель", ""));
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из СтрокиГрупп Цикл
		
		ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		
		СтрокиПодчиненных 	   = СтруктураДанных.ТаблицаЭтапы.НайтиСтроки(Новый Структура("Родитель", ТекущаяСтрока.Код));
		СтрокиПодчиненныхГрупп = СтруктураДанных.ТаблицаГруппыЭтапов.НайтиСтроки(Новый Структура("Родитель", ТекущаяСтрока.Код));
		
		Если ЗначениеЗаполнено(СтрокиПодчиненныхГрупп) Тогда
			// Определим состояние подчиненных групп.
			ЗаполнитьСвойстваГруппЭтапов(СтруктураДанных, СтрокиПодчиненныхГрупп);
		    // Добавим их в массив подчиненных элементов.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиПодчиненных, СтрокиПодчиненныхГрупп);
		КонецЕсли;
		
		ЕстьВыполненныеУспешно 	 = Ложь;
		ЕстьВыполненныеСОшибками = Ложь;
		ЕстьНеВыполненные 		 = Ложь;
		ЕстьНеОтключенные		 = Ложь;
		
		// В зависимости от состояний подчиненных элементов определим состояние текущей группы.
		Для Каждого ПодчиненнаяСтрока Из СтрокиПодчиненных Цикл
			
			Если (НЕ ПодчиненнаяСтрока.Отключено И НЕ ПодчиненнаяСтрока.ВыполняетсяВручную)
			 ИЛИ (ПодчиненнаяСтрока.ВыполняетсяВручную И ЗакрытиеМесяцаСервер.ТребуетсяПерерасчет(ПодчиненнаяСтрока)) Тогда
				ЕстьНеОтключенные = Истина;
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено
			 ИЛИ ПодчиненнаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций Тогда
				// Идет закрытие месяца.
				ТекущаяСтрока.Состояние = ПодчиненнаяСтрока.Состояние;
				СтруктураДанных.МесяцЗакрытУспешно = Ложь;
				Прервать;
			ИначеЕсли ПодчиненнаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
				ЕстьВыполненныеУспешно = Истина;
			ИначеЕсли ПодчиненнаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
				ЕстьВыполненныеСОшибками = Истина;
			ИначеЕсли ПодчиненнаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
				ЕстьНеВыполненные = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ТекущаяСтрока.Отключено = НЕ ЕстьНеОтключенные;
		
		Если ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			
			Если ЕстьНеВыполненные Тогда
				ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
				СтруктураДанных.МесяцЗакрытУспешно = Ложь;
			ИначеЕсли ЕстьВыполненныеСОшибками Тогда
				ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
				СтруктураДанных.МесяцЗакрытУспешно = Ложь;
			ИначеЕсли ЕстьВыполненныеУспешно Тогда
				ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Процедура предназначена для вызова извне механики закрытия месяца - из механизма расчета любого этапа.
//
Процедура ВыполнитьОперацииПодготовкиКРасчетуЭтапа(Этап, Период, МассивОрганизаций) Экспорт
	
	// Выполним проверки до расчета этапа.
	СтруктураДанных 	 = ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(Период, МассивОрганизаций);
	СтрокаТаблицыЭтапов  = СтруктураДанных.ТаблицаЭтапы.Найти(Этап, "Код");
	ПараметрыОбработчика = ИнициализироватьПараметрыОбработчикаЭтапа(СтруктураДанных, СтрокаТаблицыЭтапов);
	
	ОтборМоментыЗапускаПроверки = Новый Массив;
	ОтборМоментыЗапускаПроверки.Добавить(Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета);
	ОтборМоментыЗапускаПроверки.Добавить(Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета);
	
	ВыполнитьПроверкиЭтапа(СтруктураДанных, СтрокаТаблицыЭтапов, ПараметрыОбработчика, ОтборМоментыЗапускаПроверки);
	
	// Очистим ошибки, диагностированные при прошлом расчете.
	ПараметрыРасчета = ИнициализироватьСтруктуруПараметрыРасчета(
		НачалоМесяца(Период),
		ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
		
	ОчиститьРезультатыПроверокПередРасчетом(
		Этап,
		ПараметрыРасчета);
	
КонецПроцедуры

// Процедура предназначена для вызова извне механики закрытия месяца - из механизма расчета любого этапа.
//
Процедура ВыполнитьОперацииЗавершенияРасчетаЭтапа(Этап, Период, МассивОрганизаций) Экспорт
	
	// Выполним проверки после расчета этапа.
	СтруктураДанных 	 = ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(Период, МассивОрганизаций);
	СтрокаТаблицыЭтапов  = СтруктураДанных.ТаблицаЭтапы.Найти(Этап, "Код");
	ПараметрыОбработчика = ИнициализироватьПараметрыОбработчикаЭтапа(СтруктураДанных, СтрокаТаблицыЭтапов);
	
	ОтборМоментыЗапускаПроверки = Новый Массив;
	ОтборМоментыЗапускаПроверки.Добавить(Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета);
	ОтборМоментыЗапускаПроверки.Добавить(Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета);
	
	ВыполнитьПроверкиЭтапа(СтруктураДанных, СтрокаТаблицыЭтапов, ПараметрыОбработчика, ОтборМоментыЗапускаПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеЭтапов

Функция ПолучитьСведенияОВыполненииЭтапа(МассивОрганизаций, ПроверяемыйПериод, Операция) Экспорт
	
	Результат = Новый Структура("ДатаНачала, ДатаОкончания, БылиОшибки");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(Статистика.ДатаНачала), НЕОПРЕДЕЛЕНО) 		КАК ДатаНачала,
	|	ЕСТЬNULL(МАКСИМУМ(Статистика.ДатаОкончания), НЕОПРЕДЕЛЕНО) 	КАК ДатаОкончания,
	|	ЕСТЬNULL(МАКСИМУМ(Статистика.БылиОшибки), ЛОЖЬ) 		   	КАК БылиОшибки
	|ИЗ
	|	РегистрСведений.ВыполнениеОперацийЗакрытияМесяца КАК Статистика
	|ГДЕ
	|	Статистика.Организация В(&МассивОрганизаций)
	|	И Статистика.ПроверяемыйПериод = &ПроверяемыйПериод
	|	И Статистика.Операция = &Операция";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ПроверяемыйПериод", ПроверяемыйПериод);
	Запрос.УстановитьПараметр("Операция", 		   Операция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьОформлениеЭтапа(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Наименование = СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код); // по умолчанию
	
	Если ЗначениеЗаполнено(ПараметрыОбработчика.ДанныеЭтапа.ДействиеОформление) Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрыОбработчика);
		
		Попытка
			
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(
				ПараметрыОбработчика.ДанныеЭтапа.ДействиеОформление.Обработчик,
				МассивПараметров);
			
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При настройке отображения операции %1 произошла ошибка:
					|%2'"),
				ПараметрыОбработчика.ДанныеЭтапа.Наименование,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				ТекстОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Определим поведение при действии "Подробнее".
	Если НЕ ПараметрыОбработчика.ДанныеЭтапа.ВыполняетсяВручную Тогда
		
		ДействиеПодробнее = ПараметрыОбработчика.ДанныеЭтапа.ДействиеПодробнее;
		
		ТребуетсяГиперссылкаПодробнее = Ложь;
		ПараметрыОбработчика.ДанныеЭтапа.ЕстьЗаписиЖР = Ложь;
		
		Если ЗакрытиеМесяцаСервер.ТребуетсяПерерасчет(ПараметрыОбработчика.ДанныеЭтапа) Тогда
			
			Если ЗначениеЗаполнено(ДействиеПодробнее)
			 И ДействиеПодробнее.ОткрыватьВместоЖР Тогда
			 
				Если ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
					ТребуетсяГиперссылкаПодробнее =	НЕ ДействиеПодробнее.НеТребуетсяПриУспешномВыполнении;
				Иначе
					ТребуетсяГиперссылкаПодробнее = Неопределено; // текст устанавливается в обработчике оформления этапа
				КонецЕсли;
				
			Иначе
			
				СведенияОРасчете = ПолучитьСведенияОВыполненииЭтапа(
					ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ПараметрыОбработчика.ДанныеЭтапа.ЕстьЗаписиЖР = СведенияОРасчете.БылиОшибки;
				
				ТребуетсяГиперссылкаПодробнее =
					ПараметрыОбработчика.ДанныеЭтапа.ЕстьЗаписиЖР
				 	ИЛИ (ЗначениеЗаполнено(ДействиеПодробнее)
				 		И ДействиеПодробнее.ВидДействия <> Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьЖурналРегистрации
						И НЕ (ДействиеПодробнее.НеТребуетсяПриУспешномВыполнении
				 			И ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяГиперссылкаПодробнее = Неопределено Тогда
			// Текст уже установлен.
		ИначеЕсли ТребуетсяГиперссылкаПодробнее Тогда
			ПараметрыОбработчика.ДанныеЭтапа.ТекстПодробнее = ЗакрытиеМесяцаСервер.ТекстПодробнееПоУмолчанию();
		Иначе
			ПараметрыОбработчика.ДанныеЭтапа.ТекстПодробнее = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатыЗапретаИзменения(СтруктураДанных) Экспорт
	
	РазделыДляПроверки = Новый Массив;
	РазделыДляПроверки.Добавить("БухгалтерскийУчет");
	РазделыДляПроверки.Добавить("РегламентныеОперации");
	РазделыДляПроверки.Добавить("МеждународныйУчет");
	
	РезультатПроверки = УниверсальныеМеханизмыПартийИСебестоимости.ПроверитьДатуЗапретаИзмененияПоРазделамИОрганизациям(
		НачалоМесяца(СтруктураДанных.ПараметрыРасчета.ПериодРегистрации),
		РазделыДляПроверки,
		СтруктураДанных.ПараметрыРасчета.МассивОрганизаций);
	
	СтруктураДанных.Вставить("ИзмененияЗапрещены", 		   РезультатПроверки.ИзмененияЗапрещены);
	СтруктураДанных.Вставить("ПоясненияКЗапретуИзменений", РезультатПроверки.Пояснения);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетЭтапов

Функция ИнициализироватьСтруктуруСостоянияРасчетаЭтапов(СтруктураДанных, ПоследнийЭтапДляРасчета = Неопределено) Экспорт
	
	СостояниеРасчета = Новый Структура;
	СостояниеРасчета.Вставить("НомерТекущегоЭтапа", 	   -1);
	СостояниеРасчета.Вставить("НомерПредыдущегоЭтапа",     -1);
	СостояниеРасчета.Вставить("КоличествоЭтапов", 		   0);
	СостояниеРасчета.Вставить("ВремяНачала",    		   ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	СостояниеРасчета.Вставить("ПредставлениеЭтапа", 	   "");
	СостояниеРасчета.Вставить("ПоследнийЭтапДляРасчета",   ПоследнийЭтапДляРасчета);
	СостояниеРасчета.Вставить("ЭтапыКРасчету", 		   	   Новый Массив);
	
	Если ЗначениеЗаполнено(СтруктураДанных) Тогда
		
		РассчитываемыеЭтапы = СтруктураДанных.ТаблицаЭтапы.НайтиСтроки(Новый Структура("ВыполняетсяВручную", Ложь));
			
		Для Каждого ТекущаяСтрока Из РассчитываемыеЭтапы Цикл
			
			Если НЕ ЗначениеЗаполнено(СостояниеРасчета.ЭтапыКРасчету) Тогда
				
				// Расчет начнем с первого "проблемного" этапа.
				Если ЗакрытиеМесяцаСервер.ТребуетсяПерерасчет(ТекущаяСтрока) Тогда
					СостояниеРасчета.ЭтапыКРасчету.Добавить(ТекущаяСтрока.Код);
		 		КонецЕсли;
				
			Иначе
				// Любой из следующих этапов может потребоваться пересчитать из-за изменений, вызванным расчетом предыдущих этапов.
				СостояниеРасчета.ЭтапыКРасчету.Добавить(ТекущаяСтрока.Код);
			КонецЕсли;
			
			Если ТекущаяСтрока.Код = ПоследнийЭтапДляРасчета Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СостояниеРасчета.КоличествоЭтапов = СостояниеРасчета.ЭтапыКРасчету.Количество();
	СостояниеРасчета.Вставить("РасчетЗавершен", (СостояниеРасчета.КоличествоЭтапов = 0));
	
	Возврат СостояниеРасчета;
	
КонецФункции

Функция ИнициализироватьПараметрыЗапускаДляРасчетаЭтапов(СтруктураДанных, РассчитатьТолькоОдинЭтап,	ПоследнийЭтапДляРасчета,
			АдресХранилища = "", ДоступностьВидовУчета = Неопределено) Экспорт
	
	// Подготовим параметры запуска.
	ПараметрыЗапуска = Новый Структура;
	
	ПараметрыЗапуска.Вставить("СтруктураДанных", 		     СтруктураДанных);
	ПараметрыЗапуска.Вставить("АдресХранилища", 	 	     АдресХранилища);
	ПараметрыЗапуска.Вставить("РассчитатьТолькоОдинЭтап",    РассчитатьТолькоОдинЭтап);
	ПараметрыЗапуска.Вставить("ПроверятьСостояниеДоРасчета", НЕ ЗначениеЗаполнено(РассчитатьТолькоОдинЭтап));
	ПараметрыЗапуска.Вставить("ПоследнийЭтапДляРасчета", 	 ПоследнийЭтапДляРасчета);
	
	Если ЗначениеЗаполнено(ДоступностьВидовУчета) Тогда
		ПараметрыЗапуска.Вставить("ОперативныйУчет", 		 ДоступностьВидовУчета.ОперативныйУчет);
		ПараметрыЗапуска.Вставить("РегламентированныйУчет",  ДоступностьВидовУчета.РегламентированныйУчет);
		ПараметрыЗапуска.Вставить("МеждународныйУчет", 	 	 ДоступностьВидовУчета.МеждународныйУчет);
	Иначе
		ПараметрыЗапуска.Вставить("ОперативныйУчет", 		 Истина);
		ПараметрыЗапуска.Вставить("РегламентированныйУчет",  Истина);
		ПараметрыЗапуска.Вставить("МеждународныйУчет", 	 	 Истина);
	КонецЕсли;
	
	Возврат ПараметрыЗапуска;
	
КонецФункции

Процедура ВыполнитьРасчетЭтапов(ПараметрыЗапуска) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаЭтапы = ПараметрыЗапуска.СтруктураДанных.ТаблицаЭтапы;
	ПараметрыРасчета = ПараметрыЗапуска.СтруктураДанных.ПараметрыРасчета;
	
	НомерПоследнейСтрокиДляРасчета = ТаблицаЭтапы.Индекс(ТаблицаЭтапы.Найти(ПараметрыЗапуска.ПоследнийЭтапДляРасчета, "Код"));
	
	Если ЗначениеЗаполнено(ПараметрыЗапуска.РассчитатьТолькоОдинЭтап) Тогда
		НомерПервойСтроки = ТаблицаЭтапы.Индекс(ТаблицаЭтапы.Найти(ПараметрыЗапуска.РассчитатьТолькоОдинЭтап, "Код"));
		НомерПоследнейСтроки = НомерПервойСтроки;
	Иначе
		НомерПервойСтроки = 0;
		НомерПоследнейСтроки = НомерПоследнейСтрокиДляРасчета;
	КонецЕсли;
	
	Для НомерСтроки = НомерПервойСтроки По ТаблицаЭтапы.Количество() - 1 Цикл
		
		// Действие с текущей строкой.
		ВыполнениеПересчетаСтроки = (НомерСтроки <= НомерПоследнейСтроки);
		ПоискСледующейСтрокиТребующейПересчета = НЕ ВыполнениеПересчетаСтроки И (НомерСтроки <= НомерПоследнейСтрокиДляРасчета);
		АктуализацияСостоянияСтроки = НЕ ВыполнениеПересчетаСтроки И НЕ ПоискСледующейСтрокиТребующейПересчета И (НомерСтроки <= ТаблицаЭтапы.Количество() - 1);
		
		ТекущаяСтрока = ТаблицаЭтапы[НомерСтроки];
		
		// При необходимости сначала актуализируем состояние этапа.
		Если ПараметрыЗапуска.ПроверятьСостояниеДоРасчета
		 ИЛИ ПоискСледующейСтрокиТребующейПересчета ИЛИ АктуализацияСостоянияСтроки Тогда
			
			ПараметрыЗапускаОбновленияСостояния = ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(
				ПараметрыЗапуска.СтруктураДанных,
				,
				ТекущаяСтрока.Код,
				ПараметрыЗапуска);
			
			ПараметрыЗапускаОбновленияСостояния.ВыполнятьПроверкиДоЭтапа = Истина;
			
			ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
			
		КонецЕсли;
		
		Если АктуализацияСостоянияСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыполнениеПересчетаСтроки
		 ИЛИ (ПоискСледующейСтрокиТребующейПересчета 
		 	  И НЕ ЗакрытиеМесяцаСервер.ТребуетсяПерерасчет(ТекущаяСтрока)) Тогда
			  
			// Очистим результаты прошлого расчета этапа.
			ОчиститьРезультатыПроверокПередРасчетом(ТекущаяСтрока.Код, ПараметрыРасчета);
			
		КонецЕсли;
		
		Если ПоискСледующейСтрокиТребующейПересчета Тогда
			Если ЗакрытиеМесяцаСервер.ТребуетсяПерерасчет(ТекущаяСтрока) Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
	 	КонецЕсли;
		
		// Этап пересчитываем только если с ним есть проблемы.
		Если НЕ ЗакрытиеМесяцаСервер.ТребуетсяПерерасчет(ТекущаяСтрока) Тогда
			Продолжить;
	 	КонецЕсли;
	 	
		// Запустим обработчик выполнения расчета этапа.
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ДанныеЭтапа",	  ПреобразоватьСтрокуТаблицыВСтруктуру(ТекущаяСтрока));
		ПараметрыОбработчика.Вставить("ПараметрыРасчета", ПараметрыЗапуска.СтруктураДанных.ПараметрыРасчета);
		ПараметрыОбработчика.Вставить("ТаблицаПояснения", СформироватьТаблицуПоясненийКЭтапам());
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрыОбработчика);
		
		ОписаниеВыполненияЭтапа = Новый Структура;
		ОписаниеВыполненияЭтапа.Вставить("Операция",   ТекущаяСтрока.Код);
		ОписаниеВыполненияЭтапа.Вставить("ДатаНачала", ТекущаяДатаСеанса());
		
		НачалоРасчета 	  = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ЭтапРассчитан 	  = Истина;
		БылаОшибкаРасчета = Ложь;
		
		Попытка
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ДействиеВыполнить.Обработчик) Тогда
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(
					ТекущаяСтрока.ДействиеВыполнить.Обработчик,
					МассивПараметров);
			КонецЕсли;
			
		Исключение
			
			БылаОшибкаРасчета = Истина;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При выполнении операции ""%1"" произошла ошибка:
					|%2'"),
				СокрЛП(ТекущаяСтрока.Наименование),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Если СтрНайти(ТекстОшибки, СлужебныйСимвол_ИсключениеУжеОтработаноВЭтапеРасчета()) = 0 Тогда
				// Ошибка не была отработана при выполнении этапа.
				ЗакрытиеМесяцаСервер.ДобавитьОписаниеПроблемыВыполненияРасчета(ПараметрыОбработчика, ТекстОшибки);
			КонецЕсли;
			
		КонецПопытки;
		
		Если БылаОшибкаРасчета И ТранзакцияАктивна() Тогда
			// Если в методе расчета этапа по каким-то причинам не была закрыта транзакция, то сделаем это здесь,
			// чтобы гарантировать нормальное выполнение следующих этапов.
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Для Каждого ОписаниеОшибки Из ПараметрыОбработчика.ТаблицаПояснения Цикл
			
			ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
				ТекущаяСтрока.Код,
				?(ЗначениеЗаполнено(ОписаниеОшибки.Организация),
					ОписаниеОшибки.Организация,
					ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций),
				ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
				
			ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыРегистрации,
				ЗакрытиеМесяцаСервер.ШаблонТекстаПроблемыОшибкаВыполненияКода(),
				ОписаниеОшибки.Состояние,
				ОписаниеОшибки.Наименование,
				ОписаниеОшибки.РасшифровкаОшибки);
			
			Если НЕ ЗначениеЗаполнено(ОписаниеОшибки.Состояние)
			 ИЛИ ОписаниеОшибки.Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка Тогда
				ЭтапРассчитан = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		ОписаниеВыполненияЭтапа.Вставить("ДатаОкончания", ТекущаяДатаСеанса());
		ОписаниеВыполненияЭтапа.Вставить("Длительность",  ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоРасчета);
		
		ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ДатаКонца  = ТекущаяДатаСеанса();
		
		// Сохраним сведения о выполненном расчете.
		СохранитьСведенияОВыполненииЭтапа(ОписаниеВыполненияЭтапа, ПараметрыОбработчика.ПараметрыРасчета, НЕ ЭтапРассчитан);
		
		// Обновим состояние этапа после расчета.
		ПараметрыЗапускаОбновленияСостояния = ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(
			ПараметрыЗапуска.СтруктураДанных,
			,
			ТекущаяСтрока.Код,
			ПараметрыЗапуска);
		
		ПараметрыЗапускаОбновленияСостояния.ВыполнятьПроверкиПослеЭтапа = Истина; // ЭтапРассчитан
		
		ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища) Тогда
		
		// Запущено как фоновое задание - вернем данные не через параметр, а через временное хранилище.
		ПоместитьВоВременноеХранилище(ПараметрыЗапуска.СтруктураДанных, ПараметрыЗапуска.АдресХранилища);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРезультатыПроверокПередРасчетом(ЭтапРасчета, ПараметрыРасчета) Экспорт
	
	// Очистим результаты прошлого расчета этапа.
	ТаблицаПроверок = АудитСостоянияСистемы.ТаблицаПроверокПоКонтексту(
		ЭтапРасчета,
		Неопределено,
		Истина); // все контекстные проверки
		
	АудитСостоянияСистемы.ОчиститьРезультатыПроверок(
		ТаблицаПроверок.ВыгрузитьКолонку("Проверка"),
		ПараметрыРасчета.МассивОрганизаций,
		НачалоМесяца(ПараметрыРасчета.ПериодРегистрации),
		КонецМесяца(ПараметрыРасчета.ПериодРегистрации));
		
	ОтборМоментыЗапускаПроверки = Новый Массив;
	ОтборМоментыЗапускаПроверки.Добавить(Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета);
	
	ТаблицаПроверок = АудитСостоянияСистемы.ТаблицаПроверокПоКонтексту(
		ЭтапРасчета,
		ОтборМоментыЗапускаПроверки,
		Ложь); // и неконтекстные, выполняемые после расчета
		
	АудитСостоянияСистемы.ОчиститьРезультатыПроверок(
		ТаблицаПроверок.ВыгрузитьКолонку("Проверка"),
		ПараметрыРасчета.МассивОрганизаций,
		НачалоМесяца(ПараметрыРасчета.ПериодРегистрации),
		КонецМесяца(ПараметрыРасчета.ПериодРегистрации));
	
КонецПроцедуры

Процедура СохранитьСведенияОВыполненииЭтапа(ОписаниеВыполненияЭтапа, ПараметрыРасчета, БылиОшибки)
	
	Для Каждого ТекущаяОрганизация Из ПараметрыРасчета.МассивОрганизаций Цикл
		
		НаборЗаписей = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Организация.Установить(ТекущаяОрганизация);
		НаборЗаписей.Отбор.ПроверяемыйПериод.Установить(ПараметрыРасчета.ПериодРегистрации);
		НаборЗаписей.Отбор.Операция.Установить(ОписаниеВыполненияЭтапа.Операция);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ОписаниеВыполненияЭтапа);
		
		Запись.Организация 		 = ТекущаяОрганизация;
		Запись.ПроверяемыйПериод = ПараметрыРасчета.ПериодРегистрации;
		Запись.БылиОшибки 		 = БылиОшибки;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область БлокировкаПриОбновленииИБ

Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ() Экспорт
	
	ВходящиеДанные = Новый Соответствие;
	ВходящиеДанные.Вставить(Метаданные.Справочники.ПроверкиСостоянияСистемы);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ВыполнениеПроверокСостоянияСистемы);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПроблемыСостоянияСистемы);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ОбъектыПроблемСостоянияСистемы);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца);
	
	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(
		ВходящиеДанные,
		НСтр("ru='Закрытие месяца'"));
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция ПреобразоватьСтрокуТаблицыВСтруктуру(ТекущаяСтрока) Экспорт
	
	Результат = Новый Структура;
	
	Для Каждого Колонка Из ТекущаяСтрока.Владелец().Колонки Цикл
		Результат.Вставить(Колонка.Имя, ТекущаяСтрока[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СлужебныйСимвол_ИсключениеУжеОтработаноВЭтапеРасчета() Экспорт
	
	Возврат Символы.ПС + "#ИсключениеУжеЗафиксировано" + Символы.ПС;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
