
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбменДаннымиУТ.ВЭтомУзлеДоступноВыполнениеОперацийЗакрытияМесяца(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗамера = Производительность.НачатьЗамерВремени("Обработка.ОперацииЗакрытияМесяца.Команда.ОперацииЗакрытияМесяца");
	
	// Проверим окончание обновления ИБ.
	Обработки.ОперацииЗакрытияМесяца.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ();
	
	// Соберем системные настройки в структуру РежимРаботы.
	РежимРаботы = Новый Структура;

	РежимРаботы.Вставить("БазоваяВерсия", 				 ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	РежимРаботы.Вставить("УправлениеПредприятием",		 ПолучитьФункциональнуюОпцию("УправлениеПредприятием"));
	РежимРаботы.Вставить("КомплекснаяАвтоматизация",	 ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация"));
	РежимРаботы.Вставить("УправлениеТорговлей",			 ПолучитьФункциональнуюОпцию("УправлениеТорговлей"));
	РежимРаботы.Вставить("КонтекстноеОткрытиеФормы",  	 ЗначениеЗаполнено(Параметры.ПериодРегистрации));
	
	РежимРаботы.Вставить("ДоступностьВидовУчета", Новый Структура);
	РежимРаботы.ДоступностьВидовУчета.Вставить("ОперативныйУчет", Истина);
	РежимРаботы.ДоступностьВидовУчета.Вставить("РегламентированныйУчет",
	    ПолучитьФункциональнуюОпцию("УправлениеТорговлей")
		);
	РежимРаботы.ДоступностьВидовУчета.Вставить("МеждународныйУчет",
		Ложь
		);
	
	Если НЕ РежимРаботы.ДоступностьВидовУчета.ОперативныйУчет
	 И НЕ РежимРаботы.ДоступностьВидовУчета.РегламентированныйУчет
	 И НЕ РежимРаботы.ДоступностьВидовУчета.МеждународныйУчет Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Недостаточно прав на выполнение операций закрытия месяца.'"));
		
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// Заполним параметры формы по умолчанию.
	Если РежимРаботы.КонтекстноеОткрытиеФормы Тогда
		Объект.ПериодРегистрации = Параметры.ПериодРегистрации;
		Объект.Организация 		 = Параметры.Организация;
	Иначе
		Объект.ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
		Объект.Организация 		 = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	Объект.СкрыватьЭтапыСоСтатусомНеТребуется = Истина;
	Объект.СкрыватьЭтапыСоСтатусомВыполненоУспешно = Ложь;
	Объект.СкрыватьПоясненияКЭтапам = Ложь;
	Объект.АвтообновлениеПриЗакрытииПодчиненныхФорм = Истина;
	
	ХранилищеДанных = Новый ХранилищеЗначения(Неопределено);
	СостояниеРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруСостоянияРасчетаЭтапов(Неопределено);
	
	// Выполним настройку свойств элементов формы.
	НастроитьЭлементыПриИнициализацииФормы();
	
	Производительность.ЗакончитьЗамерВремени(ОписаниеЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимРаботы.КонтекстноеОткрытиеФормы Тогда
		Настройки.Вставить("Объект.ПериодРегистрации", Параметры.ПериодРегистрации);
		Настройки.Вставить("Объект.Организация", 	   Параметры.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьЭлементыПриИнициализацииФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДанныеФормыВФонеНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СкрыватьЭтапыСоСтатусомНеТребуется(Команда)
	
	Объект.СкрыватьЭтапыСоСтатусомНеТребуется = НЕ Объект.СкрыватьЭтапыСоСтатусомНеТребуется;
	
	НастроитьОтметкуКнопокНастроек(Объект, Элементы);
	
	ЗаполнитьФормуОбновленнымиДаннымиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьЭтапыСоСтатусомВыполненоУспешно(Команда)
	
	Объект.СкрыватьЭтапыСоСтатусомВыполненоУспешно = НЕ Объект.СкрыватьЭтапыСоСтатусомВыполненоУспешно;
	
	НастроитьОтметкуКнопокНастроек(Объект, Элементы);
	
	ЗаполнитьФормуОбновленнымиДаннымиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьПоясненияКЭтапам(Команда)
	
	Объект.СкрыватьПоясненияКЭтапам = НЕ Объект.СкрыватьПоясненияКЭтапам;
	
	НастроитьОтметкуКнопокНастроек(Объект, Элементы);
	
	ЗаполнитьФормуОбновленнымиДаннымиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеПриЗакрытииПодчиненныхФорм(Команда)
	
	Объект.АвтообновлениеПриЗакрытииПодчиненныхФорм = НЕ Объект.АвтообновлениеПриЗакрытииПодчиненныхФорм;
	
	НастроитьОтметкуКнопокНастроек(Объект, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПроверки(Команда)
	
	ОткрытьФорму(
		"Справочник.ПроверкиСостоянияСистемы.ФормаСписка",
		,
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСверкаДанныхПартионногоУчетаИСебестоимости(Команда)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Объект.Организация);
	ПараметрыОтчета.Вставить("Период",
		Новый СтандартныйПериод(НачалоМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.ПериодРегистрации)));
		
	ПараметрыОткрытияФормы = Новый Структура("Отбор, СформироватьПриОткрытии", ПараметрыОтчета, Истина);
	
	ОткрытьФорму(
		"Отчет.СверкаДанныхПартионногоУчетаИСебестоимости.ФормаОбъекта",
		ПараметрыОткрытияФормы,
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(Команда)
	
	ОбновитьДанныеФормыВФонеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсе(Команда)
	
	ОчиститьСообщения();
	
	Если ЗапуститьВыполнениеРасчета() Тогда
		УстановитьКартинкиСтатусаПриДлительнойОперации(Ложь);
		ПроверитьАктивностьФоновогоЗаданияРасчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьРасчетВФоне(Команда)
	
	ПрерватьРасчет = Истина;
	
	Элементы.ОстановитьРасчетВФоне.Доступность = Ложь; // повторно нажимать кнопку незачем
	
	ОстановитьФоновоеЗаданиеРасчета();
	ПроверитьАктивностьФоновогоЗаданияРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическоеЗакрытиеМесяца(Команда)
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ЗакрытиеФормыНастройкиАвтоматическогоЗакрытияМесяца", ЭтотОбъект);
	
	ОткрытьФорму(
		"РегистрСведений.РегламентныеЗаданияЗакрытияМесяца.Форма.Форма",
		Новый Структура("Организация", Объект.Организация),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор,
		,
		,
		ОбработчикЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКЗакрытиюМесяца(Команда)
	
	ОткрытьФорму(
		"РегистрСведений.ЗаданияКЗакрытиюМесяца.ФормаСписка",
		ПараметрыФормыРегистраЗаданий());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРасчетуСебестоимости(Команда)
	
	ОткрытьФорму(
		"РегистрСведений.ЗаданияКРасчетуСебестоимости.ФормаСписка",
		ПараметрыФормыРегистраЗаданий());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРаспределениюРасчетовСКлиентами(Команда)
	
	ОткрытьФорму(
		"РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ФормаСписка",
		ПараметрыФормыРегистраЗаданий());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРаспределениюРасчетовСПоставщиками(Команда)
	
	ОткрытьФорму(
		"РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.ФормаСписка",
		ПараметрыФормыРегистраЗаданий());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКПогашениюСтоимостиТМЦ(Команда)
	
	
	Возврат; // в УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРасчетуАмортизацииОС(Команда)
	
	
	Возврат; // в УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРасчетуАмортизацииНМА(Команда)
	
	
	Возврат; // в УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРасчетуСтоимостиВНА(Команда)
	
	
	Возврат; // в УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКФормированиюДвиженийПоВНА(Команда)
	
	
	Возврат; // в УТ обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормыВыбораПериода = Новый Структура("Значение, РежимВыбораПериода", Объект.ПериодРегистрации, "МЕСЯЦ");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		ПараметрыФормыВыбораПериода, 
		ЭтотОбъект, 
		ЭтотОбъект.УникальныйИдентификатор,
		,
		, 
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(
		Направление,
		СтандартнаяОбработка,
		Объект.ПериодРегистрации,
		ПредставлениеПериодаРегистрации);
	
	ОбновитьДанныеФормыВФонеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанныеФормыВФонеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	ОрганизацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭтаповВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаДереваЭтапов = ДеревоЭтапов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаДереваЭтапов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ДеревоЭтаповГиперссылкаВыполнить И НЕ ИзмененияЗапрещены Тогда
		ОбработатьНажатиеГиперссылки(СтрокаДереваЭтапов, Истина);
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ДеревоЭтаповГиперссылкаПодробнее Тогда
		ОбработатьНажатиеГиперссылки(СтрокаДереваЭтапов, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаСервере
Процедура НастроитьЭлементыПриИнициализацииФормы(ВыполняетсяЗагрузкаНастроек = Ложь)
	
	ПредставлениеПериодаРегистрации =
		ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРегистрации);
	
	Если НЕ ВыполняетсяЗагрузкаНастроек Тогда
		
		// Заполним список выбора организаций доступными пользователю организациями.
		СписокВыбора = Элементы.Организация.СписокВыбора;
		ДоступныеОрганизации = Справочники.Организации.ДоступныеОрганизации(Истина);
		СписокВыбора.ЗагрузитьЗначения(ДоступныеОрганизации);
		НаименованияОрганизаций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДоступныеОрганизации, "Наименование");
		Для каждого ЭлементСписка Из СписокВыбора Цикл
			ЭлементСписка.Представление = НаименованияОрганизаций.Получить(ЭлементСписка.Значение);
		КонецЦикла;
		СписокВыбора.СортироватьПоПредставлению();
		СписокВыбора.Вставить(0, Справочники.Организации.ПустаяСсылка(), НСтр("ru='<По всем организациям>'"));
		
		РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ЗаполнитьПризнакНаличияЗаданияУОрганизаций(СписокВыбора);
		
		// Настроим отображение элементов командной панели.
		Элементы.КнопкаНастроитьПроверки.Видимость =
			ПравоДоступа("Изменение", Метаданные.Справочники.ПроверкиСостоянияСистемы);
			
		БылВключенПартионныйУчет = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата(1,1,1));
		Элементы.КнопкаОтчетСверкаДанныхПартионногоУчетаИСебестоимости.Видимость =
		    ?(БылВключенПартионныйУчет = Неопределено, ЛОЖЬ, БылВключенПартионныйУчет)
			И ПравоДоступа("Просмотр", Метаданные.Отчеты.СверкаДанныхПартионногоУчетаИСебестоимости);
			
		// Настроим видимость команд открытия регистров заданий.
		Элементы.ФормаОткрытьЗаданияКЗакрытиюМесяца.Видимость =
			ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЗаданияКЗакрытиюМесяца);
		Элементы.ФормаОткрытьЗаданияКРасчетуСебестоимости.Видимость =
			ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЗаданияКРасчетуСебестоимости);
		Элементы.ФормаОткрытьЗаданияКРаспределениюРасчетовСКлиентами.Видимость =
			ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами);
		Элементы.ФормаОткрытьЗаданияКРаспределениюРасчетовСПоставщиками.Видимость =
			ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками);
		Элементы.ФормаОткрытьЗаданияКПогашениюСтоимостиТМЦ.Видимость =
		    Ложь // в УТ11
			;
		Элементы.ФормаОткрытьЗаданияКРасчетуАмортизацииОС.Видимость =
		    Ложь // в УТ11
			;
		Элементы.ФормаОткрытьЗаданияКРасчетуАмортизацииНМА.Видимость =
		    Ложь // в УТ11
			;
		Элементы.ФормаОткрытьЗаданияКРасчетуСтоимостиВНА.Видимость =
		    Ложь // в УТ11
			;
		Элементы.ФормаОткрытьЗаданияКФормированиюДвиженийПоВНА.Видимость =
		    Ложь // в УТ11
			;
		
		// Настроим форму в зависимости от наличия активных фоновых заданий.
		НастроитьЭлементыВЗависимостиОтНаличияФоновыхЗаданий();
		
	КонецЕсли;
	
	// Настроим отметки элементов командной панели.
	НастроитьОтметкуКнопокНастроек(Объект, Элементы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтметкуКнопокНастроек(Объект, Элементы)
	
	Элементы.КнопкаСкрыватьЭтапыСоСтатусомНеТребуется.Пометка 	    = Объект.СкрыватьЭтапыСоСтатусомНеТребуется;
	Элементы.КнопкаСкрыватьЭтапыСоСтатусомВыполненоУспешно.Пометка  = Объект.СкрыватьЭтапыСоСтатусомВыполненоУспешно;
	Элементы.КнопкаСкрыватьПоясненияКЭтапам.Пометка 		  	    = Объект.СкрыватьПоясненияКЭтапам;
	Элементы.КнопкаАвтообновлениеПриЗакрытииПодчиненныхФорм.Пометка = Объект.АвтообновлениеПриЗакрытииПодчиненныхФорм;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыВЗависимостиОтНаличияФоновыхЗаданий()
	
	Если НЕ СостояниеРасчета.РасчетЗавершен Тогда
		
		ИдетРасчет = Истина;
		ИдетОбновление = Ложь;
		
	Иначе
		
		ИдетРасчет = Ложь;
		СостояниеЗадания = ТекущееСостояниеФоновогоЗадания(ИдентификаторЗаданияОбновленияСостоянийЭтапов);
		ИдетОбновление = СостояниеЗадания.Активно;
		
		Если ИдетОбновление Тогда
			ПредставлениеРассчитываемогоЭтапа = "
				|" + СокрЛП(СостояниеЗадания.Наименование) + " ...";
		Иначе
			ПредставлениеРассчитываемогоЭтапа = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаПериодИОрганизация.Доступность 	  			= НЕ ИдетРасчет;
	Элементы.ПредставлениеРассчитываемогоЭтапа.Высота 			= ?(ИдетОбновление, 3, 1);
	Элементы.ГруппаОтменаРасчетаВФоне.Видимость 	  			= НЕ ИдетОбновление;
	Элементы.ГруппаВыполнениеРасчетаВФоне.Видимость   			= ИдетРасчет ИЛИ ИдетОбновление;
	Элементы.ОстановитьРасчетВФоне.Доступность   				= НЕ ПрерватьРасчет;
	Элементы.КнопкаВыполнитьЗакрытие.Доступность 	  			= НЕ ИдетРасчет И НЕ ИдетОбновление И НЕ ИзмененияЗапрещены;
	Элементы.КнопкаОбновитьФорму.Доступность 		  			= НЕ ИдетРасчет И НЕ ИдетОбновление;
	Элементы.ГруппаКнопокНастройкаОтображенияСтрок.Доступность 	= НЕ ИдетРасчет И НЕ ИдетОбновление;
	Элементы.ГруппаДеревоЭтапов.Доступность 				   	= НЕ ИдетРасчет И НЕ ИдетОбновление;
	
	Элементы.ДеревоЭтаповГиперссылкаВыполнить.Доступность		= НЕ ИдетРасчет И НЕ ИдетОбновление И НЕ ИзмененияЗапрещены;
	Элементы.ДеревоЭтаповГиперссылкаПодробнее.Доступность		= НЕ ИдетРасчет И НЕ ИдетОбновление;
	
	Если ЗначениеЗаполнено(ОбщаяДатаНачалаРасчета) И ОбщаяДатаНачалаРасчета < Объект.ПериодРегистрации Тогда
		
		Элементы.ПредставлениеПериодаРегистрации.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Требуется пересчет операций закрытия месяца начиная с периода %1'"),
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ОбщаяДатаНачалаРасчета));
			
	Иначе
		
		Элементы.ПредставлениеПериодаРегистрации.Подсказка = "";
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьДанныеФормыВФонеНаКлиенте()
	
	ОтключитьОбработчикОжидания("ПроверитьАктивностьФоновогоЗаданияОбновленияФормы");
	
	УстановитьКартинкиСтатусаПриДлительнойОперации(Истина);
	
	ЗапускУспешен = ЗапуститьОбновлениеДанныхФормыВФоне();
	
	Если ЗапускУспешен Тогда
		ПодключитьОбработчикОжидания("ПроверитьАктивностьФоновогоЗаданияОбновленияФормы", ИнтервалПроверкиФоновыхЗаданий(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьОбновлениеДанныхФормыВФоне()
	
	// Отменим старое задания обновления состояний, если оно еще активно.
	ОтменитьФоновоеЗадание(ИдентификаторЗаданияОбновленияСостоянийЭтапов);
	
	// Подготовим вспомогательные данные для запуска обновления состояний этапов.
	АдресХранилищаДляЗаданияОбновленияСостоянийЭтапов = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	
	МассивОрганизаций =	?(ЗначениеЗаполнено(Объект.Организация),
		ОбщегоНазначенияУТКлиентСервер.Массив(Объект.Организация),
		Элементы.Организация.СписокВыбора.ВыгрузитьЗначения());
	
	Если ЗначениеЗаполнено(МассивОрганизаций) И НЕ ЗначениеЗаполнено(МассивОрганизаций[0]) Тогда
		МассивОрганизаций.Удалить(0);
	КонецЕсли;		
	
	СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
		Объект.ПериодРегистрации,
		МассивОрганизаций,
		Объект.Организация,
		ХранилищеДанных.Получить());
		
	ПараметрыРасчета = СтруктураДанных.ПараметрыРасчета; // сохраним в данных формы
	
	ПараметрыЗапускаОбновленияСостояния = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(
		СтруктураДанных,
		АдресХранилищаДляЗаданияОбновленияСостоянийЭтапов,
		,
		РежимРаботы.ДоступностьВидовУчета);
	
	ПараметрыЗапускаОбновленияСостояния.ПроверятьДатуЗапрета 			  = Истина;
	ПараметрыЗапускаОбновленияСостояния.ОбновлятьКэшиРегламентныхЗаданий  = Истина;
	ПараметрыЗапускаОбновленияСостояния.ОбновлятьСписокПроверок  		  = НЕ СписокПроверокОбновлен;
	ПараметрыЗапускаОбновленияСостояния.ВыполнятьПроверкиДоЭтапа 		  = Истина;
	
	// Запустим обновление состояний.
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыЗапускаОбновленияСостояния);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить("Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Формирование списка операций закрытия месяца %1'"),
		ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(Объект.ПериодРегистрации));
	
	ЗаданиеОбновленияСостоянийЭтапов = ФоновыеЗадания.Выполнить(
		"ОбщегоНазначения.ВыполнитьМетодКонфигурации",
		ПараметрыЗадания,
		,
		НаименованиеЗадания);
	
	ИдентификаторЗаданияОбновленияСостоянийЭтапов = ЗаданиеОбновленияСостоянийЭтапов.УникальныйИдентификатор;
	
	// Настроим элементы формы.
	НастроитьЭлементыВЗависимостиОтНаличияФоновыхЗаданий();
	
	СписокПроверокОбновлен = Истина; // список проверок обновляем однократно, при открытии формы
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьАктивностьФоновогоЗаданияОбновленияФормы()
	
	Если ФоновоеЗаданиеАктивно(ИдентификаторЗаданияОбновленияСостоянийЭтапов) Тогда
		ПодключитьОбработчикОжидания("ПроверитьАктивностьФоновогоЗаданияОбновленияФормы", ИнтервалПроверкиФоновыхЗаданий(), Истина);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьФормуОбновленнымиДаннымиНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФормуОбновленнымиДаннымиНаКлиенте(ПолучитьДанныеИзФоновогоЗадания = Ложь)
	
	ТекстОшибки = ЗаполнитьФормуОбновленнымиДаннымиНаСервере(ПолучитьДанныеИзФоновогоЗадания);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Раскроем все уровни дерева.
	Для Каждого ТекущаяСтрока Из ДеревоЭтапов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоЭтапов.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор(), Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьФормуОбновленнымиДаннымиНаСервере(ПолучитьДанныеИзФоновогоЗадания = Ложь)
	
	ДеревоЭтапов.ПолучитьЭлементы().Очистить();
	ОбщаяДатаНачалаРасчета = Объект.ПериодРегистрации;
	
	// Получим данные, см. ОбновитьДанныеФормыВФоне() в модуле менеджера обработки.
	Если ПолучитьДанныеИзФоновогоЗадания Тогда
		СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилищаДляЗаданияОбновленияСостоянийЭтапов);
	Иначе
		СтруктураДанных = ХранилищеДанных.Получить();
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда // фоновое задание выполнено успешно
		
		// Заполним дерево группами этапов.
		ДобавитьСтрокиДереваИзТаблицы(
			СтруктураДанных.ТаблицаГруппыЭтапов,
			СтруктураДанных.ТаблицаГруппыЭтапов,
			"ЭтоГруппа");
		
		// Заполним дерево этапами.
		ДобавитьСтрокиДереваИзТаблицы(
			СтруктураДанных.ТаблицаЭтапы,
			СтруктураДанных.ТаблицаГруппыЭтапов,
			"ЭтоЭтап");
		
		// Заполним дерево пояснениями к этапам.
		ДобавитьСтрокиДереваИзТаблицы(
			СтруктураДанных.ТаблицаСгруппированныхПояснений,
			СтруктураДанных.ТаблицаЭтапы,
			"ЭтоПояснение");
		
		// Заполним сведения о закрытии месяца в целом, по периоду и организации.
		Если НЕ ПолучитьДанныеИзФоновогоЗадания Тогда
			Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСвойстваГруппЭтапов(СтруктураДанных);
		КонецЕсли;
		
		МесяцЗакрытУспешно 		   = СтруктураДанных.МесяцЗакрытУспешно;
		ИзмененияЗапрещены 		   = СтруктураДанных.ИзмененияЗапрещены;
		ПоясненияКЗапретуИзменений = СтруктураДанных.ПоясненияКЗапретуИзменений;
		
		// Обновим шапку формы.
		ЗаполнитьСостояниеЗакрытияМесяца();
		
	КонецЕсли;
	
	Если ПолучитьДанныеИзФоновогоЗадания Тогда
		
		// Настроим вид формы в зависимости от наличия активных фоновых заданий.
		НастроитьЭлементыВЗависимостиОтНаличияФоновыхЗаданий();
		
		// Заполним признак наличия регламентных заданий в списке выбора организаций.
		РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ЗаполнитьПризнакНаличияЗаданияУОрганизаций(
			Элементы.Организация.СписокВыбора);
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		
		// Вернем текст ошибки для вывода в форме.
		МесяцЗакрытУспешно = Неопределено;
		
		СостояниеЗадания = ТекущееСостояниеФоновогоЗадания(ИдентификаторЗаданияОбновленияСостоянийЭтапов);
		
		Если ЗначениеЗаполнено(СостояниеЗадания.ТекстОшибки) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При формировании списка операций закрытия месяца возникла ошибка:
					|%1.'"),
				СостояниеЗадания.ТекстОшибки);
			
		Иначе
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При формировании списка операций закрытия месяца возникла ошибка:
					|фоновое задание %1.'"),
				?(СостояниеЗадания.Отменено,
					НСтр("ru='отменено администратором'"),
					?(СостояниеЗадания.ЗавершеноАварийно,
						НСтр("ru='завершено аварийно'"),
						НСтр("ru='не найдено в списке заданий'"))));
			
		КонецЕсли;
		
		Возврат ТекстОшибки;
		
	КонецЕсли;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СтруктураДанных, Новый СжатиеДанных(9));
	
	Возврат "";
	
КонецФункции


&НаКлиенте
Процедура ПроверитьАктивностьФоновогоЗаданияРасчета()
	
	СостояниеЗадания = ТекущееСостояниеФоновогоЗадания(ИдентификаторЗаданияРасчетаЭтапов);
	
	Если ЗначениеЗаполнено(СостояниеЗадания.ТекстОшибки) Тогда
		
		ЗафиксироватьПроблемуАварийногоЗавершенияРасчета(СостояниеЗадания.ТекстОшибки);
		
	ИначеЕсли СостояниеЗадания.Отменено ИЛИ СостояниеЗадания.ЗавершеноАварийно ИЛИ СостояниеЗадания.НеНайдено Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Фоновое задание расчета %1.'"),
			?(СостояниеЗадания.Отменено,
				НСтр("ru='отменено администратором'"),
				?(СостояниеЗадания.ЗавершеноАварийно,
					НСтр("ru='завершено аварийно'"),
					НСтр("ru='не найдено в списке заданий'"))));
		
		ЗафиксироватьПроблемуАварийногоЗавершенияРасчета(ТекстОшибки);
		
	КонецЕсли;
	
	Если СостояниеЗадания.Активно // еще выполняется расчет этапа
	 ИЛИ ЗапуститьРасчетСледующегоЭтапаВФоне() Тогда // запущен расчет следующего этапа
	 
		ПредставлениеРассчитываемогоЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Выполняется операция ""%1""...'"),
			СостояниеРасчета.ПредставлениеЭтапа);
		
	 	ПодключитьОбработчикОжидания("ПроверитьАктивностьФоновогоЗаданияРасчета", ИнтервалПроверкиФоновыхЗаданий(), Истина);
		Возврат;
		
	КонецЕсли;
	
	Если ПрерватьРасчет Тогда
		
		// Расчет прерван.
		ОбновитьДанныеФормыВФонеНаКлиенте();
		
	Иначе
		
		// Расчет завершен.
		ЗаполнитьФормуОбновленнымиДаннымиНаКлиенте();
		
		НастроитьЭлементыВЗависимостиОтНаличияФоновыхЗаданий();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено Тогда
		
		Объект.ПериодРегистрации = ВыбранныйПериод;
		ПредставлениеПериодаРегистрации =
			ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРегистрации);
		
		ОбновитьДанныеФормыВФонеНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыНастройкиАвтоматическогоЗакрытияМесяца(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	// Заполним признак наличия регламентных заданий в списке выбора организаций.
	ЗакрытиеФормыНастройкиАвтоматическогоЗакрытияМесяцаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытиеФормыНастройкиАвтоматическогоЗакрытияМесяцаСервер()
	
	РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ЗаполнитьПризнакНаличияЗаданияУОрганизаций(Элементы.Организация.СписокВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ЭтапыРасчета

&НаСервере
Процедура УстановитьКартинкуСтатусаСтрокиДереваЭтапов(СтрокаДереваЭтапов)
	
	НомерКартинки = 0; // индекс коллекции общей картинки СтатусыВыполненияЭтаповЗакрытияМесяца
	
	Если ТипЗнч(СтрокаДереваЭтапов.Состояние) = Тип("ПеречислениеСсылка.ВариантыВажностиПроблемыСостоянияСистемы") Тогда
		
		Если СтрокаДереваЭтапов.Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация Тогда
			НомерКартинки = 5;
		ИначеЕсли СтрокаДереваЭтапов.Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение Тогда
			НомерКартинки = 2;
		ИначеЕсли СтрокаДереваЭтапов.Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка Тогда
			НомерКартинки = 3;
		ИначеЕсли СтрокаДереваЭтапов.Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ВажнаяИнформация Тогда
			НомерКартинки = 4;
		ИначеЕсли СтрокаДереваЭтапов.Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет Тогда
			НомерКартинки = 9;
		КонецЕсли;
		
	Иначе
		
		Если СтрокаДереваЭтапов.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			НомерКартинки = 10;
		ИначеЕсли СтрокаДереваЭтапов.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено Тогда
			НомерКартинки = 8;
		ИначеЕсли СтрокаДереваЭтапов.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций Тогда
			НомерКартинки = 6;
		ИначеЕсли СтрокаДереваЭтапов.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
			НомерКартинки = 2;
		ИначеЕсли СтрокаДереваЭтапов.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
			НомерКартинки = 1;
		ИначеЕсли СтрокаДереваЭтапов.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
			НомерКартинки = 3;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДереваЭтапов.КартинкаСтатуса = НомерКартинки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкиСтатусаПриДлительнойОперации(ВыполняетсяОбновлениеСостояний = Ложь, РодительСтрок = Неопределено)
	
	Если РодительСтрок = Неопределено Тогда
		РодительСтрок = ДеревоЭтапов;
	КонецЕсли;
	
	// Получим индекс коллекции общей картинки СтатусыВыполненияЭтаповЗакрытияМесяца.
	Если ВыполняетсяОбновлениеСостояний Тогда
		НомерКартинки = 8; 
	Иначе
		НомерКартинки = 6; // выполняется расчет
	КонецЕсли;
	
	Для Каждого ТекущаяСтрокаДерева Из РодительСтрок.ПолучитьЭлементы() Цикл
		
		ТекущаяСтрокаДерева.КартинкаСтатуса = НомерКартинки;
		
		УстановитьКартинкиСтатусаПриДлительнойОперации(ВыполняетсяОбновлениеСостояний, ТекущаяСтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеГиперссылки(СтрокаДереваЭтапов, НажатоДействиеВыполнить = Истина)
	
	Если СтрокаДереваЭтапов.ЭтоГруппа Тогда
		Возврат; // не поддерживается для групп
	КонецЕсли;
	
	ОписаниеДействия = ПолучитьОписаниеВыбранногоДействияДляВыполненияНаКлиенте(
		СтрокаДереваЭтапов.ЭтоЭтап,
		СтрокаДереваЭтапов.Код,
		НажатоДействиеВыполнить);
	
	Если ОписаниеДействия = Неопределено Тогда
		Возврат; // действие было выполнено на сервере
	КонецЕсли;
	
	Если ОписаниеДействия.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьФорму") Тогда
		
		ПараметрыФормы = ОписаниеДействия.ПараметрыФормы;
		Если ПараметрыФормы.Свойство("Отбор") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыФормы.Отбор, ПараметрыРасчета);
			ПараметрыФормы.Отбор.Организация = ПараметрыФормы.Отбор.МассивОрганизаций;
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыРасчета);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ЗакрытиеМесяца", Истина);
		
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ЗакрытиеФормыГиперссылкиДействие", ЭтотОбъект, ПараметрыРасчета);
		
		ОткрытьФорму(ОписаниеДействия.ИмяФормы, ПараметрыФормы, ЭтаФорма, СтрокаДереваЭтапов.Код,,, ОбработчикЗакрытия);
		
	ИначеЕсли ОписаниеДействия.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьРезультатыПроверки") Тогда
		
		ПараметрыФормы = Новый Структура("ПараметрыПроверок", ОписаниеДействия.ПараметрыФормы);
		
		ОткрытьФорму(ОписаниеДействия.ИмяФормы, ПараметрыФормы, ЭтаФорма, СтрокаДереваЭтапов.Код);
		
	ИначеЕсли ОписаниеДействия.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьЖурналРегистрации") Тогда
		
		ПараметрыФормы = ОписаниеДействия.ПараметрыФормы;
		
		ОткрытьФорму(ОписаниеДействия.ИмяФормы, ПараметрыФормы, ЭтаФорма, СтрокаДереваЭтапов.Код);
		
	ИначеЕсли ОписаниеДействия.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ВыполнитьРасчет") Тогда
		
		ОчиститьСообщения();
		
		УстановитьКартинкиСтатусаПриДлительнойОперации(Ложь);
		ПроверитьАктивностьФоновогоЗаданияРасчета();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыГиперссылкиДействие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ Объект.АвтообновлениеПриЗакрытииПодчиненныхФорм Тогда
		Возврат;
	КонецЕсли;
	
	// При закрытии формы ручной операции надо обновить состояние этапов.
	ОбновитьДанныеФормыВФонеНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеВыбранногоДействияДляВыполненияНаКлиенте(ЭтоЭтап, КодСтроки, НажатоДействиеВыполнить = Истина)
	
	СтруктураДанных = ХранилищеДанных.Получить();
	
	ТаблицаОписанияДействий = ?(ЭтоЭтап, СтруктураДанных.ТаблицаЭтапы, СтруктураДанных.ТаблицаСгруппированныхПояснений);
	СтрокаТаблицыДействий   = ТаблицаОписанияДействий.Найти(КодСтроки, "Код");
	ОписаниеДействия 		= ?(НажатоДействиеВыполнить, СтрокаТаблицыДействий.ДействиеВыполнить, СтрокаТаблицыДействий.ДействиеПодробнее);
	
	Если ЭтоЭтап И НЕ СтрокаТаблицыДействий.ВыполняетсяВручную И НЕ НажатоДействиеВыполнить Тогда // действие "Подробнее" у расчетного этапа
		
		// Если есть сведения об run-time ошибках прошлого расчета, и форма ЖР не переопределена, то откроем ЖР.
		Если НЕ ЗначениеЗаполнено(ОписаниеДействия)
		 ИЛИ (НЕ ОписаниеДействия.ОткрыватьВместоЖР И СтрокаТаблицыДействий.ЕстьЗаписиЖР
		 	  И ОписаниеДействия.ВидДействия <> Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьЖурналРегистрации) Тогда
			ОписаниеДействия = Обработки.ОперацииЗакрытияМесяца.ОписаниеДействия_ОткрытьЖурналРегистрации(КодСтроки);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ОписаниеДействия.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьЖурналРегистрации Тогда
		
		СведенияОРасчете = Обработки.ОперацииЗакрытияМесяца.ПолучитьСведенияОВыполненииЭтапа(
			СтруктураДанных.ПараметрыРасчета.МассивОрганизаций,
			СтруктураДанных.ПараметрыРасчета.ПериодРегистрации,
			КодСтроки);
		
		ЗаполнитьЗначенияСвойств(ОписаниеДействия.ПараметрыФормы, СведенияОРасчете);
		
	КонецЕсли;
	
	Если ОписаниеДействия.НаКлиенте Тогда
		
		Если ОписаниеДействия.ВидДействия <> Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьЖурналРегистрации Тогда
			
			ОписаниеДействия.ПараметрыФормы.Вставить("МассивОрганизаций", СтруктураДанных.ПараметрыРасчета.МассивОрганизаций);
			ОписаниеДействия.ПараметрыФормы.Вставить("ПериодРегистрации", СтруктураДанных.ПараметрыРасчета.ПериодРегистрации);
			ОписаниеДействия.ПараметрыФормы.Вставить("ПроверяемыйПериод", СтруктураДанных.ПараметрыРасчета.ПериодРегистрации);
			
			ДополнительныеОтборыФормы = Новый Структура("ТипыРегламентныхОпераций");
			ЗаполнитьЗначенияСвойств(ДополнительныеОтборыФормы, СтрокаТаблицыДействий);
			
			Если ЗначениеЗаполнено(ДополнительныеОтборыФормы.ТипыРегламентныхОпераций) Тогда
				ОписаниеДействия.ПараметрыФормы.Вставить("ТипОперации", ДополнительныеОтборыФормы.ТипыРегламентныхОпераций);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ОписаниеДействия;
		
	КонецЕсли;
	
	Если ОписаниеДействия.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ВыполнитьРасчет Тогда
		
		Если ЗапуститьВыполнениеРасчета(КодСтроки) ТОгда
			Возврат ОписаниеДействия; // надо подключить обработчики ожидания
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено; // на клиенте выполнять не требуется
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСостояниеЗакрытияМесяца()
	
	Если ТипЗнч(МесяцЗакрытУспешно) <> Тип("Булево") Тогда
		Элементы.ГруппаСтатусРасчета.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если МесяцЗакрытУспешно Тогда
		
		ПредставлениеСтатусаРасчета = НСтр("ru='Операции выполнены успешно'");
		
		Если ИзмененияЗапрещены Тогда
			Элементы.ДекорацияСтатусаРасчета.Картинка = БиблиотекаКартинок.ЗакрытоДляИзменения;
		Иначе
			Элементы.ДекорацияСтатусаРасчета.Картинка = БиблиотекаКартинок.ЗеленаяГалкаСредняя;
		КонецЕсли;
		
	Иначе
		
		Если ИзмененияЗапрещены Тогда
			ПредставлениеСтатусаРасчета = НСтр("ru = 'Период закрыт для изменения'");
			Элементы.ДекорацияСтатусаРасчета.Картинка = БиблиотекаКартинок.ЗакрытоДляИзменения;
		Иначе
			ПредставлениеСтатусаРасчета = НСтр("ru = 'Существуют невыполненные операции'");
			Элементы.ДекорацияСтатусаРасчета.Картинка = БиблиотекаКартинок.Внимание;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзмененияЗапрещены Тогда
		Элементы.ДекорацияСтатусаРасчета.Подсказка = ПоясненияКЗапретуИзменений;
		Элементы.ДекорацияСтатусаРасчета.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.ДекорацияСтатусаРасчета.Подсказка = "";
		Элементы.ДекорацияСтатусаРасчета.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Элементы.ГруппаСтатусРасчета.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьВыполнениеРасчета(РассчитатьПоЭтап = Неопределено)
	
	// Инициализируем расчет.
	ПрерватьРасчет = Ложь;
	АдресХранилищаДляЗаданияРасчетаЭтапов = "";
	
	СостояниеРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруСостоянияРасчетаЭтапов(
		ХранилищеДанных.Получить(),
		РассчитатьПоЭтап);
	
	РасчетЗапущен = ЗапуститьРасчетСледующегоЭтапаВФоне();
	
	Если РасчетЗапущен Тогда
		НастроитьЭлементыВЗависимостиОтНаличияФоновыхЗаданий();
	КонецЕсли;
	
	Возврат РасчетЗапущен;
	
КонецФункции

&НаСервере
Функция ЗапуститьРасчетСледующегоЭтапаВФоне()
	Перем СтруктураДанных;
	
	ЗаданиеЗапущено = Ложь;
	
	// Получим из фонового задания обновленные состояния этапов.
	Если ЗначениеЗаполнено(АдресХранилищаДляЗаданияРасчетаЭтапов) Тогда
		СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилищаДляЗаданияРасчетаЭтапов);
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		СтруктураДанных = ХранилищеДанных.Получить();
	КонецЕсли;
	
	АдресХранилищаДляЗаданияРасчетаЭтапов = "";
	
	Если ЗакрытиеМесяцаСервер.ЕстьАктивноеФоновоеЗадание() Тогда
		
		ПрерватьРасчет = Истина;
		
		ТекстОшибки =
			НСтр("ru='Обнаружено активное задание закрытия месяца, запущенное из другого процесса.
			|Выполнение операций закрытия месяца остановлено.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
	ИначеЕсли Объект.ОстанавливатьсяПоОшибке И СостояниеРасчета.НомерПредыдущегоЭтапа >= 0 Тогда
		
		// Если последний этап расчитан с ошибками и установлен флажок "Останавливаться по ошибке", то надо прервать расчет.
		ПредыдущийЭтап   = СостояниеРасчета.ЭтапыКРасчету[СостояниеРасчета.НомерПредыдущегоЭтапа];
		ПредыдущаяСтрока = СтруктураДанных.ТаблицаЭтапы.Найти(ПредыдущийЭтап, "Код");
		
		Если ПредыдущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
			
			ПрерватьРасчет = Истина;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Операция ""%1"" рассчитана с ошибками. Выполнение операций закрытия месяца остановлено.'"),
				ПредыдущаяСтрока.Наименование);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			ЗаписьЖурналаРегистрации(
				ЗакрытиеМесяцаСервер.ИмяСобытияЖурналаРегистрации(
					НСтр("ru = 'Остановка закрытия месяца из-за ошибок расчета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрерватьРасчет Тогда
		СостояниеРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруСостоянияРасчетаЭтапов(Неопределено);
		ТекущийРассчитываемыйЭтап = Неопределено;
		Возврат ЗаданиеЗапущено;
	КонецЕсли;
	
	Для НомерЭтапа = СостояниеРасчета.НомерТекущегоЭтапа + 1 По СостояниеРасчета.КоличествоЭтапов - 1 Цикл
		
		ТекущийЭтап   = СостояниеРасчета.ЭтапыКРасчету[НомерЭтапа];
		ТекущаяСтрока = СтруктураДанных.ТаблицаЭтапы.Найти(ТекущийЭтап, "Код");
		
		ТекущийРассчитываемыйЭтап = ТекущийЭтап;
		
		СостояниеРасчета.ПредставлениеЭтапа = ТекущаяСтрока.Наименование;
		
		Если НЕ ЗакрытиеМесяцаСервер.ТребуетсяПерерасчет(ТекущаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		// Подготовим вспомогательные данные для запуска расчета.
		АдресХранилищаДляЗаданияРасчетаЭтапов = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
		
		ПараметрыЗапускаРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляРасчетаЭтапов(
			СтруктураДанных,
			ТекущийЭтап,
			СостояниеРасчета.ЭтапыКРасчету[СостояниеРасчета.КоличествоЭтапов - 1],
			АдресХранилищаДляЗаданияРасчетаЭтапов,
			РежимРаботы.ДоступностьВидовУчета);
		
		// Запустим обновление состояний.
		ПараметрыЭкспортнойПроцедуры = Новый Массив;
		ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыЗапускаРасчета);
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить("Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов");
		ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
		
		НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнение операций закрытия месяца %1'"),
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации));
		
		ЗаданиеРасчетаЭтапов = ФоновыеЗадания.Выполнить(
			"ОбщегоНазначения.ВыполнитьМетодКонфигурации",
			ПараметрыЗадания,
			ЗакрытиеМесяцаСервер.ИмяФоновогоЗадания(),
			НаименованиеЗадания);
		
		ИдентификаторЗаданияРасчетаЭтапов = ЗаданиеРасчетаЭтапов.УникальныйИдентификатор;
		СостояниеРасчета.НомерПредыдущегоЭтапа = НомерЭтапа;
		
		ЗаданиеЗапущено = Истина;
		
		Прервать;
		
	КонецЦикла;
	
	СостояниеРасчета.НомерТекущегоЭтапа = НомерЭтапа;
	СостояниеРасчета.РасчетЗавершен = (НомерЭтапа >= СостояниеРасчета.КоличествоЭтапов);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СтруктураДанных, Новый СжатиеДанных(9));
	
	Если НЕ ЗаданиеЗапущено Тогда
		ТекущийРассчитываемыйЭтап = Неопределено;
	КонецЕсли;
	
	Возврат ЗаданиеЗапущено;
	
КонецФункции

&НаСервере
Процедура ЗафиксироватьПроблемуАварийногоЗавершенияРасчета(ТекстОшибки)
	
	Если СостояниеРасчета.НомерПредыдущегоЭтапа < 0
	 ИЛИ СостояниеРасчета.ЭтапыКРасчету.Количество() <= СостояниеРасчета.НомерПредыдущегоЭтапа Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭтап = СостояниеРасчета.ЭтапыКРасчету[СостояниеРасчета.НомерПредыдущегоЭтапа];
	
	ТекстОшибкиРасширенный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='При выполнении операции закрытия месяца ""%1"" произошла ошибка:
			|%2'"),
		СокрЛП(ТекущийЭтап),
		ТекстОшибки);
	
	// Зарегистрируем ошибку.
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
		ТекущийЭтап,
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.ПериодРегистрации);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
		ПараметрыРегистрации,
		ЗакрытиеМесяцаСервер.ШаблонТекстаПроблемыОшибкаВыполненияКода(),
		,
		ТекстОшибкиРасширенный);
		
	// Обновим состояние этапа.
	СтруктураДанных = ХранилищеДанных.Получить();
	
	ПараметрыЗапускаОбновленияСостояния = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(
		СтруктураДанных,
		,
		ТекущийЭтап,
		РежимРаботы.ДоступностьВидовУчета);
	
	Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СтруктураДанных, Новый СжатиеДанных(9));
	
КонецПроцедуры


&НаСервере
Процедура ДобавитьСтрокиДереваИзТаблицы(ТаблицаСтрок, ТаблицаСтрокРодителей, ИмяКолонкиПризнака)
	
	Для Каждого ТекущаяСтрока Из ТаблицаСтрок Цикл
		
		ТекущаяСтрока.ИдентификаторСтроки = -1;
		
		СвойстваСтрокиТаблицы = Новый Структура; // эти свойства есть не у всех строк
		СвойстваСтрокиТаблицы.Вставить("ВыполняетсяВручную", 	 Ложь);
		СвойстваСтрокиТаблицы.Вставить("Отключено", 		 	 Ложь);
		СвойстваСтрокиТаблицы.Вставить("ОперативныйУчет", 		 Ложь);
		СвойстваСтрокиТаблицы.Вставить("РегламентированныйУчет", Ложь);
		СвойстваСтрокиТаблицы.Вставить("МеждународныйУчет",  	 Ложь);
		ЗаполнитьЗначенияСвойств(СвойстваСтрокиТаблицы, ТекущаяСтрока);
		
		ТекущаяСтрока.Видимость = НЕ (
		    СвойстваСтрокиТаблицы.Отключено
			ИЛИ
			(Объект.СкрыватьЭтапыСоСтатусомНеТребуется
				И ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется)
			ИЛИ
			(СвойстваСтрокиТаблицы.ВыполняетсяВручную
				И ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется)
			ИЛИ
			(Объект.СкрыватьЭтапыСоСтатусомВыполненоУспешно
				И ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно)
			ИЛИ
			(СвойстваСтрокиТаблицы.ВыполняетсяВручную
				И ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно)
			ИЛИ
			(Объект.СкрыватьПоясненияКЭтапам
				И ТипЗнч(ТекущаяСтрока.Состояние) = Тип("ПеречислениеСсылка.ВариантыВажностиПроблемыСостоянияСистемы")));
		
		Если НЕ ТекущаяСтрока.Видимость Тогда
			Продолжить;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ТекущаяСтрока.Родитель) Тогда
			
			ИдентификаторСтрокиРодителя = ТаблицаСтрокРодителей.Найти(ТекущаяСтрока.Родитель, "Код").ИдентификаторСтроки;
			
			Если ИдентификаторСтрокиРодителя >= 0 Тогда
				СтрокаРодителя = ДеревоЭтапов.НайтиПоИдентификатору(ИдентификаторСтрокиРодителя);
			Иначе
				СтрокаРодителя = Неопределено;
			КонецЕсли;
			
		Иначе
			СтрокаРодителя = ДеревоЭтапов;
		КонецЕсли;
		
		Если СтрокаРодителя <> Неопределено Тогда // родитель может не выводиться - не надо выводить и подчиненные
			
			НоваяСтрока = СтрокаРодителя.ПолучитьЭлементы().Добавить();
			ТекущаяСтрока.ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			НоваяСтрока[ИмяКолонкиПризнака] = Истина;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Родитель) И НоваяСтрока.ВыполняетсяВручную Тогда
				СтрокаРодителя.ВыделитьЦветом = Истина; // выделим цветом группы, содержащие ручные операции
			КонецЕсли;
			
			УстановитьКартинкуСтатусаСтрокиДереваЭтапов(НоваяСтрока);
			
			Если НоваяСтрока.ЭтоЭтап И ЗначениеЗаполнено(НоваяСтрока.ДатаНачалаРасчета) Тогда
				ОбщаяДатаНачалаРасчета = Мин(ОбщаяДатаНачалаРасчета, НачалоМесяца(НоваяСтрока.ДатаНачалаРасчета));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

&НаСервере
Функция ТекущееСостояниеФоновогоЗадания(ИдентификаторЗадания, ДляЧтенияНаКлиенте = Истина)
	
	СостояниеЗадания = ЗакрытиеМесяцаСервер.ТекущееСостояниеФоновогоЗадания(ИдентификаторЗадания);
	
	Если ДляЧтенияНаКлиенте Тогда
		СостояниеЗадания.Удалить("Задание"); // тип значения этого свойства недоступен на клиенте
	КонецЕсли;
	
	Возврат СостояниеЗадания;
	
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеАктивно(ИдентификаторЗадания)
	
	СостояниеЗадания = ТекущееСостояниеФоновогоЗадания(ИдентификаторЗадания);
	
	Возврат СостояниеЗадания.Активно;
	
КонецФункции

&НаСервере
Функция ОтменитьФоновоеЗадание(ИдентификаторЗадания)
	
	Если НЕ ЗакрытиеМесяцаСервер.ОтменитьВыполнениеФоновогоЗадания(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не удалось отменить выполнение фонового задания формирования списка операций.
				|Подробности см. в Журнале регистрации.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнтервалПроверкиФоновыхЗаданий()
	
	Возврат 1;
	
КонецФункции

&НаСервере
Функция ОстановитьФоновоеЗаданиеРасчета()
	
	Результат = ЗакрытиеМесяцаСервер.ОтменитьВыполнениеФоновогоЗадания(ИдентификаторЗаданияРасчетаЭтапов);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РегистрыЗаданий

&НаКлиенте
Функция ПараметрыФормыРегистраЗаданий()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбораРегистра = Новый Структура("Организация", Объект.Организация);
		ПараметрыФормыРегистра  = Новый Структура("Отбор", ПараметрыОтбораРегистра);
	Иначе
		ПараметрыФормыРегистра = Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыФормыРегистра;
	
КонецФункции

#КонецОбласти

#КонецОбласти
