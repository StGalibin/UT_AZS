#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Заявление о ввозе товаров из ЕАЭС".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаявлениеОВвозеТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаявлениеОВвозеТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаявлениеОВвозеТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьИмпортныеЗакупки";
	
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

// Возвращает платежный документ оплаты НДС по заявлению о ввозе
// 
// Параметры:
//   Параметры - Структура
//
// Возвращаемое значение:
//   Структура Парметры с заполненными ссылками на документы оплаты
Функция НайтиПлатежныйДокументПоЗаявлению(Параметры) Экспорт
	
	ВыполнитьПроверкуПравДоступа("Чтение", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
	ВыполнитьПроверкуПравДоступа("Чтение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	
	Если ПустаяСтрока(Параметры.НомерДокументаПеречисленияНалога) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Подзапрос.Списание.НомерВходящегоДокумента КАК НомерДокументаПеречисленияНалога,
		|	Подзапрос.Списание.ДатаВходящегоДокумента КАК ДатаДокументаПеречисленияНалога
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ЕСТЬNULL(СписаниеБезналичныхДС.Ссылка, СписаниеБезналичныхДСБезЗаявок.Ссылка)) КАК Списание
		|	ИЗ
		|		Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДС
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДС
		|				ПО ЗаявкаНаРасходованиеДС.Ссылка = СписаниеБезналичныхДС.ДокументОснование
		|					И (СписаниеБезналичныхДС.Проведен)
		|			ПО ЗаявлениеОВвозеТоваров.Ссылка = ЗаявкаНаРасходованиеДС.ДокументОснование
		|				И (ЗаявкаНаРасходованиеДС.Проведен)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДСБезЗаявок
		|			ПО ЗаявлениеОВвозеТоваров.Ссылка = СписаниеБезналичныхДСБезЗаявок.ДокументОснование
		|				И (СписаниеБезналичныхДСБезЗаявок.Проведен)
		|	ГДЕ
		|		НЕ ЕСТЬNULL(СписаниеБезналичныхДС.Ссылка, СписаниеБезналичныхДСБезЗаявок.Ссылка) ЕСТЬ NULL 
		|		И ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка) КАК Подзапрос";
		
		Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Параметры, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Функция находит заявления о ввозе товаров заданного документа-основания.
//
// Параметры:
//	Основание - ДокументСсылка - Документ, для которого необходимо найти заявление о ввозе товаров
//	Организация - СправочникСсылка.Организации - Организация, для которой формируется заявление о ввозе товаров
//	РеквизитыЗаявленияОВВозеТоваров - Структура - Возвращаемый. Данные заявления о ввозе товаров (Ссылка, Номер, Дата, Организация)
//	Проведен - Булево - Признак того, что 
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица найденных заявлений о ввозе товаров (Ссылка, Номер, Дата, Организация, ДатаПодтвержденияОплаты)
//
Функция ЗаявленияОВвозеТоваровПоОснованию(Основание, Организация = Неопределено, РеквизитыЗаявленияОВВозеТоваров = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Операция.Ссылка                                  КАК Ссылка,
	|	Операция.Проведен                                КАК Проведен,
	|	Операция.Номер                                   КАК Номер,
	|	Операция.Дата                                    КАК Дата,
	|	Операция.Организация                             КАК Организация,
	|	Операция.Контрагент                              КАК Контрагент,
	|	Операция.ДатаПодтвержденияОплаты                 КАК ДатаПодтвержденияОплаты,
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления КАК ДокументОснование
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|		ПО ЗаявлениеОВвозеТоваровТовары.Ссылка = Операция.Ссылка
	|		И НЕ Операция.ПометкаУдаления
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = &Основание
	|	И ВЫБОР 
	|		КОГДА &Организация = НЕОПРЕДЕЛЕНО ТОГДА
	|			ИСТИНА 
	|		ИНАЧЕ 
	|			Операция.Организация = &Организация 
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Ссылка,
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Операция.ДатаПодтвержденияОплаты
	|");
	
	Запрос.УстановитьПараметр("Основание",   Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыЗаявленияОВвозеТоваров = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыЗаявленияОВвозеТоваров.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаЗаявлений = Новый ТаблицаЗначений;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЗаявлений = РезультатЗапроса.Выгрузить();
		ЗаполнитьЗначенияСвойств(РеквизитыЗаявленияОВвозеТоваров, ТаблицаЗаявлений[0]);
	КонецЕсли;
	
	Возврат ТаблицаЗаявлений;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
// 		МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
// 		НовыйСтатус - Строка - Имя нового статуса
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
// 		Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ВЫБОР КОГДА ТаблицаДокументов.ОплатаПодтверждена ТОГДА
	|		&СтрокаОплатаПодтверждена
	|	ИНАЧЕ
	|		&СтрокаОплатаНеПодтверждена
	|	КОНЕЦ КАК ПредставлениеТекущегоСтатуса,
	|	&СтрокаОплатаПодтверждена КАК ПредставлениеНовогоСтатуса,
	|	ТаблицаДокументов.ОплатаПодтверждена КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("СтрокаОплатаПодтверждена", НСтр("ru = 'Подтверждено ФНС'"));
	Запрос.УстановитьПараметр("СтрокаОплатаНеПодтверждена", НСтр("ru = 'Не подтверждено ФНС'"));
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
// 		ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
// 		НовыйСтатус - Перечисление - Новый статус
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
// 		Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Дополнительные проверки отсутствуют
	
КонецФункции

// Процедура формирует таблицу остатков товаров к оформлению заявлений о ввозе товаров по документу поступления.
//
// Параметры:
//	ДокументПоступления - ДокументСсылка.ПриобретениеТоваровУслуг - Документ поступления, по которому 
//						  будут определены остатки товаров к оформлению заявлений о ввозе товаров
//	ЗаполнениеНаОсновании - Булево, признак того, что документ введен на основании приобретения товаров  услуг
//	
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица остатокв товаров для оформления заявлений
//
Функция ТаблицаОстатковТоваровКОформлениюЗаявленийОВвозеТоваров(ДокументПоступления, ЗаполнениеНаОсновании = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТоварыКОформлениюЗаявленийОВвозе();
	
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	Запрос.УстановитьПараметр("ДатаПринятияНаУчет", ДокументПоступления.Дата);
	Запрос.УстановитьПараметр("ДолларСША", Справочники.Валюты.НайтиПоКоду("840"));
	Запрос.УстановитьПараметр("ВидТранспорта", ОпределитьВидТранспортаПоСтатистике(ДокументПоступления));
	Запрос.УстановитьПараметр("ЗаполнениеНаОсновании", ЗаполнениеНаОсновании);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТоваров;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "ЗаявлениеОВвозеТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Заявление о ввозе товаров'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюУТКлиент.ПечатьЗаявлениеОВвозеТоваров";
	КомандаПечати.СписокФорм     = "ФормаДокумента,ФормаСписка";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "СтатистическаяФормаУчетаПеремещенияТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Статистическая форма учета перемещения товаров'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Статистическая форма учета перемещения товаров'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюУТКлиент.ПечатьСтатистическаяФормаУчетаПеремещенияТоваров";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   ОбъектыПечати         - Список значений  - значение - ссылка на объект
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеОВвозеТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ЗаявлениеОВвозеТоваров", 
			НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'"),
			ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СтатистическаяФормаУчетаПеремещенияТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"СтатистическаяФормаУчетаПеремещенияТоваров", 
			НСтр("ru = 'Статистическая форма учета перемещения товаров'"),
			ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ЗаявлениеОВвозеТоваров";
КонецФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаТоварыКОформлениюЗаявленийОВвозеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗаявлениеОВвозеТоваров.Дата,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.Валюта,
	|	ЗаявлениеОВвозеТоваров.СуммаДокумента,
	|	ЗаявлениеОВвозеТоваров.ОплатаПодтверждена,
	|	ЗаявлениеОВвозеТоваров.ДатаПодтвержденияОплаты,
	|	ЗаявлениеОВвозеТоваров.Номер                    КАК Номер,
	|	ЗаявлениеОВвозеТоваров.Валюта                   КАК Валюта,
	|	ЗаявлениеОВвозеТоваров.Договор                  КАК Договор,
	|	ЗаявлениеОВвозеТоваров.Ответственный            КАК Ответственный,
	|	ЗаявлениеОВвозеТоваров.Подразделение            КАК Подразделение,
	|	ЗаявлениеОВвозеТоваров.Комментарий              КАК Комментарий,
	|	ЗаявлениеОВвозеТоваров.ПометкаУдаления          КАК ПометкаУдаления,
	|	ЗаявлениеОВвозеТоваров.Проведен                 КАК Проведен
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                     Реквизиты.Дата);
	Запрос.УстановитьПараметр("Организация",                Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент",                 Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Валюта",                     Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ОплатаПодтверждена",         Реквизиты.ОплатаПодтверждена);
	Запрос.УстановитьПараметр("ДатаПодтвержденияОплаты",    Реквизиты.ДатаПодтвержденияОплаты);
	Запрос.УстановитьПараметр("КодВидаОперации", 			"19"); // "19 Ввоз товаров из Евразийского экономического союза"
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	
	Запрос.УстановитьПараметр("Договор",                       Реквизиты.Договор);
	Запрос.УстановитьПараметр("СуммаДокумента",                Реквизиты.СуммаДокумента);
	Запрос.УстановитьПараметр("Валюта",                        Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Контрагент",                    Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Номер",                         Реквизиты.Номер);
	Запрос.УстановитьПараметр("НомерНаПечать",       	       ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер,Истина));
	Запрос.УстановитьПараметр("Ответственный",                 Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("Подразделение",                 Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",         Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	Запрос.УстановитьПараметр("Комментарий",                   Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",               Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                      Реквизиты.Проведен);
	
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru='По договору ""%Договор%""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор%", Реквизиты.Договор);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьКурсыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУПР") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		Константы.ВалютаРегламентированногоУчета.Получить(),
		Константы.ВалютаУправленческогоУчета.Получить(),
		Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыКОформлениюЗаявленийОВвозеТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКОформлениюЗаявленийОВвозеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ЗаявлениеОВвозеТоваровТовары.НомерСтроки           КАК НомерСтроки,
	|		&Период                                            КАК Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)             КАК ВидДвижения,
	|		ЗаявлениеОВвозеТоваровТовары.ДокументПоступления   КАК ДокументПоступления,
	|		ЗаявлениеОВвозеТоваровТовары.Номенклатура          КАК Номенклатура,
	|		ЗаявлениеОВвозеТоваровТовары.Характеристика        КАК Характеристика,
	|		ЗаявлениеОВвозеТоваровТовары.Серия                 КАК Серия,
	|		ЗаявлениеОВвозеТоваровТовары.Склад                 КАК Склад,
	|		ЗаявлениеОВвозеТоваровТовары.Количество            КАК КОформлению,
	|		ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость    КАК ФактурнаяСтоимость
	|	ИЗ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|	ГДЕ
	|		ЗаявлениеОВвозеТоваровТовары.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	// Создадим временную таблицу "ВтТаблицаАналитикУчетаПартий"
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""Товары"" 											КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 						КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО										КАК Поставщик,
	|	ДанныеДокумента.Контрагент							КАК Контрагент,
	|	ТаблицаДокумента.СтавкаНДС 							КАК СтавкаНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность				КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)	КАК ВидЦенности,
	|	0													КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ТоварыПоступления"" 								КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 						КАК НомерСтроки,
	|	ДанныеДокументаПоступления.Партнер					КАК Поставщик,
	|	ДанныеДокументаПоступления.Контрагент				КАК Контрагент,
	|	МИНИМУМ(ТаблицаДокументаПоступления.СтавкаНДС)		КАК СтавкаНДС,
	|	ДанныеДокументаПоступления.ЗакупкаПодДеятельность	КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)			КАК ВидЦенности,
	|	0													КАК КодСтроки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокументаПоступления
	|		ПО ТаблицаДокумента.ДокументПоступления = ТаблицаДокументаПоступления.Ссылка
	|		И ВЫБОР 
	|			КОГДА ТаблицаДокументаПоступления.ИдентификаторСтроки <> """" ТОГДА
	|				ТаблицаДокумента.ИдентификаторСтроки = ТаблицаДокументаПоступления.ИдентификаторСтроки
	|			ИНАЧЕ
	|		 		ТаблицаДокумента.АналитикаУчетаНоменклатуры = ТаблицаДокументаПоступления.АналитикаУчетаНоменклатуры
	|			КОНЕЦ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ДанныеДокументаПоступления
	|		ПО ТаблицаДокумента.ДокументПоступления = ДанныеДокументаПоступления.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ДанныеДокументаПоступления.Партнер,
	|	ДанныеДокументаПоступления.Контрагент,
	|	ДанныеДокументаПоступления.ЗакупкаПодДеятельность
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокументаПоступления.СтавкаНДС) = 1
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ПартииРасходовНаСебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата							КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 			КАК ВидДвижения,
	|	ДанныеДокумента.Организация 					КАК Организация,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.ДокументПоступления				КАК ДокументПоступления,
	|	ТоварыДокумента.ВидЗапасов 						КАК ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ДанныеДокумента.Ссылка 							КАК ДокументПоступленияРасходов,
	|	НЕОПРЕДЕЛЕНО 									КАК СтатьяРасходов,
	|
	|	СУММА(ТоварыДокумента.Количество)				КАК Количество,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр 
	|						* ТоварыДокумента.СуммаНДС) КАК Стоимость,
	|	0										 		КАК СтоимостьБезНДС,
	|	0										 		КАК СтоимостьРегл,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|			ИНАЧЕ ТоварыДокумента.СуммаНДС
	|		КОНЕЦ)										КАК НДСРегл,
	|	ТоварыДокумента.Подразделение					КАК ПодразделениеРасходов,
	|	0												КАК ПостояннаяРазница,
	|	0												КАК ВременнаяРазница
	|
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|	ПО ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ПартионныйУчетВерсии21
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ТоварыДокумента.ДокументПоступления,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий,
	|	ТоварыДокумента.Подразделение
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|
	|	0			 КАК Стоимость,
	|	0 			 КАК СтоимостьБезНДС,
	|	0 			 КАК СтоимостьРегл,
	|	0			 КАК ПостояннаяРазница,
	|	0			 КАК ВременнаяРазница,
	|	ТоварыДокумента.СуммаНДС	 					 КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|		ИНАЧЕ 0 КОНЕЦ 							 КАК НДСУпр,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС	 КАК ВидДеятельностиНДС,
	|	&Ссылка 					 					 КАК ДокументПоступленияРасходов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий	 КАК АналитикаУчетаПартий,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры		 КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|	ПО ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка 
	|	И ТоварыДокумента.СуммаНДС <> 0
	|	И ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период													КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)									КАК ВидДвижения,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры 								КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ 													КАК РазделУчета,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ЕСТЬNULL(ТоварыПоступления.ВидЗапасов, ТоварыДокумента.ВидЗапасов)
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ															КАК ВидЗапасов,
	|	ДанныеДокумента.Организация												КАК Организация,
	|
	//	партионный учет версии 2.2
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТоварыДокумента.ДокументПоступления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК Партия,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК АналитикаУчетаПартий,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ПриобретениеТоваровУслуг.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ПриобретениеТоваровУслуг.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ПриобретениеТоваровУслуг.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ПриобретениеТоваровУслуг.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК АналитикаФинансовогоУчета,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК КорАналитикаУчетаПартий,
	|	СУММА(ВЫБОР 
	|		КОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0 
	|		ИНАЧЕ ТоварыДокумента.СуммаНДС
	|	КОНЕЦ)	 																КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПриобретениеТоваровУслуг.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыСПартией)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода) КОНЕЦ КАК ТипЗаписи,
	|
	|	0																		КАК Количество,
	|	0																		КАК Стоимость,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС)		КАК ДопРасходы,
	|	0																		КАК СтоимостьБезНДС,
	|	0																		КАК ДопРасходыБезНДС,
	|	СУММА(ВЫБОР КОГДА &УправленческийУчетОрганизаций
	|	 И ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	ТОГДА
	|		&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ)																	КАК ДопРасходыУпр,
	|	СУММА(ВЫБОР 
	|		КОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0 
	|		ИНАЧЕ &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|	КОНЕЦ)	 																КАК НДСУпр,
	|
	|	СУММА(ВЫБОР КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	ТОГДА
	|		&КоэффициентПересчетаВВалютуРегл * ТоварыДокумента.СуммаНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ)																	КАК ДопРасходыРегл,
	|	0																		КАК ПостояннаяРазница,
	|	0																		КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)		КАК ХозяйственнаяОперация,
	|	ТоварыДокумента.Подразделение											КАК Подразделение,
	|	ТоварыДокумента.ДокументПоступления										КАК ДокументИсточник
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Документ.ПриобретениеТоваровУслуг.Товары КАК ТоварыПоступления
	|	ПО 
	|		ТоварыПоступления.Ссылка = ТоварыДокумента.ДокументПоступления
	|		И ВЫБОР 
	|			КОГДА ТоварыПоступления.ИдентификаторСтроки <> """" ТОГДА
	|				ТоварыПоступления.ИдентификаторСтроки = ТоварыДокумента.ИдентификаторСтроки
	|			ИНАЧЕ
	|				ТоварыПоступления.АналитикаУчетаНоменклатуры = ТоварыДокумента.АналитикаУчетаНоменклатуры
	|			КОНЕЦ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|	ПО
	|		ТоварыДокумента.ДокументПоступления = ПриобретениеТоваровУслуг.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартийПоступления
	|	ПО ТаблицаАналитикУчетаПартийПоступления.НомерСтроки 	   = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартийПоступления.ИмяТабличнойЧасти = ""ТоварыПоступления""
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТоварыДокумента.СуммаНДС <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ЕСТЬNULL(ТоварыПоступления.ВидЗапасов, ТоварыДокумента.ВидЗапасов)
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТоварыДокумента.ДокументПоступления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ПриобретениеТоваровУслуг.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ПриобретениеТоваровУслуг.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ПриобретениеТоваровУслуг.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ПриобретениеТоваровУслуг.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПриобретениеТоваровУслуг.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыСПартией)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода) КОНЕЦ,
	|	ТоварыДокумента.Подразделение,
	|	ТоварыДокумента.ДокументПоступления
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                               КАК ВидДвижения,
	|	ДанныеДокумента.Организация                                          КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)               КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)            КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы) КАК Статья,
	|	ДанныеДокумента.Организация                                          КАК Аналитика,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента 
	|					* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))  КАК Сумма
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";

	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "Закупки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Операция.Дата                                              КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС) КАК ХозяйственнаяОперация,
	|	Операция.Организация                                       КАК Организация,
	|	ПриобретениеТоваровУслугТовары.Подразделение                КАК Подразделение,
	|	ПриобретениеТоваровУслуг.Менеджер                           КАК Менеджер,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры                 КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.Склад                                      КАК Склад,
	|	ТоварыДокумента.ВидЗапасов.ТипЗапасов                      КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                      КАК ВидЗапасов,
	|	ПриобретениеТоваровУслуг.Партнер                            КАК Партнер,
	|	ПриобретениеТоваровУслуг.Контрагент                         КАК Контрагент,
	|	ПриобретениеТоваровУслуг.Соглашение                         КАК Соглашение,
	|	ПриобретениеТоваровУслуг.Договор                            КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельностиНоменклатуры,
	|	ПриобретениеТоваровУслуг.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	0                                                          КАК Количество,
	|	&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС КАК Сумма,
	|	0                                                          КАК СуммаБезНДС,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаРегл,
	|	0                                                          КАК СуммаРеглБезНДС,
	|	0                                                          КАК СуммаСкидки,
	|	&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС КАК Стоимость,
	|	0                                                          КАК СтоимостьБезНДС,
	|	ТоварыДокумента.СуммаНДС                                   КАК СтоимостьРегл,
	|	0                                                          КАК ДопРасходы,
	|	0                                                          КАК ДопРасходыБезНДС,
	|
	|	&ВалютаРегламентированногоУчета                            КАК ВалютаДокумента,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаВВалютеДокумента,
	|	0                                                          КАК СуммаБезНДСВВалютеДокумента,
	|	&ВалютаРегламентированногоУчета                            КАК ВалютаВзаиморасчетов,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаВВалютеВзаиморасчетов,
	|	0                                                          КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ ТоварыДокумента.Номенклатура
	|	КОНЕЦ                                                      КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПриобретениеТоваровУслуг.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			ТОГДА
	|				ПриобретениеТоваровУслуг.Договор
	|		КОГДА ПриобретениеТоваровУслуг.ПоступлениеПоЗаказам
	|				И ПриобретениеТоваровУслуг.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ТОГДА
	|				ПриобретениеТоваровУслуг.ЗаказПоставщику
	|		ИНАЧЕ
	|			ПриобретениеТоваровУслуг.Ссылка
	|	КОНЕЦ                                                       КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|			ПО ПриобретениеТоваровУслугТовары.Ссылка = ПриобретениеТоваровУслуг.Ссылка
	|		ПО ТоварыДокумента.ДокументПоступления = ПриобретениеТоваровУслугТовары.Ссылка
	|			И ТоварыДокумента.АналитикаУчетаНоменклатуры = ПриобретениеТоваровУслугТовары.АналитикаУчетаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|		ПО ТоварыДокумента.Ссылка = Операция.Ссылка
	|ГДЕ
	|	ТоварыДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОснований", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                  КАК Ссылка,
	|	&Период                  КАК ДатаДокументаИБ,
	|	&Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация             КАК Организация,
	|	&ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО             КАК Партнер,
	|	&Контрагент              КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоНаправленийДеятельности = 1
	|			ТОГДА ДанныеДокумента.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                    КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоМестХранения = 1
	|			ТОГДА ДанныеДокумента.МестоХранения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                    КАК МестоХранения,
	|	&Подразделение           КАК Подразделение,
	|	&Ответственный           КАК Ответственный,
	|	&Комментарий             КАК Комментарий,
	|	&Валюта                  КАК Валюта,
	|	&СуммаДокумента          КАК Сумма,
	|	НЕОПРЕДЕЛЕНО             КАК Статус,
	|	&Проведен                КАК Проведен,
	|	&ПометкаУдаления         КАК ПометкаУдаления,
	|	ЛОЖЬ                     КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору    КАК Дополнительно,
	|	&Период                  КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать           КАК НомерПервичногоДокумента
	|ИЗ
	|	ВтОснований КАК ДанныеДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтОснований";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                                             КАК Ссылка,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.НаправлениеДеятельности,
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК НаправлениеДеятельности,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.Склад,
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))                  КАК МестоХранения,
	|	КОЛИЧЕСТВО(
	|		РАЗЛИЧНЫЕ ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.НаправлениеДеятельности,
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК КоличествоНаправленийДеятельности,
	|	КОЛИЧЕСТВО(
	|		РАЗЛИЧНЫЕ ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.Склад,
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))                  КАК КоличествоМестХранения
	|ПОМЕСТИТЬ ВтОснований
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаТовары
	|		ПО ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	&Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	&Организация                            КАК Организация,
	|	&Контрагент                             КАК Контрагент,
	|	&Ссылка                                 КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	ДанныеДокумента.НомерОтметкиОРегистрации КАК НомерСчетаФактуры,
	|	ДанныеДокумента.ДатаПодтвержденияОплаты КАК ДатаСчетаФактуры,
	|	""19""                                  КАК КодВидаОперации,
	|	2                                       КАК КодВидаСделки,
	|	1                                       КАК КодСпособаПолучения,
	|	&ВалютаРегламентированногоУчета         КАК Валюта,
	|	СУММА(ТоварыДокумента.НалоговаяБазаНДС) КАК СуммаПоСчетуФактуре,
	|	СУММА(ТоварыДокумента.СуммаНДС)         КАК СуммаНДС
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|		ПО ДанныеДокумента.Ссылка = ТоварыДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.НомерОтметкиОРегистрации,
	|	ДанныеДокумента.ДатаПодтвержденияОплаты
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура формирования движений по регистру "Товары к оформлению заявлений о ввозе".
//
// Параметры:
//	ДополнительныеСвойства - Структура, перечень таблиц значений для записи в регистры
//	Движения - Коллекция движений документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьТоварыКОформлениюЗаявленийОВвозеТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаТоварыКОформлениюЗаявленийОВвозе = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОформлениюЗаявленийОВвозеТоваров;
	
	Если Отказ ИЛИ ТаблицаТоварыКОформлениюЗаявленийОВвозе.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТоварыКОформлениюЗаявленийОВвозе = Движения.ТоварыКОформлениюЗаявленийОВвозе;
	ДвиженияТоварыКОформлениюЗаявленийОВвозе.Записывать = Истина;
	ДвиженияТоварыКОформлениюЗаявленийОВвозе.Загрузить(ТаблицаТоварыКОформлениюЗаявленийОВвозе);
	
КонецПроцедуры


Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.ЗаявлениеОВвозеТоваров";
	СинонимТаблицыДокумента      = "";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",        """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	ЗначенияПараметров.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтОснований", ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", 	ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", 		ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПечати

Функция ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивДокументов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозеТоваров.Номер КАК НомерЗаяв,
	|	ЗаявлениеОВвозеТоваров.ДатаОтправки КАК ДатаДокНП,
	|	ЗаявлениеОВвозеТоваров.ДатаОтправки КАК Дата,
	|	ДЕНЬ(ЗаявлениеОВвозеТоваров.ДатаОтправки) КАК Число,
	|	МЕСЯЦ(ЗаявлениеОВвозеТоваров.ДатаОтправки) КАК Месяц,
	|	ГОД(ЗаявлениеОВвозеТоваров.ДатаОтправки) КАК Год,
	|	НЕОПРЕДЕЛЕНО КАК СтрВсего,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.НаименованиеПолное = """"
	|			ТОГДА ЗаявлениеОВвозеТоваров.Контрагент.Наименование
	|		ИНАЧЕ ЗаявлениеОВвозеТоваров.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПродавецНаимОрг,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	ЗаявлениеОВвозеТоваров.НомерДоговора КАК НомерДог,
	|	ЗаявлениеОВвозеТоваров.ДатаДоговора КАК ДатаДог,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ИННОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК НаимОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК КодСтраныОрг1,
	|	НЕОПРЕДЕЛЕНО КАК МестоНахождОрг_1,
	|	ЛОЖЬ КАК КомиссионерБайконур,
	|	НЕОПРЕДЕЛЕНО КАК НомКонтр_2,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаКонтр_2,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК РеквизитыПосредник,
	|	ЛОЖЬ КАК ПрЛизинг,
	|	ЛОЖЬ КАК ПрДавСырья,
	|	ЛОЖЬ КАК ПрПродФЛ,
	|	ЗаявлениеОВвозеТоваров.Организация.ИНН КАК ПокупательИНН,
	|	ЗаявлениеОВвозеТоваров.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	ПОДСТРОКА(ЗаявлениеОВвозеТоваров.Организация.НаименованиеСокращенное, 1, 250) КАК ПокупательНаимОрг,
	|	""643"" КАК КодСтраныПокупатель,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	ЗаявлениеОВвозеТоваров.Проведен,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.Договор,
	|	ЗаявлениеОВвозеТоваров.Ответственный,
	|	ЗаявлениеОВвозеТоваров.СуммаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ФИОРук,
	|	НЕОПРЕДЕЛЕНО КАК ФИОБух,
	|	ЗаявлениеОВвозеТоваров.Дата КАК ДатаПодписиРук,
	|	ЗаявлениеОВвозеТоваров.Дата КАК ДатаПодписиБух,
	|	&ПричинаЗаявления КАК ПричинаЗаявления,
	|	"""" КАК НомерОтметки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтметки,
	|	0 КАК ИзмениеЦеныМесяц,
	|	0 КАК ИзмениеЦеныГод,
	|	ЗаявлениеОВвозеТоваров.ИспользоватьАкцизы КАК ИспользоватьАкцизы
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("ПричинаЗаявления", НСтр("ru = 'первичное заявление'"));
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровСпецификации.НомерСпецификации КАК Номер,
	|	ЗаявлениеОВвозеТоваровСпецификации.ДатаСпецификации КАК Дата,
	|	ЗаявлениеОВвозеТоваровСпецификации.НомерСтроки КАК НомерСтроки,
	|	ЗаявлениеОВвозеТоваровСпецификации.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Спецификации КАК ЗаявлениеОВвозеТоваровСпецификации
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровСпецификации.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаСпецификации = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки КАК П000010000101,
	|	ВЫБОР
	|		КОГДА ИспользоватьНоменклатуруПоставщиков.Значение = ИСТИНА И
	|				ЗаявлениеОВвозеТоваровТовары.НоменклатураПоставщика <> ЗНАЧЕНИЕ(Справочник.НоменклатураПоставщиков.ПустаяСсылка) ТОГДА
	|			ЗаявлениеОВвозеТоваровТовары.НоменклатураПоставщика.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.Наименование
	|				ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ 
	|		КОНЕЦ КАК П000010000102,
	|	ЗаявлениеОВвозеТоваровТовары.Номенклатура.КодТНВЭД.Код КАК П000010000103,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Наименование КАК П000010000104,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ЗаявлениеОВвозеТоваровТовары.Количество КАК П000010000105,
	|	ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость КАК П000010000106,
	|	ЗаявлениеОВвозеТоваровТовары.СерияНомерТСД КАК П000010000109,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаТСД КАК ДатаТСД,
	|	ЗаявлениеОВвозеТоваровТовары.НомерСчетаФактуры КАК П000010000111,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаАкцизы КАК П000010000114,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаНДС КАК П000010000115,
	|	ЗаявлениеОВвозеТоваровТовары.ТвердаяСтавкаАкциза КАК П000010000116,
	|	ЗаявлениеОВвозеТоваровТовары.АдвалорнаяСтавкаАкциза КАК П000010000117,
	|	ЗаявлениеОВвозеТоваровТовары.СтавкаНДС КАК П000010000118,
	|	ЗаявлениеОВвозеТоваровТовары.СуммаАкциза КАК П000010000119,
	|	ЗаявлениеОВвозеТоваровТовары.СуммаНДС КАК П000010000120,
	|	ЗаявлениеОВвозеТоваровТовары.Валюта КАК Валюта,
	|	ЗаявлениеОВвозеТоваровТовары.Валюта.Код КАК ВалютаДокументаКод,
	|	НЕОПРЕДЕЛЕНО КАК П000010000107,
	|	НЕОПРЕДЕЛЕНО КАК П000010000108,
	|	НЕОПРЕДЕЛЕНО КАК П000010000125,
	|	НЕОПРЕДЕЛЕНО КАК П000010000110,
	|	НЕОПРЕДЕЛЕНО КАК П000010000112,
	|	НЕОПРЕДЕЛЕНО КАК П000010000113,
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары,
	|	Константа.ИспользоватьНоменклатуруПоставщиков КАК ИспользоватьНоменклатуруПоставщиков
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комитент)
	|			ТОГДА 0
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Доверитель)
	|			ТОГДА 1
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Принципал)
	|			ТОГДА 2
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Продавец)
	|			ТОГДА 6
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА 7
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипПрод_Пр,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца КАК ТипПродавца,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комиссионер)
	|			ТОГДА 3
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Поверенный)
	|			ТОГДА 4
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Агент)
	|			ТОГДА 5
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА 7
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ТипПок_Пр,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя КАК ТипПокупателя,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Продавец,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Продавец.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Продавец.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Покупатель,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровУчастникиСделки.Покупатель.СтранаРегистрации.Код, """") КАК КодСтраныПокупатель,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровУчастникиСделки.Покупатель.СтранаРегистрации.НаименованиеПолное, """") КАК НаименованиеСтраныПокупатель,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.НомерДоговора КАК НомерДог,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.ДатаДоговора КАК ДатаДог,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.НомерСпецификации,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Ссылка КАК ДокументСсылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерЗаяв,
	|	НЕОПРЕДЕЛЕНО КАК Число,
	|	НЕОПРЕДЕЛЕНО КАК Месяц,
	|	НЕОПРЕДЕЛЕНО КАК Год
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.УчастникиСделки КАК ЗаявлениеОВвозеТоваровУчастникиСделки
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	ТаблицаУчастникиСделки = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху	= 10;
	ТабДокумент.ПолеСнизу	= 10;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеОВвозеТоваров";
	
	ПервыйДокумент = Истина;
	
	// Объявление таблиц
	
	ТаблицаСпецификацииДляВыгрузки = Новый ТаблицаЗначений;
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Номер");
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Дата");
	
	ТЗСпецификации07 = Новый ТаблицаЗначений;
	ТЗСпецификации07.Колонки.Добавить("Номер");
	ТЗСпецификации07.Колонки.Добавить("Дата");
	
	ТЗСпецификацииРаздел3 = ТЗСпецификации07.СкопироватьКолонки();
	ТаблСпецификацииПриложение = ТЗСпецификации07.СкопироватьКолонки();
	
	ТТД = Новый ТаблицаЗначений;
	ТТД.Колонки.Добавить("Номер");
	ТТД.Колонки.Добавить("Дата");
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		Если СтрокаШапки.Дата < '20150101' Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2012кв3");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2015кв1");
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		
		// Структуры для выгрузки
		
		РеквизитыРаздел1 = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); 
		РеквизитыРаздел2 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр");
		РеквизитыРаздел3 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр,ТипПрод_3,ТипПродавца,ПродавецИНН_КПП,ПродавецНаимОрг,КодСтраныПродавец,
			|ПродавецМестоНахожд,ПродавецАдрес,ПродавецБайконур,НомерДог,ДатаДог,НомерСпецификации,ДатаСпецификации,ТипПок_3,ТипПокупателя,ПокупательИНН_КПП,
			|ПокупательНаимОрг,КодСтраныПокупатель,ПокупательМестоНахожд,ПокупательАдрес,ПокупательБайконур,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух"); 
		РеквизитыПриложение = Новый Структура("НомерЗаяв,Число,Месяц,Год");
		
		// Раздел 1
		
		Если ЗначениеЗаполнено(СтрокаШапки.Организация) 
			И ЗначениеЗаполнено(СтрокаШапки.Контрагент) Тогда
			
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
			
			РеквизитыРаздел1.ФИОРук = Руководители.РуководительПредставление;
			РеквизитыРаздел1.ФИОБух = Руководители.ГлавныйБухгалтерПредставление;
			
			СведенияОПродавце 	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Контрагент, СтрокаШапки.Дата);
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Организация, СтрокаШапки.Дата);
			
			РеквизитыРаздел1.ПродавецМестоНахожд	= РеквизитыРаздел1.КодСтраныПродавец + ", " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ЮридическийАдрес,");
			Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
				РеквизитыРаздел1.ПродавецИНН_КПП 		= СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
			Иначе
				РеквизитыРаздел1.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
			КонецЕсли;
			
			РеквизитыРаздел1.ПокупательМестоНахожд 	= РеквизитыРаздел1.КодСтраныПокупатель + ", " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
			РеквизитыРаздел1.ПокупательИНН_КПП 		= РеквизитыРаздел1.ПокупательИНН + ?(РеквизитыРаздел1.ПокупательКПП = "", "", "/" + РеквизитыРаздел1.ПокупательКПП);
			
		КонецЕсли;
		
		РеквизитыРаздел1.НомерЗаяв = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыРаздел1.НомерЗаяв, Истина, Ложь);
		
		ТаблицаСпецификацииДляВыгрузки.Очистить();
		
		// Спецификации
		
		НомераСпецификаций = "";
		ДатыСпецификаций = "";
		
		Пока ТаблицаСпецификации.НайтиСледующий(СтруктураПоиска) Цикл
			НомераСпецификаций 	= НомераСпецификаций + ?(НомераСпецификаций = "", "", ", ") + ТаблицаСпецификации.Номер;
			ДатыСпецификаций 	= ДатыСпецификаций + ?(ДатыСпецификаций = "", "", ", ") + Формат(ТаблицаСпецификации.Дата, "ДФ=dd.MM.yyyy");
			НоваяСтрокаСпецификаций = ТаблицаСпецификацииДляВыгрузки.Добавить();
			НоваяСтрокаСпецификаций.Дата = Формат(ТаблицаСпецификации.Дата, "ДФ=dd.MM.yyyy");
			НоваяСтрокаСпецификаций.Номер = ТаблицаСпецификации.Номер;
		КонецЦикла;
		
		РеквизитыРаздел1.НомерСпецификации = НомераСпецификаций;
		РеквизитыРаздел1.ДатаСпецификации = ДатыСпецификаций;
		
		// Адрес продавца для выгрузки
		РеквизитыРаздел1.Вставить("ПродавецАдрес", ПолучитьАдресВВидеСоответствия(СтрокаШапки.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата));
		
		// Адрес покупателя для выгрузки
		РеквизитыРаздел1.Вставить("ПокупательАдрес", ПолучитьАдресВВидеСоответствия(СтрокаШапки.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, СтрокаШапки.Дата));
		
		// Адрес комиссионера для выгрузки
		РеквизитыРаздел1.Вставить("КомиссионерАдрес", ПустойРоссийскийАдрес());
		
		// Адрес продавца в Разделе 3 для выгрузки
		РеквизитыРаздел3.Вставить("ПродавецАдрес", ПустойРоссийскийАдрес());
			
		// Адрес покупателя в Разделе 3 для выгрузки
		РеквизитыРаздел3.Вставить("ПокупательАдрес", ПустойРоссийскийАдрес());
	
		ПечататьРаздел3 = Ложь;
			
		ТЗСпецификации07.Очистить();
		ТЗСпецификацииРаздел3.Очистить();
		ТаблСпецификацииПриложение.Очистить();
		
		НайденныеСтрокиУчастникиСделки = ТаблицаУчастникиСделки.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтрокиУчастникиСделки.Количество() > 0 Тогда
			
			СтрокаУчастникиСделки = НайденныеСтрокиУчастникиСделки[0];
			
			Если ЗначениеЗаполнено(СтрокаУчастникиСделки.Продавец) Тогда
				
				РеквизитыРаздел1.КодСтраныОрг1 = СтрокаУчастникиСделки.КодСтраныПродавец;
				
				СведенияОПродавце 	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
				
				РеквизитыРаздел1.НаимОрг_1 			= СведенияОПродавце.ПолноеНаименование;
				РеквизитыРаздел1.ИННОрг_1 	 		= СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				РеквизитыРаздел1.МестоНахождОрг_1	= "" + СтрокаУчастникиСделки.КодСтраныПродавец + ", " + СведенияОПродавце.ЮридическийАдрес;
				
				РеквизитыРаздел1.НомКонтр_2 			= СтрокаУчастникиСделки.НомерДог;
				РеквизитыРаздел1.ДатаКонтр_2 			= СтрокаУчастникиСделки.ДатаДог;
				РеквизитыРаздел1.НомерСпецификации_07 	= СтрокаУчастникиСделки.НомерСпецификации;
				РеквизитыРаздел1.ДатаСпецификации_07 	= Формат(СтрокаУчастникиСделки.ДатаСпецификации, "ДФ=dd.MM.yyyy");
				
				СтрокаСпецификацииПосредник = ТЗСпецификации07.Добавить();
				СтрокаСпецификацииПосредник.Номер = РеквизитыРаздел1.НомерСпецификации_07;
				СтрокаСпецификацииПосредник.Дата =  РеквизитыРаздел1.ДатаСпецификации_07;
							
				РеквизитыРаздел1.РеквизитыПосредник = СведенияОПродавце.ПолноеНаименование + ", " + РеквизитыРаздел1.МестоНахождОрг_1;
				
				АдресКомиссионера = ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
				РеквизитыРаздел1.КомиссионерАдрес = АдресКомиссионера;
				
				Если НайденныеСтрокиУчастникиСделки.Количество() = 1 Тогда
					
					ПечататьРаздел3 = Истина;
					РеквизитыРаздел1.СтрВсего = 3; // если строка одна
					
					// Раздел 3
					ЗаполнитьЗначенияСвойств(РеквизитыРаздел3, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год,СтрВсего,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух");
					
					РеквизитыРаздел3.ТипПрод_3 	= СтрокаУчастникиСделки.ТипПрод_Пр;
					РеквизитыРаздел3.ТипПок_3 	= СтрокаУчастникиСделки.ТипПок_Пр;
					
					РеквизитыРаздел3.ТипПродавца	= СтрокаУчастникиСделки.ТипПродавца;
					РеквизитыРаздел3.ТипПокупателя 	= СтрокаУчастникиСделки.ТипПокупателя;
										
					РеквизитыРаздел3.ПродавецБайконур 	= СтрокаУчастникиСделки.ПродавецБайконур;
					РеквизитыРаздел3.ПокупательБайконур = СтрокаУчастникиСделки.ПокупательБайконур;
					
					Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
						РеквизитыРаздел3.ПродавецИНН_КПП 		= СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
					Иначе
						РеквизитыРаздел3.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
					КонецЕсли;
					
					РеквизитыРаздел3.ПродавецНаимОрг 		= СведенияОПродавце.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПродавец 		= СтрокаУчастникиСделки.КодСтраныПродавец; 
					РеквизитыРаздел3.ПродавецМестоНахожд 	= "" + СтрокаУчастникиСделки.КодСтраныПродавец + ", " + СведенияОПродавце.ЮридическийАдрес;
					
					Если СведенияОПокупателе.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
						РеквизитыРаздел3.ПокупательИНН_КПП 		= СведенияОПокупателе.ИНН + ?(СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
					Иначе
						РеквизитыРаздел3.ПокупательИНН_КПП = СведенияОПокупателе.НалоговыйНомерВСтранеРегистрации;
					КонецЕсли;
					
					РеквизитыРаздел3.ПокупательНаимОрг 		= СведенияОПокупателе.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПокупатель 	= СтрокаУчастникиСделки.КодСтраныПокупатель;
					РеквизитыРаздел3.ПокупательМестоНахожд 	= "" + СтрокаУчастникиСделки.КодСтраныПокупатель + ", " + СведенияОПокупателе.ЮридическийАдрес;
					
					РеквизитыРаздел3.НомерДог 			= СтрокаУчастникиСделки.НомерДог;
					РеквизитыРаздел3.ДатаДог 			= СтрокаУчастникиСделки.ДатаДог;
					РеквизитыРаздел3.НомерСпецификации 	= СтрокаУчастникиСделки.НомерСпецификации;
					РеквизитыРаздел3.ДатаСпецификации 	= СтрокаУчастникиСделки.ДатаСпецификации;
					
					РеквизитыРаздел3.ПродавецАдрес 		= АдресКомиссионера;
					РеквизитыРаздел3.ПокупательАдрес 	= ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
					
					ТЗСпецификацииРаздел3 = ТЗСпецификации07;
					
				Иначе
					РеквизитыРаздел1.СтрВсего = 2;
				КонецЕсли; 
			КонецЕсли;
		Иначе
			РеквизитыРаздел1.СтрВсего = 2;
		КонецЕсли;
		
		// Вывод на печать
		
		ШапкаРаздел1 = Макет.ПолучитьОбласть("Шапка");
		ШапкаРаздел1.Параметры.Заполнить(РеквизитыРаздел1);
		ТабДокумент.Вывести(ШапкаРаздел1);
		
		// Товары
		
		ТекущийНомерСтраницы = 1;
		ЗаголовокТаблицыТоваров = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
		ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
		
		ТаблицаТоварыРаздел1 = ТаблицаТовары.СкопироватьКолонки(); // Таблица для выгрузки
		
		ТТД.Очистить();
		
		МассивОбластейДляПроверкиВывода = Новый Массив;
		
		ПодвалТаблицаТовары = Макет.ПолучитьОбласть("ПодвалТаблицаТовары");
		
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			МногострочнаяЧасть = Макет.ПолучитьОбласть("ТаблицаТовары");
			
			Для каждого СтрокаТоваров Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаТоваровДляВыгрузки = ТаблицаТоварыРаздел1.Добавить();
				
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТоваров.Валюта, СтрокаТоваров.ДатаПринятияНаУчет);
				СтрокаТоваров.П000010000108 = СтруктураКурса.Курс;
				СтрокаТоваров.П000010000125 = СтруктураКурса.Кратность;
				
				СтрокаТоваров.П000010000107 = СтрокаТоваров.ВалютаДокументаКод;
				
				СтрокаТоваров.П000010000110 = Формат(СтрокаТоваров.ДатаТСД, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000112 = Формат(СтрокаТоваров.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000113 = Формат(СтрокаТоваров.ДатаПринятияНаУчет, "ДФ=dd.MM.yyyy");
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваровДляВыгрузки, СтрокаТоваров);
				
				НоваяСтрокаДокументы = ТТД.Добавить();
				НоваяСтрокаДокументы.Номер = СтрокаТоваров.П000010000109;
				НоваяСтрокаДокументы.Дата = СтрокаТоваров.П000010000110;
				
				МногострочнаяЧасть.Параметры.Заполнить(СтрокаТоваров);
				
				Если Не СтрокаШапки.ИспользоватьАкцизы Тогда
					МногострочнаяЧасть.Параметры.П000010000114 = "--";
					МногострочнаяЧасть.Параметры.П000010000116 = "--";
					МногострочнаяЧасть.Параметры.П000010000117 = "--";
					МногострочнаяЧасть.Параметры.П000010000119 = "--";
				КонецЕсли;
				
				МассивОбластейДляПроверкиВывода.Очистить();
				МассивОбластейДляПроверкиВывода.Добавить(МногострочнаяЧасть);
				МассивОбластейДляПроверкиВывода.Добавить(ПодвалТаблицаТовары);
				Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(
						ТабДокумент, МассивОбластейДляПроверкиВывода) Тогда
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
					ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
					ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
				КонецЕсли;
				
				ТабДокумент.Вывести(МногострочнаяЧасть);
				
			КонецЦикла;
		КонецЕсли;
		
		РеквизитыРаздел1.Вставить("П000010000114", ТаблицаТоварыРаздел1.Итог("П000010000114"));
		РеквизитыРаздел1.Вставить("П000010000115", ТаблицаТоварыРаздел1.Итог("П000010000115"));
		
		// Итоговые суммы налогов подлежат округлению до целых рублей
		РеквизитыРаздел1.Вставить("П000010000119", Окр(ТаблицаТоварыРаздел1.Итог("П000010000119")));
		РеквизитыРаздел1.Вставить("П000010000120", Окр(ТаблицаТоварыРаздел1.Итог("П000010000120")));
		
		ПодвалТаблицаТовары.Параметры.П000010000114 = РеквизитыРаздел1.П000010000114;
		ПодвалТаблицаТовары.Параметры.П000010000115 = РеквизитыРаздел1.П000010000115;
		ПодвалТаблицаТовары.Параметры.П000010000119 = РеквизитыРаздел1.П000010000119;
		ПодвалТаблицаТовары.Параметры.П000010000120 = РеквизитыРаздел1.П000010000120;
		
		Если Не СтрокаШапки.ИспользоватьАкцизы Тогда
			ПодвалТаблицаТовары.Параметры.П000010000114 = "--";
			ПодвалТаблицаТовары.Параметры.П000010000119 = "--";
		КонецЕсли;
		
		ТабДокумент.Вывести(ПодвалТаблицаТовары);
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.Заполнить(РеквизитыРаздел1);
		МассивОбластейДляПроверкиВывода.Очистить();
		МассивОбластейДляПроверкиВывода.Добавить(Подвал);
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент,
			МассивОбластейДляПроверкиВывода) Тогда
			
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		КонецЕсли;

		ТабДокумент.Вывести(Подвал);
		
		// Раздел 2
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ЗаполнитьЗначенияСвойств(РеквизитыРаздел2, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год,СтрВсего");
		
		ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		РеквизитыРаздел2.Стр = ТекущийНомерСтраницы;
			
		ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел2");
		ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел2);
		ТабДокумент.Вывести(ОсновнаяЧасть);
		
		// Раздел 3
		
		Если ПечататьРаздел3 Тогда
		
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
			РеквизитыРаздел3.Стр = ТекущийНомерСтраницы;
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел3");
			ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел3);
			ТабДокумент.Вывести(ОсновнаяЧасть);
		
		КонецЕсли; 
		
		// Приложение
		
		ТаблицаДляВыгрузкиПриложение = ТаблицаУчастникиСделки.СкопироватьКолонки(); // Таблица для выгрузки
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПродавецАдрес");
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПокупательАдрес");
				
		Если НайденныеСтрокиУчастникиСделки.Количество() > 1 Тогда
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Приложение");
			
			Для каждого СтрокаУчастникиСделки Из НайденныеСтрокиУчастникиСделки Цикл
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				СведенияОПродавце 	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
				
				Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					СтрокаУчастникиСделки.ПродавецИНН_КПП = СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				Иначе
					СтрокаУчастникиСделки.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				
				СтрокаУчастникиСделки.ПродавецНаимОрг 		= СведенияОПродавце.ПолноеНаименование;
				СтрокаУчастникиСделки.ПродавецМестоНахожд 	= "" + СтрокаУчастникиСделки.КодСтраныПродавец + ", " + СведенияОПродавце.ЮридическийАдрес;
				
				Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					СтрокаУчастникиСделки.ПокупательИНН_КПП = СведенияОПокупателе.ИНН + ?(СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
				Иначе
					СтрокаУчастникиСделки.ПокупательИНН_КПП = СведенияОПокупателе.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				
				СтрокаУчастникиСделки.ПокупательНаимОрг 	= СведенияОПокупателе.ПолноеНаименование;
				СтрокаУчастникиСделки.ПокупательМестоНахожд = "" + СтрокаУчастникиСделки.КодСтраныПокупатель + ", " + СведенияОПокупателе.ЮридическийАдрес;
				
				ЗаполнитьЗначенияСвойств(СтрокаУчастникиСделки, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год");
				
				СтрокаСпецификацииПриложение = ТаблСпецификацииПриложение.Добавить();
				СтрокаСпецификацииПриложение.Номер = СтрокаУчастникиСделки.НомерСпецификации;
				СтрокаСпецификацииПриложение.Дата =  СтрокаУчастникиСделки.ДатаСпецификации;
				
				СтрокаВыгрузки = ТаблицаДляВыгрузкиПриложение.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаВыгрузки, СтрокаУчастникиСделки);
				
				// Адрес продавца в Приложении для выгрузки
				СтрокаВыгрузки.ПродавецАдрес = ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
				
				// Адрес покупателя в Приложении для выгрузки
				СтрокаВыгрузки.ПокупательАдрес = ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
				
				ОсновнаяЧасть.Параметры.Заполнить(СтрокаВыгрузки);
				ТабДокумент.Вывести(ОсновнаяЧасть);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаВыпискиБанка = Новый ТаблицаЗначений;
	ТаблицаСведенияОЗачете = Новый ТаблицаЗначений;
	
	Если ТаблицаТоварыРаздел1 <> Неопределено Тогда
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаПринятияНаУчет");
		
		ТаблицаТоварыРаздел1.Колонки.Удалить("П000010000104");
		ТаблицаТоварыРаздел1.Колонки.ЕдиницаИзмеренияКод.Имя = "П000010000104";
	КонецЕсли;
	
	Если ТаблицаДляВыгрузкиПриложение <> Неопределено Тогда
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ДокументСсылка");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Покупатель");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Продавец");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПродавца");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПокупателя");
	КонецЕсли;
	
	КоличествоСтраниц = ТабДокумент.КоличествоСтраниц();
	ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего");
	Пока ОбластьКоличествоСтраниц <> Неопределено Цикл
		ОбластьКоличествоСтраниц.Текст = КоличествоСтраниц;
		ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего", ОбластьКоличествоСтраниц)
	КонецЦикла;
	
	СтруктураРазделов = Новый Структура;
	СтруктураРазделов.Вставить("РеквизитыРаздел1",       РеквизитыРаздел1);
	СтруктураРазделов.Вставить("ТаблицаРаздел1",         ТаблицаТоварыРаздел1);
	СтруктураРазделов.Вставить("РеквизитыРаздел2",       РеквизитыРаздел2);
	СтруктураРазделов.Вставить("РеквизитыРаздел3",       РеквизитыРаздел3);
	СтруктураРазделов.Вставить("ТаблицаПриложение",      ТаблицаДляВыгрузкиПриложение);
	СтруктураРазделов.Вставить("ТЗСпецификации",         ТаблицаСпецификацииДляВыгрузки);
	СтруктураРазделов.Вставить("ТЗСпецификации07",       ТЗСпецификации07);
	СтруктураРазделов.Вставить("ТЗСпецификацииРаздел3",  ТЗСпецификацииРаздел3);
	СтруктураРазделов.Вставить("ТаблСпецПрил3",          ТаблСпецификацииПриложение);
	СтруктураРазделов.Вставить("ТТД",                    ТТД);
	СтруктураРазделов.Вставить("ТаблицаВыпискиБанка",    ТаблицаВыпискиБанка);
	СтруктураРазделов.Вставить("ТаблицаСведенияОЗачете", ТаблицаСведенияОЗачете);
	СтруктураРазделов.Вставить("ТабДокумент",            ТабДокумент);
		
	Возврат СтруктураРазделов;
		
КонецФункции

Функция ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивДокументов)

	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозеТоваров.Номер КАК СистемныйНомер,
	|	ЗаявлениеОВвозеТоваров.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ3,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ4,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ3,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ4,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ИНН КАК ОтправительКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.НомерДоговора КАК НомерДоговора,
	|	ЗаявлениеОВвозеТоваров.ДатаДоговора КАК ДатаДоговора,
	|	ЗаявлениеОВвозеТоваров.Организация.ИНН КАК ПокупательИНН,
	|	ЗаявлениеОВвозеТоваров.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательКоды,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдрес,
	|	НЕОПРЕДЕЛЕНО КАК ОргТелефонИсп,
	|	ЗаявлениеОВвозеТоваров.Валюта КАК ВалютаДокумента,
	|	ЗаявлениеОВвозеТоваров.Валюта.Код КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Организация.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаявлениеОВвозеТоваров.Организация.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК ОргИсполнитель,
	|	НЕОПРЕДЕЛЕНО КАК ОргДолжностьИсп,
	|	НЕОПРЕДЕЛЕНО КАК ОргАдресЭлПочты,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК ТоргующаяСтранаКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК ТоргующаяСтранаНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК СтранаОтправленияКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК СтранаОтправленияНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаКод,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрРеквизиты,
	|	""ИМ"" КАК НаправлениеПеремещения,
	|	""ИМ"" КАК НапрПеремещения,
	|	""РОССИЯ"" КАК СтранаНазначенияНаименование,
	|	""RU"" КАК СтранаНазначенияКод,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдресСоответствие,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Валюта= &ВалютаРеглУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваров.Валюта.Наименование
	|	КОНЕЦ КАК КодВалютыЦеныТовара,
	|	"""" КАК ИмяКлючевогоУзлаСодержательнойЧасти,
	|	"""" КАК ИмяФайла,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""KZ""
	|			ТОГДА ""РК""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""BY""
	|			ТОГДА ""РБ""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""AM""
	|			ТОГДА ""АМ""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""KG""
	|			ТОГДА ""КГ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СтранаОтправления,
	|	""РФ"" КАК СтранаНазначения,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ЮридическоеФизическоеЛицо КАК ОтправительЮридическоеФизическоеЛицо,
	|	ЗаявлениеОВвозеТоваров.Организация.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель,
	|	ЗаявлениеОВвозеТоваров.Организация.ОГРН КАК ОГРН,
	|	"""" КАК Отправитель_ФормаСобственности,
	|	ЗаявлениеОВвозеТоваров.Организация.НаименованиеОКОПФ КАК Получатель_ФормаСобственности
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка В(&МассивДокументов)";
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ИспользоватьНоменклатуруПоставщиков.Значение = ИСТИНА И
	|				ЗаявлениеОВвозеТоваровТовары.НоменклатураПоставщика <> ЗНАЧЕНИЕ(Справочник.НоменклатураПоставщиков.ПустаяСсылка) ТОГДА
	|			ЗаявлениеОВвозеТоваровТовары.НоменклатураПоставщика.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.Наименование
	|				ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ 
	|	КОНЕЦ КАК НаименованиеТовара,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.Номенклатура.КодТНВЭД.Код, """") КАК КодТовара,
	|	ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость КАК ЦенаТовараВыбВал,
	|	ПриобретениеТоваровУслуг.НомерВходящегоДокумента КАК СерияНомерТСД,
	|	ПриобретениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаТСД,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Номер КАК НомерСчетаФактуры,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Дата КАК ДатаСчетаФактуры,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаНДС КАК ЦенаТовараВалРубль,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Валюта = &ВалютаРеглУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Валюта.Наименование
	|	КОНЕЦ КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.СтатСтоимостьДолларыСША КАК ЦенаТовараВалДоллар,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугТовары.НомерГТД.СтранаПроисхождения.Наименование,
	|			ПриобретениеТоваровУслуг.Контрагент.СтранаРегистрации.Наименование) КАК СтранаТовараНаименование,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугТовары.НомерГТД.СтранаПроисхождения.КодАльфа2,
	|			ПриобретениеТоваровУслуг.Контрагент.СтранаРегистрации.КодАльфа2) КАК СтранаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.ВесНеттоКг КАК ВесТовара,
	|	ЗаявлениеОВвозеТоваровТовары.КодВидаТранспорта КАК КодВидаТранспорта,
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.ДокументПоступления.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ОтчетныйПериод,
	|	ЗаявлениеОВвозеТоваровТовары.Количество КАК ЕдИзмТовараКво,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдИзмТовараКратко,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Код КАК ЕдИзмТовараКод,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.Код, """") КАК НомерТаможеннойДекларации
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|			ПО ПриобретениеТоваровУслуг.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = ПриобретениеТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = ПриобретениеТоваровУслугТовары.Ссылка
	|			И ЗаявлениеОВвозеТоваровТовары.Номенклатура = ПриобретениеТоваровУслугТовары.Номенклатура
	|			И ЗаявлениеОВвозеТоваровТовары.Характеристика = ПриобретениеТоваровУслугТовары.Характеристика
	|			И ЗаявлениеОВвозеТоваровТовары.Серия = ПриобретениеТоваровУслугТовары.Серия
	|			И ЗаявлениеОВвозеТоваровТовары.Склад = ПриобретениеТоваровУслугТовары.Склад,
	|		Константа.ИспользоватьНоменклатуруПоставщиков КАК ИспользоватьНоменклатуруПоставщиков	
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху	= 10;
	ТабДокумент.ПолеСнизу	= 10;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СтатистическаяФормаУчетаПеремещенияТоваров";
	
	ПервыйДокумент = Истина;
	
	СписокВидовТранспорта = Новый СписокЗначений;
	ЗаполнитьСписокВыбораВидовТранспорта(СписокВидовТранспорта);
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		Если СтрокаШапки.Дата < '20160101' Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2011Кв1");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2016Кв1");
		КонецЕсли;
		
		ОсновнаяЧасть1      = Макет.ПолучитьОбласть("ОсновнаяЧасть1");
		МногострочнаяЧасть1 = Макет.ПолучитьОбласть("МногострочнаяЧасть1");
		МногострочнаяЧасть2 = Макет.ПолучитьОбласть("МногострочнаяЧасть2");
		ОсновнаяЧасть2      = Макет.ПолучитьОбласть("ОсновнаяЧасть2");
		ОсновнаяЧасть3      = Макет.ПолучитьОбласть("ОсновнаяЧасть3");
		
		РеквизитыШапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); // Структура для выгрузки
		РеквизитыШапка.СистемныйНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапка.СистемныйНомер, Истина, Ложь);
		
		Если ЗначениеЗаполнено(РеквизитыШапка.Организация) И ЗначениеЗаполнено(РеквизитыШапка.Контрагент) Тогда
			
			СведенияОПродавце = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Контрагент, РеквизитыШапка.Дата);
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Организация, РеквизитыШапка.Дата);
			
			РеквизитыШапка.ПолучательРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ЮридическийАдрес,");
			РеквизитыШапка.ПолучательКоды = РеквизитыШапка.ПокупательИНН + ?(РеквизитыШапка.ПокупательКПП = "", "", "/" + РеквизитыШапка.ПокупательКПП);
			
			РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
			РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
			
			РеквизитыШапка.ОргПочтовыйАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, СтрокаШапки.Дата);
			РеквизитыШапка.ОргТелефонИсп = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, СтрокаШапки.Дата);
			РеквизитыШапка.ОргАдресЭлПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации, СтрокаШапки.Дата);
			
			// Отправитель
			
			РеквизитыШапка.ОтправительРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,ЮридическийАдрес,");
			РеквизитыШапка.ОтправительНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,");
		
			РеквизитыШапка.Вставить("ОтправительРБ_УНП", "");
			РеквизитыШапка.Вставить("ОтправительРК_БИН", "");
			РеквизитыШапка.Вставить("ОтправительРК_ИИН", "");
			РеквизитыШапка.Вставить("ОтправительРА_УНН", "");
			РеквизитыШапка.Вставить("ОтправительРА_Соц", "");
			РеквизитыШапка.Вставить("ОтправительКодКГ", "");
			РеквизитыШапка.Вставить("ОтправительКГ_ИНН", "");
			РеквизитыШапка.Вставить("ОтправительКГ_ОКПО", "");
		
			Если РеквизитыШапка.СтранаОтправления = "РБ" Тогда
				РеквизитыШапка.Вставить("ОтправительРБ_УНП", РеквизитыШапка.ОтправительКоды);
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "РК" Тогда
				Если РеквизитыШапка.ОтправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					РеквизитыШапка.Вставить("ОтправительРК_БИН", РеквизитыШапка.ОтправительКоды);
				Иначе
					РеквизитыШапка.Вставить("ОтправительРК_ИИН", РеквизитыШапка.ОтправительКоды);
				КонецЕсли;
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "АМ" Тогда
				РеквизитыШапка.Вставить("ОтправительРА_УНН", РеквизитыШапка.ОтправительКоды);
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "КГ" Тогда
				Если РеквизитыШапка.ОтправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					РеквизитыШапка.Вставить("ОтправительКГ_ИНН", РеквизитыШапка.ОтправительКоды);
				Иначе
					РеквизитыШапка.Вставить("ОтправительКГ_ОКПО", РеквизитыШапка.ОтправительКоды);
				КонецЕсли;
			КонецЕсли;
			
			ОтправительАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
			
			РеквизитыШапка.Вставить("ОтправительСтранаКод", РеквизитыШапка.ТоргующаяСтранаКод);
			РеквизитыШапка.Вставить("ОтправительСтранаНаименование", РеквизитыШапка.ТоргующаяСтранаНаименование);
			РеквизитыШапка.Вставить("ОтправительИндекс", ОтправительАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОтправительНаселенныйПункт", ОтправительАдрес.Получить("НаселенныйПункт"));
			Если ПустаяСтрока(РеквизитыШапка.ОтправительНаселенныйПункт) Тогда
				РеквизитыШапка.ОтправительНаселенныйПункт = ОтправительАдрес.Получить("Город");
			КонецЕсли;
			
			// Дата выдачи документа, удостоверяющего личность отправителя
			РеквизитыШапка.Вставить("Отправитель_ДатаДокСтр", "");
			РеквизитыШапка.Вставить("Отправитель_ВидДокКод", "");
			РеквизитыШапка.Вставить("Отправитель_ВидДокНаим", "");
			РеквизитыШапка.Вставить("Отправитель_СерДок", "");
			РеквизитыШапка.Вставить("Отправитель_НомДок", "");
			РеквизитыШапка.Вставить("Отправитель_ДатаДок", "");
			РеквизитыШапка.Вставить("Отправитель_ОргДок", "");
			
			РеквизитыШапка.Вставить("Отправитель_Тел", СведенияОПродавце.Телефоны);
			РеквизитыШапка.Вставить("Отправитель_Факс", СведенияОПродавце.Телефоны);
			РеквизитыШапка.Вставить("Отправитель_Телекс", "");
			
			// В документе "Заявление о ввозе товаров" получателем всегда является РФ, а отправителем иностранное государство,
			// поэтому данные реквизиты передаются пустыми
			
			РеквизитыШапка.Вставить("ПолучательРА_УНН", "");
			РеквизитыШапка.Вставить("ПолучательРА_Соц", "");
			РеквизитыШапка.Вставить("ПолучательКГ_ИНН", "");
			РеквизитыШапка.Вставить("ПолучательКГ_ОКПО", "");
			РеквизитыШапка.Вставить("ПолучательКодКГ", ""); 
			РеквизитыШапка.Вставить("ОтправительРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтправительРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтправительРФ_ОГРН", "");
			
			РеквизитыШапка.Вставить("ОтправительОбласть", ОтправительАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОтправительУлицаНомерДома", 
				"" + ОтправительАдрес.Получить("Улица") + ", " + ОтправительАдрес.Получить("Дом") + ", " 
				+ ОтправительАдрес.Получить("Корпус") + ", " + ОтправительАдрес.Получить("Квартира"));
				
			// Получатель
			
			ПолучательНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
			ПолучательАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, СтрокаШапки.Дата);
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаименование", ПолучательНаименование);
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасВидДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДок", '00010101');
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДокумента", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНомерДок", "");
			// Серия документа,удостоверяющего личность физ лица - составителя статистики
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасСерДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасОрг", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУр", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрКоды", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРеквизиты", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодИндекс", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаселенныйПункт", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодОбласть", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаКод", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодУлицаНомерДома", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрИндекс", ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаКод", РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаНаименование", РеквизитыШапка.СтранаНазначенияНаименование);
			РеквизитыШапка.Вставить("ОтвЛицоФинУрОбласть", ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаселенныйПункт", ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрУлицаНомерДома", ПолучательАдрес.Получить("Улица") 
				+ ", " 
				+ ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
				
			Если РеквизитыШапка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				
				// Получатель физ лицо
				
				Если ЗначениеЗаполнено(РеквизитыШапка.ИндивидуальныйПредприниматель) Тогда
				
					ДанныеДокумента = ПолучитьДокФизЛица(РеквизитыШапка.ИндивидуальныйПредприниматель, РеквизитыШапка.Дата);
					
					Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
						
						РеквизитыШапка.ОтвЛицоФинУрПасВидДок 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.ВидДокумента, "КодМВД");
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДок 		= ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента = ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасНаименование 	= ДанныеДокумента.Представление;
						РеквизитыШапка.ОтвЛицоФинУрПасНомерДок 		= ДанныеДокумента.Номер;
						РеквизитыШапка.ОтвЛицоФинУрПасСерДок        = ДанныеДокумента.Серия;
						РеквизитыШапка.ОтвЛицоФинУрПасОрг           = ДанныеДокумента.КемВыдан;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				РеквизитыШапка.ОтвЛицоФинУрРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ОГРН = РеквизитыШапка.ОГРН;
				
			ИначеЕсли РеквизитыШапка.ОбособленноеПодразделение Тогда
				
				// Получатель обособленное подразделение
				
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ОГРН = РеквизитыШапка.ОГРН;
				
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаКод = РеквизитыШапка.СтранаНазначенияКод;
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаНаименование = РеквизитыШапка.СтранаНазначенияНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодНаименование = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодИндекс = ПолучательАдрес.Получить("Индекс");
				РеквизитыШапка.ОтвЛицоФинУрПодОбласть = ПолучательАдрес.Получить("Регион");
				РеквизитыШапка.ОтвЛицоФинУрПодУлицаНомерДома = 
					ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
					+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира");
				
			Иначе	
				
				// Получатель юридическое лицо
				
				РеквизитыШапка.ОтвЛицоФинУр = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ОГРН = РеквизитыШапка.ОГРН;
				РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
				
			КонецЕсли;
			
			РеквизитыШапка.Вставить("ПолучательИндекс", ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ПолучательКоды", РеквизитыШапка.ПолучательКоды);
			РеквизитыШапка.Вставить("ПолучательНаименование", ПолучательНаименование);
			РеквизитыШапка.Вставить("ПолучательНаселенныйПункт", ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ПолучательОбласть", ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ПолучательРБ_УНП", "");
			РеквизитыШапка.Вставить("ПолучательРК_БИН", "");
			РеквизитыШапка.Вставить("ПолучательРК_ИИН", "");
			РеквизитыШапка.Вставить("ПолучательРФ_ИНН", РеквизитыШапка.ПокупательИНН);
			РеквизитыШапка.Вставить("ПолучательРФ_КПП", РеквизитыШапка.ПокупательКПП);
			РеквизитыШапка.Вставить("ПолучательРФ_ОГРН", РеквизитыШапка.ОГРН);
			РеквизитыШапка.Вставить("ПолучательРеквизиты", РеквизитыШапка.ПолучательРеквизиты);
			РеквизитыШапка.Вставить("ПолучательСтранаКод", РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ПолучательСтранаНаименование", РеквизитыШапка.СтранаНазначенияНаименование);
			РеквизитыШапка.Вставить("ПолучательУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			ПочтовыйАдресОрганизации = "643, " + РеквизитыШапка.ОргПочтовыйАдрес;
			
			Если ЗначениеЗаполнено(РеквизитыШапка.ИндивидуальныйПредприниматель) Тогда
				РеквизитыШапка.ОргИсполнитель = РеквизитыШапка.ИндивидуальныйПредприниматель;
				РеквизитыШапка.ОргДолжностьИсп = НСтр("ru='Индивидуальный предприниматель'"); 
				ФИО = ПолучитьФИОФизЛица(РеквизитыШапка.ИндивидуальныйПредприниматель);
			Иначе
				Руководители                   = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
				РеквизитыШапка.ОргИсполнитель  = Руководители.РуководительПредставление;
				РеквизитыШапка.ОргДолжностьИсп = Руководители.РуководительДолжностьПредставление;
				ФИО = Руководители.РуководительФИО;
			КонецЕсли;
			
			РеквизитыШапка.Вставить("ОргИмяИсп",      ФИО.Имя);
			РеквизитыШапка.Вставить("ОргФамилияИсп",  ФИО.Фамилия);
			РеквизитыШапка.Вставить("ОргОтчествоИсп", ФИО.Отчество);
			
			РеквизитыШапка.Вставить("ОргТелефонИсп",  РеквизитыШапка.ОргТелефонИсп);
			
			РеквизитыШапка.Вставить("ОргИндекс", 			ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОргНаселенныйПункт", 	ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОргОбласть", 			ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОргУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			РеквизитыШапка.Вставить("ОргАдресЭлПочты", 			РеквизитыШапка.ОргАдресЭлПочты);
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 		ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("ОргСтранаКод", 			РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ОргСтранаНаименование", 	РеквизитыШапка.СтранаНазначенияНаименование);
			
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 			ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("мАдресвФорматеДляВыгрузки", 	ПочтовыйАдресОрганизации);
			
			РеквизитыШапка.Вставить("Получатель_ДатаДокСтр", РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента);
			РеквизитыШапка.Вставить("Получатель_ВидДокКод",  РеквизитыШапка.ОтвЛицоФинУрПасВидДок);
			РеквизитыШапка.Вставить("Получатель_ВидДокНаим", РеквизитыШапка.ОтвЛицоФинУрПасНаименование);
			РеквизитыШапка.Вставить("Получатель_СерДок",     РеквизитыШапка.ОтвЛицоФинУрПасСерДок);
			РеквизитыШапка.Вставить("Получатель_НомДок",     РеквизитыШапка.ОтвЛицоФинУрПасНомерДок);
			РеквизитыШапка.Вставить("Получатель_ДатаДок",    РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента);
			РеквизитыШапка.Вставить("Получатель_ОргДок",     РеквизитыШапка.ПолучательНаименование);
			
			РеквизитыШапка.Вставить("Получатель_Тел",    РеквизитыШапка.ОргТелефонИсп);
			РеквизитыШапка.Вставить("Получатель_Факс",   РеквизитыШапка.ОргТелефонИсп);
			РеквизитыШапка.Вставить("Получатель_Телекс", "");
			РеквизитыШапка.Вставить("Получатель_Почта",  РеквизитыШапка.ОргАдресЭлПочты);
			
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		ОбщаяЦенаТоваров = 0;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
			
				Если ЗначениеЗаполнено(СтрокаТовары.КодВидаТранспорта) Тогда
					
					РеквизитыШапка.ВидТранспортаКод = СтрокаТовары.КодВидаТранспорта;
					ВидТранспорта = СписокВидовТранспорта.НайтиПоЗначению(СтрокаТовары.КодВидаТранспорта);
					
					Если ВидТранспорта <> Неопределено Тогда
						РеквизитыШапка.ВидТранспортаНаименование = Сред(ВидТранспорта, 6);
					КонецЕсли;
					
				КонецЕсли;
				
				ОтчетныйПериод = СтрокаТовары.ОтчетныйПериод;
				
				ОбщаяЦенаТоваров = ОбщаяЦенаТоваров + СтрокаТовары.ЦенаТовараВыбВал;
				
			КонецЦикла;
			
		КонецЕсли;

		// Графа 7 - общая стоимость
		РеквизитыШапка.Вставить("ОбщаяЦенаТоваров", ОбщаяЦенаТоваров);
		
		// Реквизиты подписи - сокращенное наименование организации-покупателя.
		РеквизитыШапка.Вставить("ПолнСокрНаим", СведенияОПокупателе.СокращенноеНаименование);
		
		// Реквизиты подписи - ИНН/КПП/ОГРН организации-покупателя.
		ИННКППОГРН = РеквизитыШапка.ПокупательИНН 
			+ ?(РеквизитыШапка.ПокупательКПП = "", "", "/" + РеквизитыШапка.ПокупательКПП)
			+ "/" + РеквизитыШапка.ОГРН;
		
		РеквизитыШапка.Вставить("ИннКппОгрн", ИННКППОГРН);
		
		ОсновнаяЧасть1.Параметры.Заполнить(РеквизитыШапка);
		ТабДокумент.Вывести(ОсновнаяЧасть1);
		
		ТаблицаДокументы = Новый ТаблицаЗначений; // Таблица для выгрузки
		ТаблицаДокументы.Колонки.Добавить("НаименованиеДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("НомерДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
		НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
		НоваяСтрокаВыгрузки.НаименованиеДокумента = "Договор";
		НоваяСтрокаВыгрузки.НомерДокумента = РеквизитыШапка.НомерДоговора;
		НоваяСтрокаВыгрузки.ДатаДокумента = РеквизитыШапка.ДатаДоговора;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			// Реквизиты сопроводительных документов и счетов-фактур
			
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТовары.СерияНомерТСД) Тогда
					
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = НСтр("ru = 'Счет-проформа (проформа-инвойс)'");
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.СерияНомерТСД;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаТСД;
							
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТовары.НомерСчетаФактуры) Тогда
						
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = НСтр("ru = 'Счет-фактура (инвойс)'");
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.НомерСчетаФактуры;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаСчетаФактуры;
				
				КонецЕсли; 
					
			КонецЦикла;
			
			ТаблицаДокументы.Свернуть("НаименованиеДокумента,НомерДокумента,ДатаДокумента");
			
			Для каждого СтрокаДокумента Из ТаблицаДокументы Цикл
			
				МногострочнаяЧасть1.Параметры.Документы = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 № %2 от %3 г.'"),
						СтрокаДокумента.НаименованиеДокумента,
						СтрокаДокумента.НомерДокумента, 
						Формат(СтрокаДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy"));
						
				ТабДокумент.Вывести(МногострочнаяЧасть1);
			
			КонецЦикла; 
			
			ТабДокумент.Вывести(ОсновнаяЧасть2);
			
			ТаблицаТоварыДляВыгрузки = ТаблицаТовары.СкопироватьКолонки();   // Таблица для выгрузки
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("КодТО");              // Код таможенного органа
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("ДатаРегистрацииСтр"); // Дата таможенной декларации
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("НомерДок");           // Номер таможенной декларации
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("ДекларацияНом");      // Порядковый номер строки в декларации
			
			
			ОбщаяЦенаТоваров = 0;
			
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаВыгрузки = ТаблицаТоварыДляВыгрузки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВыгрузки, СтрокаТовары);
				ЗаполнитьРеквизитыТаможеннойДекларации(СтрокаТовары, НоваяСтрокаВыгрузки);
				
				МногострочнаяЧасть2.Параметры.Заполнить(НоваяСтрокаВыгрузки);
				ТабДокумент.Вывести(МногострочнаяЧасть2);
				
				НоваяСтрокаВыгрузки.ЕдИзмТовараКратко = ВРег(СтрокаТовары.ЕдИзмТовараКратко);
				
			КонецЦикла;
			
		Иначе
			ТабДокумент.Вывести(МногострочнаяЧасть2);
		КонецЕсли; 
		
		// Подвал
	
		РеквизитыШапка.Вставить("ДатаЗаполнения", Формат(РеквизитыШапка.Дата, "ДФ=yyyy-MM-dd"));
		
		РеквизитыШапка.ДатаЗаполненияД1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		РеквизитыШапка.ДатаЗаполненияД2 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияД", Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 2));
		
		РеквизитыШапка.ДатаЗаполненияМ1 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ДатаЗаполненияМ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияМ", Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 2));

		РеквизитыШапка.ДатаЗаполненияГ1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ДатаЗаполненияГ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ДатаЗаполненияГ3 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ДатаЗаполненияГ4 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияГ", Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""));
		
		РеквизитыШапка.ОтчетныйМесяцМ1 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ОтчетныйМесяцМ2 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцМ", Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 2));
		
		РеквизитыШапка.ОтчетныйМесяцГ1 = Лев(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ОтчетныйМесяцГ2 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ОтчетныйМесяцГ3 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ОтчетныйМесяцГ4 = Прав(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцГ", Формат(ОтчетныйПериод, "ДФ=""гггг"""));
		РеквизитыШапка.Вставить("ОтчетныйМесяц",  Формат(ОтчетныйПериод, "ДФ=yyyy-MM")); 
		РеквизитыШапка.Вставить("УникальныйИД",   РеквизитыШапка.ДокументСсылка.УникальныйИдентификатор());
		
		ОсновнаяЧасть3.Параметры.Заполнить(РеквизитыШапка);
		
		ТабДокумент.Вывести(ОсновнаяЧасть3);
		
	КонецЦикла;
	
	Если ТаблицаТоварыДляВыгрузки <> Неопределено Тогда
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ОтчетныйПериод");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("СерияНомерТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСтроки");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("КодВидаТранспорта");
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("РеквизитыШапка",           РеквизитыШапка);
	Структура.Вставить("ТаблицаДокументы",         ТаблицаДокументы);
	Структура.Вставить("ТаблицаТоварыДляВыгрузки", ТаблицаТоварыДляВыгрузки);
	Структура.Вставить("ТабДокумент",              ТабДокумент);
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаполнитьРеквизитыТаможеннойДекларации(СтрокаДокумента, СтрокаВыгрузки)
	
	// Получим из номера таможенной декларации
	//   КодТО              - Код таможенного органа
	//   ДатаРегистрацииСтр - Дата таможенной декларации
	//   НомерДок           - Номер таможенной декларации
	//   ДекларацияНом      - Порядковый номер строки в декларации
	
	Если ЗначениеЗаполнено(СтрокаДокумента.НомерТаможеннойДекларации) Тогда
		
		МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаДокумента.НомерТаможеннойДекларации, "/");
		
		Если МассивСлов.Количество() = 4 Тогда
			СтрокаВыгрузки.КодТО              = МассивСлов[0];
			ДатаРегистрацииСтр                = МассивСлов[1];
			
			Если СтрДлина(ДатаРегистрацииСтр) = 6 Тогда
				Число = Лев(ДатаРегистрацииСтр, 2);
				Месяц = Сред(ДатаРегистрацииСтр, 3, 2);
				Год   = Прав(ДатаРегистрацииСтр, 2);
				СтрокаВыгрузки.ДатаРегистрацииСтр = "20" + Год + "-" + Месяц  + "-" + Число;
			Иначе
				СтрокаВыгрузки.ДатаРегистрацииСтр = "0001-01-01";
			КонецЕсли; 
			
			СтрокаВыгрузки.НомерДок           = МассивСлов[2];
			ТипЧисло = Новый ОписаниеТипов("Число");
			СтрокаВыгрузки.ДекларацияНом = ТипЧисло.ПривестиЗначение(МассивСлов[3]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьАдресВВидеСоответствия(СсылкаНаОбъект, ВидКонтактнойИнформации, Дата = '00010101')
			
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, , ВидКонтактнойИнформации, Дата);
	
	ЗначениеКонтактнойИнформации = "";
	ПредставлениеКонтактнойИнформации = "";
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ЗначениеКонтактнойИнформации = КонтактнаяИнформация[0].ЗначенияПолей;
		ПредставлениеКонтактнойИнформации = КонтактнаяИнформация[0].Представление;
	КонецЕсли; 
	
	РоссийскийАдрес = ПустойРоссийскийАдрес();
	
	Если СтрНайти(ЗначениеКонтактнойИнформации, "АдресРФ") > 0 Тогда
		СформироватьАдрес(ЗначениеКонтактнойИнформации, РоссийскийАдрес);
	Иначе
		СформироватьАдресТС(ЗначениеКонтактнойИнформации, РоссийскийАдрес);
	КонецЕсли;
	
	ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес);
	
	Возврат РоссийскийАдрес;

КонецФункции

Функция ПустойРоссийскийАдрес()

	РоссийскийАдрес = 	Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",	        "");
	РоссийскийАдрес.Вставить("Регион",          "");
	РоссийскийАдрес.Вставить("КодРегиона",      "");
	РоссийскийАдрес.Вставить("Район",           "");
	РоссийскийАдрес.Вставить("Город",           "");
	РоссийскийАдрес.Вставить("НаселенныйПункт", "");
	РоссийскийАдрес.Вставить("Улица",           "");
	РоссийскийАдрес.Вставить("Дом",             "");
	РоссийскийАдрес.Вставить("Корпус",          "");
	РоссийскийАдрес.Вставить("Квартира",        "");
	
	Возврат РоссийскийАдрес;

КонецФункции

Процедура ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес)

	Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие") Тогда
		
		Если ЗначениеЗаполнено(РоссийскийАдрес.Получить("Регион"))
			И НЕ ЗначениеЗаполнено(РоссийскийАдрес.Получить("НаселенныйПункт")) Тогда
			
			РоссийскийАдрес.Вставить("НаселенныйПункт", РоссийскийАдрес.Получить("Регион"));
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьАдресТС(ЗначениеКонтактнойИнформации, РоссийскийАдрес)
	
	ЗначенияПолей = РаботаСАдресами.СведенияОбАдресе(ЗначениеКонтактнойИнформации);
	Если ЗначенияПолей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		РоссийскийАдрес[Элемент.Ключ] = "";
		
		Если ЗначенияПолей.Свойство(Элемент.Ключ) Тогда
			РоссийскийАдрес[Элемент.Ключ] = ЗначенияПолей[Элемент.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ЗначенияПолей.Здание) = Тип("Структура") Тогда
		РоссийскийАдрес["Дом"] = ЗначенияПолей.Здание.Номер;
	КонецЕсли;
	
	Если ТипЗнч(ЗначенияПолей.Помещения) = Тип("Массив")
			И ЗначенияПолей.Помещения.Количество() > 0 Тогда
		РоссийскийАдрес["Квартира"] = ЗначенияПолей.Помещения[0].Номер;
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

Функция ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

Функция ПолучитьНазваниеРегионаПоКоду(КодРегиона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		ЧисловойКодРегиона = Число(КодРегиона);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат АдресныйКлассификатор.НаименованиеРегионаПоКоду(ЧисловойКодРегиона);

КонецФункции

Процедура СформироватьАдрес(КонтактнаяИнформация, РоссийскийАдрес) Экспорт
	
	ЗначенияПолей = РаботаСАдресами.ПредыдущийФорматКонтактнойИнформацииXML(КонтактнаяИнформация);
	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		РоссийскийАдрес[Элемент.Ключ] = "";
	КонецЦикла;
	
	Для НомСтр = 1 По СтрЧислоСтрок(ЗначенияПолей) Цикл
		
		Стр = СтрПолучитьСтроку(ЗначенияПолей, НомСтр);
		
		ПредставлениеСтр = Лев(Стр, СтрНайти(Стр, "=") - 1);
		ЗначениеСтр = Сред(Стр, СтрНайти(Стр, "=") + 1);
		
		Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие") И ЗначениеЗаполнено(ПредставлениеСтр) И НЕ РоссийскийАдрес.Получить(ПредставлениеСтр) = Неопределено Тогда
			РоссийскийАдрес[ПредставлениеСтр] = ЗначениеСтр;
		ИначеЕсли ТипЗнч(РоссийскийАдрес) = Тип("Структура") И ЗначениеЗаполнено(ПредставлениеСтр) И РоссийскийАдрес.Свойство(ПредставлениеСтр) Тогда
			РоссийскийАдрес[ПредставлениеСтр] = ЗначениеСтр;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ФормированиеГиперссылкиВЖурналеЗакупок 

Функция ТекстЗапросаЗаявленияОВвозеТоваров(Организация = Неопределено) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументПриобретениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ДокументПриобретениеТоваровУслуг.Номер КАК СТРОКА(12)) КАК Номер,
	|	ДокументПриобретениеТоваровУслуг.Дата КАК Дата,
	|	ДокументПриобретениеТоваровУслуг.Валюта КАК Валюта,
	|	ДокументПриобретениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ДокументПриобретениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	ДокументПриобретениеТоваровУслуг.Организация КАК Организация
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДокументПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе.Остатки КАК ТоварыКОформлениюЗаявленийОВвозеОстатки
	|		ПО ДокументПриобретениеТоваровУслуг.Ссылка = ТоварыКОформлениюЗаявленийОВвозеОстатки.ДокументПоступления
	|ГДЕ &УсловиеОтбора
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументПриобретениеТоваровУслуг.Ссылка,
	|	ДокументПриобретениеТоваровУслуг.Дата,
	|	ДокументПриобретениеТоваровУслуг.Валюта,
	|	ДокументПриобретениеТоваровУслуг.Контрагент,
	|	ДокументПриобретениеТоваровУслуг.СуммаДокумента,
	|	ДокументПриобретениеТоваровУслуг.Организация,
	|	ВЫРАЗИТЬ(ДокументПриобретениеТоваровУслуг.Номер КАК СТРОКА(12))";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОтбора = "ДокументПриобретениеТоваровУслуг.Организация = &Организация";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ГДЕ &УсловиеОтбора", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	ЕстьПравоНаЧтениеПоступленийТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг);
	Если Не (ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОформлениюЗаявленийОВвозе)
		И ЕстьПравоНаЧтениеПоступленийТоваровУслуг) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Организация = Параметры.Организация;
	ТекстЗапроса = ТекстЗапросаЗаявленияОВвозеТоваров(Организация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Организация);
	ТекстГиперссылки = НСтр("ru = 'Заявления о ввозе'");
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыЗаявленияОВвозеТоваров());
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыЗаявленияОВвозеТоваров());
	КонецЕсли;
	
КонецФункции

Функция ИмяФормыЗаявленияОВвозеТоваров() Экспорт
	
	Возврат "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаРабочееМесто";
	
КонецФункции

#КонецОбласти

#Область Прочее 

Функция ПолучитьДокФизЛица(ФизЛицо, ДатаЗначения) Экспорт
	
	Удостоверения = РегистрыСведений.ДокументыФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));

	Если Удостоверения.Количество() > 0 Тогда
		Возврат Удостоверения[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьЗаданиеКФормированиюЗаписейКнигиПокупокПродаж(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Операция.ДатаПодтвержденияОплаты, МЕСЯЦ) КАК Месяц,
	|	Операция.Организация КАК Организация,
	|	Операция.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.ОплатаПодтверждена";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСПредъявленный";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	&Ссылка                                КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Операция.Дата                          КАК Период,
	|	Операция.Организация                   КАК Организация,
	|	&Ссылка                                КАК СчетФактура,
	|	Операция.Контрагент                    КАК Поставщик,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности КАК ВидЦенности,
	|	Строки.СтавкаНДС                       КАК СтавкаНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	ИНАЧЕ
	|		ТаблицаАналитикУчетаПартий.НалогообложениеНДС
	|	КОНЕЦ                                  КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                           КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО                           КАК РеализацияЭкспорт,
	|	0                                      КАК СуммаБезНДС,
	|	СУММА(Строки.СуммаНДС)                 КАК НДС,
	|	СУММА(ВЫБОР 
	|			КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА Строки.СуммаНДС * &КоэффициентПересчетаВВалютуУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ)                             КАК НДСУпр,
	|	НЕОПРЕДЕЛЕНО                           КАК Событие,
	|	НЕОПРЕДЕЛЕНО                           КАК КорВидДеятельностиНДС,
	|	ЛОЖЬ                                   КАК РегламентнаяОперация,
	|	""""                                   КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|		И Строки.НалоговаяБазаНДС <> 0
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= Строки.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Строки.СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Ссылка                                КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Операция.Дата                          КАК Период,
	|	Операция.Организация                   КАК Организация,
	|	&Ссылка                                КАК СчетФактура,
	|	Операция.Контрагент                    КАК Поставщик,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности КАК ВидЦенности,
	|	Строки.СтавкаНДС                       КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                           КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО                           КАК РеализацияЭкспорт,
	|	0                                      КАК СуммаБезНДС,
	|	СУММА(Строки.СуммаНДС)                 КАК НДС,
	|	СУММА(ВЫБОР 
	|			КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА Строки.СуммаНДС * &КоэффициентПересчетаВВалютуУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ)                             КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ВключениеНДСВСтоимость) КАК Событие,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС КАК КорВидДеятельностиНДС,
	|	ЛОЖЬ                                   КАК РегламентнаяОперация,
	|	Строки.ИдентификаторСтроки             КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|		И Строки.НалоговаяБазаНДС <> 0
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= Строки.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Строки.СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС,
	|	Строки.ИдентификаторСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьФИОФизЛица(ФизЛицо, НаДату = Неопределено)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	Если Метаданные.Справочники.Найти("ФизическиеЛица") = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ФизЛицо);
	Иначе
		ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДатаСеанса()), Новый Структура("ФизическоеЛицо", ФизЛицо));
		Если ДанныеФЛ.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, ДанныеФЛ[0]);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСписокВыбораВидовТранспорта(СписокЗначений)

	СписокЗначений.Очистить();
	СписокЗначений.Добавить("10", НСтр("ru = '10 - Морской/речной транспорт'"));
	СписокЗначений.Добавить("20", НСтр("ru = '20 - Железнодорожный транспорт'"));
	СписокЗначений.Добавить("30", НСтр("ru = '30 - Автодорожный транспорт, за исключением транспортных средств, указанных под кодами 31, 32'"));
	СписокЗначений.Добавить("31", НСтр("ru = '31 - Состав транспортных средств (тягач с полуприцепом или прицепом)'"));
	СписокЗначений.Добавить("32", НСтр("ru = '32 - Состав транспортных средств (тягач с полуприцепом(-ами) или прицепом(-ами))'"));
	СписокЗначений.Добавить("40", НСтр("ru = '40 - Воздушный транспорт'"));
	СписокЗначений.Добавить("50", НСтр("ru = '50 - Почтовое отправление'"));
	СписокЗначений.Добавить("71", НСтр("ru = '71 - Трубопроводный транспорт'"));
	СписокЗначений.Добавить("72", НСтр("ru = '72 - Линии электропередачи'"));
	СписокЗначений.Добавить("80", НСтр("ru = '80 - Внутренний водный транспорт'"));
	СписокЗначений.Добавить("90", НСтр("ru = '90 - Транспортное средство, перемещающееся в качестве товара своим ходом'"));
	СписокЗначений.Добавить("99", НСтр("ru = '99 - Прочее'"));
	
КонецПроцедуры

Функция ОпределитьВидТранспортаПоСтатистике(ДокументПоступления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата КАК Период,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Контрагент = &Контрагент
		|	И ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата,
		|	2
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата,
		|	3
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&АвтодорожныйТранспорт,
		|	NULL,
		|	4
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подзапрос.ВидТранспорта КАК ВидТранспорта
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Документы.ВидТранспорта КАК ВидТранспорта,
		|		СУММА(1) КАК ЧастотаИспользования,
		|		ВТ_Документы.Приоритет КАК Приоритет
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_Документы.ВидТранспорта,
		|		ВТ_Документы.Приоритет) КАК Подзапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подзапрос.Приоритет,
		|	Подзапрос.ЧастотаИспользования УБЫВ";
		
	Запрос.УстановитьПараметр("Контрагент", ДокументПоступления.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДокументПоступления.Организация);
	Запрос.УстановитьПараметр("АвтодорожныйТранспорт", 
			НСтр("ru = '30 - Автодорожный транспорт, за исключением транспортных средств, указанных под кодами 31, 32'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ВидТранспорта;
	
КонецФункции

Функция ТекстЗапросаТоварыКОформлениюЗаявленийОВвозе(ЗаполнениеНаОсновании = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Склад КАК Склад,
	|	Товары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Товары.НомерГТД КАК НомерТД,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов КАК ВидЗапасов,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура        КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика      КАК Характеристика,
	|	ТоварыКОформлению.Серия               КАК Серия,
	|	ТоварыКОформлению.Склад               КАК Склад,
	|	ТоварыКОформлению.КОформлениюОстаток  КАК КОформлению
	|ПОМЕСТИТЬ ОстаткиКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе.Остатки(, ДокументПоступления = &ДокументПоступления) КАК ТоварыКОформлению
	|ГДЕ
	|	ТоварыКОформлению.КОформлениюОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.НомерСтроки,
	|	ТоварыКОформлению.ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура,
	|	СпрНоменклатура.ЕдиницаИзмерения,
	|	СпрНоменклатура.КодТНВЭД,
	|	СпрНоменклатура.ТипНоменклатуры,
	|	СпрНоменклатура.СтавкаНДС,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Склад,
	|	ТоварыКОформлению.ФактурнаяСтоимость,
	|	ТоварыКОформлению.КОформлению
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе КАК ТоварыКОформлению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТоварыКОформлению.Номенклатура = СпрНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиКОформлению КАК ОстаткиКОформлению
	|	ПО
	|		ТоварыКОформлению.ДокументПоступления = ОстаткиКОформлению.ДокументПоступления
	|		И ТоварыКОформлению.Номенклатура = ОстаткиКОформлению.Номенклатура
	|		И ТоварыКОформлению.Характеристика = ОстаткиКОформлению.Характеристика
	|		И ТоварыКОформлению.Серия = ОстаткиКОформлению.Серия
	|		И ТоварыКОформлению.Склад = ОстаткиКОформлению.Склад
	|ГДЕ
	|	ТоварыКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТоварыКОформлению.ДокументПоступления = &ДокументПоступления
	|	И (НЕ &ЗаполнениеНаОсновании 
	|		ИЛИ НЕ ОстаткиКОформлению.ДокументПоступления ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура        КАК Номенклатура,
	|	ТоварыКОформлению.КодТНВЭД            КАК КодТНВЭД,
	|	ТоварыКОформлению.Характеристика      КАК Характеристика,
	|	ТоварыКОформлению.Серия               КАК Серия,
	|	ТоварыКОформлению.Склад               КАК Склад,
	|	ТоварыКОформлению.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ТоварыКОформлению.КОформлению         КАК Количество,
	|	ТоварыКОформлению.ФактурнаяСтоимость  КАК ФактурнаяСтоимость,
	|	ТоварыКОформлению.ФактурнаяСтоимость * КурсыВалют.Курс / КурсыВалют.Кратность КАК НалоговаяБазаНДС,
	|	ТоварыКОформлению.СтавкаНДС           КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА НЕ КурсВалютыДолларСША.Курс ЕСТЬ NULL 
	|			ТОГДА ТоварыКОформлению.ФактурнаяСтоимость * 
	|						(КурсыВалют.Курс / КурсыВалют.Кратность) / (КурсВалютыДолларСША.Курс / КурсВалютыДолларСША.Кратность)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатСтоимостьДолларыСША,
	|	&ТекстЗапросаВес * ТоварыКОформлению.КОформлению КАК ВесНеттоКг,
	|	ТоварыКОформлению.ФактурнаяСтоимость * КурсыВалют.Курс / КурсыВалют.Кратность КАК НалоговаяБазаАкцизы,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугТовары.СтранаПроисхождения, Операция.Контрагент.СтранаРегистрации) КАК СтранаПроисхождения,
	|	ПриобретениеТоваровУслугТовары.НомерТД КАК НомерТД,
	|
	|	Операция.Валюта                  КАК Валюта,
	|	Операция.НомерВходящегоДокумента КАК СерияНомерТСД,
	|	Операция.ДатаВходящегоДокумента  КАК ДатаТСД,
	|	Операция.Договор                 КАК Договор,
	|	Операция.ЗакупкаПодДеятельность  КАК ЗакупкаПодДеятельность,
	|
	|	ПриобретениеТоваровУслугТовары.НоменклатураПоставщика     КАК НоменклатураПоставщика,
	|	ПриобретениеТоваровУслугТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ПриобретениеТоваровУслугТовары.ВидЗапасов                 КАК ВидЗапасов,
	|	ПриобретениеТоваровУслугТовары.Подразделение              КАК Подразделение,
	|	ПриобретениеТоваровУслугТовары.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|
	|	&ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	&ВидТранспорта      КАК ВидТранспорта
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК Операция
	|		ПО ТоварыКОформлению.ДокументПоступления = Операция.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ПриобретениеТоваровУслугТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПринятияНаУчет, ) КАК КурсыВалют
	|			ПО ПриобретениеТоваровУслугТовары.Ссылка.Валюта = КурсыВалют.Валюта
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПринятияНаУчет, Валюта = &ДолларСША) КАК КурсВалютыДолларСША
	|			ПО (ИСТИНА)
	|		ПО ТоварыКОформлению.ДокументПоступления = ПриобретениеТоваровУслугТовары.Ссылка
	|			И ТоварыКОформлению.Номенклатура = ПриобретениеТоваровУслугТовары.Номенклатура
	|			И ТоварыКОформлению.Характеристика = ПриобретениеТоваровУслугТовары.Характеристика
	|			И ТоварыКОформлению.Серия = ПриобретениеТоваровУслугТовары.Серия
	|			И ТоварыКОформлению.Склад = ПриобретениеТоваровУслугТовары.Склад
	|			И ТоварыКОформлению.НомерСтроки = ПриобретениеТоваровУслугТовары.НомерСтроки
	|ГДЕ
	|	ТоварыКОформлению.ДокументПоступления = &ДокументПоступления
	|	И ТоварыКОформлению.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВес", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#КонецЕсли
